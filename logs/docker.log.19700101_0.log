1970-01-01T00:33:42+00:00	docker.log	{"log":"===> User\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"uid=1000(appuser) gid=1000(appuser) groups=1000(appuser)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"===> Configuring ...\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"===> Running preflight checks ... \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"===> Check if /var/lib/kafka/data is writable ...\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"===> Check if Zookeeper is healthy ...\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"SLF4J: Class path contains multiple SLF4J bindings.\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"SLF4J: Found binding in [jar:file:/usr/share/java/cp-base-new/slf4j-simple-1.7.30.jar!/org/slf4j/impl/StaticLoggerBinder.class]\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"SLF4J: Found binding in [jar:file:/usr/share/java/cp-base-new/slf4j-log4j12-1.7.30.jar!/org/slf4j/impl/StaticLoggerBinder.class]\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"SLF4J: Actual binding is of type [org.slf4j.impl.SimpleLoggerFactory]\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:zookeeper.version=3.6.3--6401e4ad2087061bc6b9f80dec2d69f2e3c8660a, built on 04/08/2021 16:35 GMT\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:host.name=kafka3\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:java.version=11.0.13\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:java.vendor=Azul Systems, Inc.\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:java.home=/usr/lib/jvm/zulu11-ca\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:java.class.path=/usr/share/java/cp-base-new/kafka-server-common-7.0.1-ccs.jar:/usr/share/java/cp-base-new/jackson-databind-2.12.3.jar:/usr/share/java/cp-base-new/common-utils-7.0.1.jar:/usr/share/java/cp-base-new/slf4j-api-1.7.30.jar:/usr/share/java/cp-base-new/slf4j-simple-1.7.30.jar:/usr/share/java/cp-base-new/snappy-java-1.1.8.1.jar:/usr/share/java/cp-base-new/zookeeper-jute-3.6.3.jar:/usr/share/java/cp-base-new/slf4j-log4j12-1.7.30.jar:/usr/share/java/cp-base-new/gson-2.8.6.jar:/usr/share/java/cp-base-new/audience-annotations-0.5.0.jar:/usr/share/java/cp-base-new/kafka_2.13-7.0.1-ccs.jar:/usr/share/java/cp-base-new/kafka-storage-api-7.0.1-ccs.jar:/usr/share/java/cp-base-new/scala-logging_2.13-3.9.3.jar:/usr/share/java/cp-base-new/kafka-storage-7.0.1-ccs.jar:/usr/share/java/cp-base-new/paranamer-2.8.jar:/usr/share/java/cp-base-new/jackson-dataformat-yaml-2.12.3.jar:/usr/share/java/cp-base-new/snakeyaml-1.27.jar:/usr/share/java/cp-base-new/lz4-java-1.7.1.jar:/usr/share/java/cp-base-new/disk-usage-agent-7.0.1.jar:/usr/share/java/cp-base-new/confluent-log4j-1.2.17-cp2.jar:/usr/share/java/cp-base-new/jmx_prometheus_javaagent-0.14.0.jar:/usr/share/java/cp-base-new/jackson-module-scala_2.13-2.12.3.jar:/usr/share/java/cp-base-new/jackson-annotations-2.12.3.jar:/usr/share/java/cp-base-new/metrics-core-4.1.12.1.jar:/usr/share/java/cp-base-new/scala-java8-compat_2.13-1.0.0.jar:/usr/share/java/cp-base-new/jackson-datatype-jdk8-2.12.3.jar:/usr/share/java/cp-base-new/kafka-raft-7.0.1-ccs.jar:/usr/share/java/cp-base-new/jolokia-jvm-1.6.2-agent.jar:/usr/share/java/cp-base-new/jackson-dataformat-csv-2.12.3.jar:/usr/share/java/cp-base-new/jackson-core-2.12.3.jar:/usr/share/java/cp-base-new/argparse4j-0.7.0.jar:/usr/share/java/cp-base-new/jolokia-core-1.6.2.jar:/usr/share/java/cp-base-new/zookeeper-3.6.3.jar:/usr/share/java/cp-base-new/commons-cli-1.4.jar:/usr/share/java/cp-base-new/zstd-jni-1.5.0-2.jar:/usr/share/java/cp-base-new/utility-belt-7.0.1.jar:/usr/share/java/cp-base-new/scala-library-2.13.5.jar:/usr/share/java/cp-base-new/json-simple-1.1.1.jar:/usr/share/java/cp-base-new/kafka-clients-7.0.1-ccs.jar:/usr/share/java/cp-base-new/jopt-simple-5.0.4.jar:/usr/share/java/cp-base-new/kafka-metadata-7.0.1-ccs.jar:/usr/share/java/cp-base-new/scala-reflect-2.13.5.jar:/usr/share/java/cp-base-new/metrics-core-2.2.0.jar:/usr/share/java/cp-base-new/scala-collection-compat_2.13-2.4.4.jar\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:java.library.path=/usr/java/packages/lib:/usr/lib64:/lib64:/lib:/usr/lib\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:java.io.tmpdir=/tmp\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:java.compiler=<NA>\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:os.name=Linux\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:os.arch=amd64\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:os.version=5.10.76-linuxkit\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:user.name=appuser\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:user.home=/home/appuser\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:user.dir=/home/appuser\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:os.memory.free=26MB\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:os.memory.max=498MB\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:os.memory.total=32MB\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Initiating client connection, connectString=zoo1:2181 sessionTimeout=40000 watcher=io.confluent.admin.utils.ZookeeperConnectionWatcher@a7e666\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.common.X509Util - Setting -D jdk.tls.rejectClientInitiatedRenegotiation=true to disable client-initiated TLS renegotiation\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ClientCnxnSocket - jute.maxbuffer value is 1048575 Bytes\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ClientCnxn - zookeeper.request.timeout value is 0. feature enabled=false\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main-SendThread(zoo1:2181)] INFO org.apache.zookeeper.ClientCnxn - Opening socket connection to server zoo1/192.168.32.2:2181.\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main-SendThread(zoo1:2181)] INFO org.apache.zookeeper.ClientCnxn - SASL config status: Will not attempt to authenticate using SASL (unknown error)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main-SendThread(zoo1:2181)] WARN org.apache.zookeeper.ClientCnxn - Session 0x0 for sever zoo1/192.168.32.2:2181, Closing socket connection. Attempting reconnect except it is a SessionExpiredException.\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"java.net.ConnectException: Connection refused\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:777)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:344)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1290)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main-SendThread(zoo1:2181)] INFO org.apache.zookeeper.ClientCnxn - Opening socket connection to server zoo1/192.168.32.2:2181.\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main-SendThread(zoo1:2181)] INFO org.apache.zookeeper.ClientCnxn - SASL config status: Will not attempt to authenticate using SASL (unknown error)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main-SendThread(zoo1:2181)] WARN org.apache.zookeeper.ClientCnxn - Session 0x0 for sever zoo1/192.168.32.2:2181, Closing socket connection. Attempting reconnect except it is a SessionExpiredException.\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"java.net.ConnectException: Connection refused\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:777)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:344)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1290)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main-SendThread(zoo1:2181)] INFO org.apache.zookeeper.ClientCnxn - Opening socket connection to server zoo1/192.168.32.2:2181.\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main-SendThread(zoo1:2181)] INFO org.apache.zookeeper.ClientCnxn - SASL config status: Will not attempt to authenticate using SASL (unknown error)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main-SendThread(zoo1:2181)] INFO org.apache.zookeeper.ClientCnxn - Socket connection established, initiating session, client: /192.168.32.5:44714, server: zoo1/192.168.32.2:2181\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main-SendThread(zoo1:2181)] INFO org.apache.zookeeper.ClientCnxn - Session establishment complete on server zoo1/192.168.32.2:2181, session id = 0x10006de0c190000, negotiated timeout = 40000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main-SendThread(zoo1:2181)] WARN org.apache.zookeeper.ClientCnxn - An exception was thrown while closing send thread for session 0x10006de0c190000.\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"EndOfStreamException: Unable to read additional data from server sessionid 0x10006de0c190000, likely server has closed socket\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxnSocketNIO.doIO(ClientCnxnSocketNIO.java:77)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:350)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1290)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Session: 0x10006de0c190000 closed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main-EventThread] INFO org.apache.zookeeper.ClientCnxn - EventThread shut down for session: 0x10006de0c190000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"===> Launching ... \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"===> Launching kafka ... \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:05,845] INFO Registered kafka:type=kafka.Log4jController MBean (kafka.utils.Log4jControllerRegistration$)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:07,464] INFO Setting -D jdk.tls.rejectClientInitiatedRenegotiation=true to disable client-initiated TLS renegotiation (org.apache.zookeeper.common.X509Util)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:07,958] INFO Registered signal handlers for TERM, INT, HUP (org.apache.kafka.common.utils.LoggingSignalHandler)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:07,974] INFO starting (kafka.server.KafkaServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:07,976] INFO Connecting to zookeeper on zoo1:2181 (kafka.server.KafkaServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,034] INFO [ZooKeeperClient Kafka server] Initializing a new session to zoo1:2181. (kafka.zookeeper.ZooKeeperClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,078] INFO Client environment:zookeeper.version=3.6.3--6401e4ad2087061bc6b9f80dec2d69f2e3c8660a, built on 04/08/2021 16:35 GMT (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,078] INFO Client environment:host.name=kafka3 (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,078] INFO Client environment:java.version=11.0.13 (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,079] INFO Client environment:java.vendor=Azul Systems, Inc. (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,079] INFO Client environment:java.home=/usr/lib/jvm/zulu11-ca (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,079] INFO Client environment:java.class.path=/usr/bin/../share/java/kafka/jetty-server-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/rocksdbjni-6.19.3.jar:/usr/bin/../share/java/kafka/connect-mirror-client-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/kafka-server-common-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/jersey-server-2.34.jar:/usr/bin/../share/java/kafka/hk2-locator-2.6.1.jar:/usr/bin/../share/java/kafka/jackson-databind-2.12.3.jar:/usr/bin/../share/java/kafka/maven-artifact-3.8.1.jar:/usr/bin/../share/java/kafka/scala-reflect-2.13.6.jar:/usr/bin/../share/java/kafka/slf4j-api-1.7.30.jar:/usr/bin/../share/java/kafka/kafka-shell-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/jetty-continuation-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/connect-basic-auth-extension-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/connect-api-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/netty-transport-4.1.68.Final.jar:/usr/bin/../share/java/kafka/snappy-java-1.1.8.1.jar:/usr/bin/../share/java/kafka/jetty-http-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/zookeeper-jute-3.6.3.jar:/usr/bin/../share/java/kafka/netty-common-4.1.68.Final.jar:/usr/bin/../share/java/kafka/jakarta.activation-api-1.2.1.jar:/usr/bin/../share/java/kafka/slf4j-log4j12-1.7.30.jar:/usr/bin/../share/java/kafka/connect-mirror-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/netty-buffer-4.1.68.Final.jar:/usr/bin/../share/java/kafka/kafka-tools-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/osgi-resource-locator-1.0.3.jar:/usr/bin/../share/java/kafka/audience-annotations-0.5.0.jar:/usr/bin/../share/java/kafka/jersey-container-servlet-2.34.jar:/usr/bin/../share/java/kafka/jackson-jaxrs-json-provider-2.12.3.jar:/usr/bin/../share/java/kafka/jakarta.ws.rs-api-2.1.6.jar:/usr/bin/../share/java/kafka/kafka_2.13-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/javassist-3.27.0-GA.jar:/usr/bin/../share/java/kafka/kafka-storage-api-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/jetty-servlet-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/jersey-client-2.34.jar:/usr/bin/../share/java/kafka/hk2-utils-2.6.1.jar:/usr/bin/../share/java/kafka/jackson-jaxrs-base-2.12.3.jar:/usr/bin/../share/java/kafka/reflections-0.9.12.jar:/usr/bin/../share/java/kafka/kafka-streams-examples-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/jaxb-api-2.3.0.jar:/usr/bin/../share/java/kafka/jetty-util-ajax-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/netty-transport-native-epoll-4.1.68.Final.jar:/usr/bin/../share/java/kafka/scala-logging_2.13-3.9.3.jar:/usr/bin/../share/java/kafka/kafka-storage-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/javax.ws.rs-api-2.1.1.jar:/usr/bin/../share/java/kafka/paranamer-2.8.jar:/usr/bin/../share/java/kafka/jersey-container-servlet-core-2.34.jar:/usr/bin/../share/java/kafka/jetty-security-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/kafka-streams-scala_2.13-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/jetty-util-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/lz4-java-1.7.1.jar:/usr/bin/../share/java/kafka/confluent-log4j-1.2.17-cp2.jar:/usr/bin/../share/java/kafka/kafka.jar:/usr/bin/../share/java/kafka/jakarta.annotation-api-1.3.5.jar:/usr/bin/../share/java/kafka/jersey-common-2.34.jar:/usr/bin/../share/java/kafka/jakarta.inject-2.6.1.jar:/usr/bin/../share/java/kafka/jackson-module-scala_2.13-2.12.3.jar:/usr/bin/../share/java/kafka/connect-json-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/jackson-annotations-2.12.3.jar:/usr/bin/../share/java/kafka/metrics-core-4.1.12.1.jar:/usr/bin/../share/java/kafka/scala-java8-compat_2.13-1.0.0.jar:/usr/bin/../share/java/kafka/javax.servlet-api-3.1.0.jar:/usr/bin/../share/java/kafka/jackson-datatype-jdk8-2.12.3.jar:/usr/bin/../share/java/kafka/trogdor-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/connect-runtime-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/jakarta.xml.bind-api-2.3.2.jar:/usr/bin/../share/java/kafka/jakarta.validation-api-2.0.2.jar:/usr/bin/../share/java/kafka/netty-transport-native-unix-common-4.1.68.Final.jar:/usr/bin/../share/java/kafka/kafka-streams-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/kafka-raft-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/scala-library-2.13.6.jar:/usr/bin/../share/java/kafka/jetty-servlets-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/netty-handler-4.1.68.Final.jar:/usr/bin/../share/java/kafka/plexus-utils-3.2.1.jar:/usr/bin/../share/java/kafka/kafka-log4j-appender-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/jackson-dataformat-csv-2.12.3.jar:/usr/bin/../share/java/kafka/jackson-core-2.12.3.jar:/usr/bin/../share/java/kafka/hk2-api-2.6.1.jar:/usr/bin/../share/java/kafka/argparse4j-0.7.0.jar:/usr/bin/../share/java/kafka/zookeeper-3.6.3.jar:/usr/bin/../share/java/kafka/commons-cli-1.4.jar:/usr/bin/../share/java/kafka/netty-codec-4.1.68.Final.jar:/usr/bin/../share/java/kafka/jetty-client-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/jackson-module-jaxb-annotations-2.12.3.jar:/usr/bin/../share/java/kafka/zstd-jni-1.5.0-2.jar:/usr/bin/../share/java/kafka/jersey-hk2-2.34.jar:/usr/bin/../share/java/kafka/jline-3.12.1.jar:/usr/bin/../share/java/kafka/kafka-streams-test-utils-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/connect-transforms-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/kafka-clients-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/jopt-simple-5.0.4.jar:/usr/bin/../share/java/kafka/jetty-io-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/kafka-metadata-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/activation-1.1.1.jar:/usr/bin/../share/java/kafka/commons-lang3-3.8.1.jar:/usr/bin/../share/java/kafka/aopalliance-repackaged-2.6.1.jar:/usr/bin/../share/java/kafka/metrics-core-2.2.0.jar:/usr/bin/../share/java/kafka/scala-collection-compat_2.13-2.4.4.jar:/usr/bin/../share/java/kafka/netty-resolver-4.1.68.Final.jar:/usr/bin/../share/java/confluent-telemetry/* (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,080] INFO Client environment:java.library.path=/usr/java/packages/lib:/usr/lib64:/lib64:/lib:/usr/lib (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,080] INFO Client environment:java.io.tmpdir=/tmp (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,080] INFO Client environment:java.compiler=<NA> (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,081] INFO Client environment:os.name=Linux (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,081] INFO Client environment:os.arch=amd64 (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,081] INFO Client environment:os.version=5.10.76-linuxkit (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,081] INFO Client environment:user.name=appuser (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,081] INFO Client environment:user.home=/home/appuser (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,081] INFO Client environment:user.dir=/home/appuser (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,081] INFO Client environment:os.memory.free=1007MB (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,081] INFO Client environment:os.memory.max=1024MB (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,082] INFO Client environment:os.memory.total=1024MB (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,100] INFO Initiating client connection, connectString=zoo1:2181 sessionTimeout=18000 watcher=kafka.zookeeper.ZooKeeperClient$ZooKeeperClientWatcher$@3bcbb589 (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,127] INFO jute.maxbuffer value is 4194304 Bytes (org.apache.zookeeper.ClientCnxnSocket)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,149] INFO zookeeper.request.timeout value is 0. feature enabled=false (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,156] INFO [ZooKeeperClient Kafka server] Waiting until connected. (kafka.zookeeper.ZooKeeperClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,208] INFO Opening socket connection to server zoo1/192.168.32.2:2181. (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,211] INFO SASL config status: Will not attempt to authenticate using SASL (unknown error) (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,235] INFO Socket connection established, initiating session, client: /192.168.32.5:44722, server: zoo1/192.168.32.2:2181 (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,262] INFO Session establishment complete on server zoo1/192.168.32.2:2181, session id = 0x10006de0c190005, negotiated timeout = 18000 (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,274] INFO [ZooKeeperClient Kafka server] Connected. (kafka.zookeeper.ZooKeeperClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,649] INFO [feature-zk-node-event-process-thread]: Starting (kafka.server.FinalizedFeatureChangeListener$ChangeNotificationProcessorThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,693] INFO Feature ZK node at path: /feature does not exist (kafka.server.FinalizedFeatureChangeListener)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,695] INFO Cleared cache (kafka.server.FinalizedFeatureCache)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:09,457] INFO Cluster ID = V5kB09chREKL6G31lo5VzA (kafka.server.KafkaServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:09,480] WARN No meta.properties file under dir /var/lib/kafka/data/meta.properties (kafka.server.BrokerMetadataCheckpoint)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:09,801] INFO KafkaConfig values: \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tadvertised.listeners = LISTENER_DOCKER_INTERNAL://kafka3:19094,LISTENER_DOCKER_EXTERNAL://127.0.0.1:9094\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\talter.config.policy.class.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\talter.log.dirs.replication.quota.window.num = 11\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\talter.log.dirs.replication.quota.window.size.seconds = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tauthorizer.class.name = kafka.security.authorizer.AclAuthorizer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tauto.create.topics.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tauto.leader.rebalance.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tbackground.threads = 10\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tbroker.heartbeat.interval.ms = 2000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tbroker.id = 3\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tbroker.id.generation.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tbroker.rack = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tbroker.session.timeout.ms = 9000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tclient.quota.callback.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcompression.type = producer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tconnection.failed.authentication.delay.ms = 100\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tconnections.max.idle.ms = 600000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tconnections.max.reauth.ms = 0\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontrol.plane.listener.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontrolled.shutdown.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontrolled.shutdown.max.retries = 3\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontrolled.shutdown.retry.backoff.ms = 5000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.listener.names = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.append.linger.ms = 25\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.election.backoff.max.ms = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.election.timeout.ms = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.fetch.timeout.ms = 2000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.request.timeout.ms = 2000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.retry.backoff.ms = 20\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.voters = []\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quota.window.num = 11\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quota.window.size.seconds = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.socket.timeout.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcreate.topic.policy.class.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdefault.replication.factor = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelegation.token.expiry.check.interval.ms = 3600000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelegation.token.expiry.time.ms = 86400000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelegation.token.master.key = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelegation.token.max.lifetime.ms = 604800000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelegation.token.secret.key = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelete.records.purgatory.purge.interval.requests = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelete.topic.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tfetch.max.bytes = 57671680\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tfetch.purgatory.purge.interval.requests = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tgroup.initial.rebalance.delay.ms = 3000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tgroup.max.session.timeout.ms = 1800000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tgroup.max.size = 2147483647\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tgroup.min.session.timeout.ms = 6000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tinitial.broker.registration.timeout.ms = 60000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tinter.broker.listener.name = LISTENER_DOCKER_INTERNAL\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tinter.broker.protocol.version = 3.0-IV1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tkafka.metrics.polling.interval.secs = 10\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tkafka.metrics.reporters = []\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tleader.imbalance.check.interval.seconds = 300\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tleader.imbalance.per.broker.percentage = 10\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlistener.security.protocol.map = LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlisteners = LISTENER_DOCKER_INTERNAL://0.0.0.0:19094,LISTENER_DOCKER_EXTERNAL://0.0.0.0:9094\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.backoff.ms = 15000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.dedupe.buffer.size = 134217728\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.delete.retention.ms = 86400000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.io.buffer.load.factor = 0.9\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.io.buffer.size = 524288\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.io.max.bytes.per.second = 1.7976931348623157E308\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.max.compaction.lag.ms = 9223372036854775807\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.min.cleanable.ratio = 0.5\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.min.compaction.lag.ms = 0\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.threads = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleanup.policy = [delete]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.dir = /tmp/kafka-logs\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.dirs = /var/lib/kafka/data\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.flush.interval.messages = 9223372036854775807\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.flush.interval.ms = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.flush.offset.checkpoint.interval.ms = 60000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.flush.scheduler.interval.ms = 9223372036854775807\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.flush.start.offset.checkpoint.interval.ms = 60000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.index.interval.bytes = 4096\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.index.size.max.bytes = 10485760\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.message.downconversion.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.message.format.version = 3.0-IV1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.message.timestamp.difference.max.ms = 9223372036854775807\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.message.timestamp.type = CreateTime\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.preallocate = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.retention.bytes = -1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.retention.check.interval.ms = 300000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.retention.hours = 168\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.retention.minutes = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.retention.ms = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.roll.hours = 168\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.roll.jitter.hours = 0\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.roll.jitter.ms = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.roll.ms = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.segment.bytes = 1073741824\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.segment.delete.delay.ms = 60000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmax.connection.creation.rate = 2147483647\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmax.connections = 2147483647\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmax.connections.per.ip = 2147483647\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmax.connections.per.ip.overrides = \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmax.incremental.fetch.session.cache.slots = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmessage.max.bytes = 1048588\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.log.dir = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.log.max.record.bytes.between.snapshots = 20971520\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.log.segment.bytes = 1073741824\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.log.segment.min.bytes = 8388608\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.log.segment.ms = 604800000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.max.retention.bytes = -1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.max.retention.ms = 604800000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetric.reporters = []\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetrics.num.samples = 2\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetrics.recording.level = INFO\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetrics.sample.window.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmin.insync.replicas = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnode.id = -1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnum.io.threads = 8\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnum.network.threads = 3\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnum.partitions = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnum.recovery.threads.per.data.dir = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnum.replica.alter.log.dirs.threads = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnum.replica.fetchers = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffset.metadata.max.bytes = 4096\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.commit.required.acks = -1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.commit.timeout.ms = 5000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.load.buffer.size = 5242880\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.retention.check.interval.ms = 600000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.retention.minutes = 10080\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.topic.compression.codec = 0\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.topic.num.partitions = 50\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.topic.replication.factor = 3\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.topic.segment.bytes = 104857600\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tpassword.encoder.cipher.algorithm = AES/CBC/PKCS5Padding\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tpassword.encoder.iterations = 4096\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tpassword.encoder.key.length = 128\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tpassword.encoder.keyfactory.algorithm = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tpassword.encoder.old.secret = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tpassword.encoder.secret = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tprincipal.builder.class = class org.apache.kafka.common.security.authenticator.DefaultKafkaPrincipalBuilder\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tprocess.roles = []\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tproducer.purgatory.purge.interval.requests = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tqueued.max.request.bytes = -1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tqueued.max.requests = 500\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tquota.window.num = 11\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tquota.window.size.seconds = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.index.file.cache.total.size.bytes = 1073741824\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.manager.task.interval.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.manager.task.retry.backoff.max.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.manager.task.retry.backoff.ms = 500\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.manager.task.retry.jitter = 0.2\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.manager.thread.pool.size = 10\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.metadata.manager.class.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.metadata.manager.class.path = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.metadata.manager.impl.prefix = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.metadata.manager.listener.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.reader.max.pending.tasks = 100\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.reader.threads = 10\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.storage.manager.class.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.storage.manager.class.path = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.storage.manager.impl.prefix = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.storage.system.enable = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.fetch.backoff.ms = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.fetch.max.bytes = 1048576\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.fetch.min.bytes = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.fetch.response.max.bytes = 10485760\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.fetch.wait.max.ms = 500\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.high.watermark.checkpoint.interval.ms = 5000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.lag.time.max.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.selector.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.socket.receive.buffer.bytes = 65536\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.socket.timeout.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplication.quota.window.num = 11\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplication.quota.window.size.seconds = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\trequest.timeout.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treserved.broker.max.id = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.client.callback.handler.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.enabled.mechanisms = [GSSAPI]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.jaas.config = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.kerberos.kinit.cmd = /usr/bin/kinit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.kerberos.min.time.before.relogin = 60000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.kerberos.principal.to.local.rules = [DEFAULT]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.kerberos.service.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.kerberos.ticket.renew.jitter = 0.05\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.kerberos.ticket.renew.window.factor = 0.8\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.login.callback.handler.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.login.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.login.refresh.buffer.seconds = 300\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.login.refresh.min.period.seconds = 60\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.login.refresh.window.factor = 0.8\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.login.refresh.window.jitter = 0.05\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.mechanism.controller.protocol = GSSAPI\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.mechanism.inter.broker.protocol = GSSAPI\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.server.callback.handler.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsecurity.inter.broker.protocol = PLAINTEXT\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsecurity.providers = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsocket.connection.setup.timeout.max.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsocket.connection.setup.timeout.ms = 10000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsocket.receive.buffer.bytes = 102400\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsocket.request.max.bytes = 104857600\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsocket.send.buffer.bytes = 102400\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.cipher.suites = []\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.client.auth = none\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.enabled.protocols = [TLSv1.2, TLSv1.3]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.endpoint.identification.algorithm = https\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.engine.factory.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.key.password = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.keymanager.algorithm = SunX509\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.keystore.certificate.chain = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.keystore.key = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.keystore.location = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.keystore.password = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.keystore.type = JKS\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.principal.mapping.rules = DEFAULT\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.protocol = TLSv1.3\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.provider = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.secure.random.implementation = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.trustmanager.algorithm = PKIX\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.truststore.certificates = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.truststore.location = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.truststore.password = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.truststore.type = JKS\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.abort.timed.out.transaction.cleanup.interval.ms = 10000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.max.timeout.ms = 900000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.remove.expired.transaction.cleanup.interval.ms = 3600000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.state.log.load.buffer.size = 5242880\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.state.log.min.isr = 2\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.state.log.num.partitions = 50\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.state.log.replication.factor = 3\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.state.log.segment.bytes = 104857600\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransactional.id.expiration.ms = 604800000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tunclean.leader.election.enable = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.clientCnxnSocket = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.connect = zoo1:2181\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.connection.timeout.ms = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.max.in.flight.requests = 10\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.session.timeout.ms = 18000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.set.acl = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.cipher.suites = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.client.enable = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.crl.enable = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.enabled.protocols = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.endpoint.identification.algorithm = HTTPS\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.keystore.location = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.keystore.password = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.keystore.type = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.ocsp.enable = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.protocol = TLSv1.2\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.truststore.location = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.truststore.password = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.truststore.type = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.sync.time.ms = 2000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":" (kafka.server.KafkaConfig)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:09,835] INFO KafkaConfig values: \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tadvertised.listeners = LISTENER_DOCKER_INTERNAL://kafka3:19094,LISTENER_DOCKER_EXTERNAL://127.0.0.1:9094\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\talter.config.policy.class.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\talter.log.dirs.replication.quota.window.num = 11\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\talter.log.dirs.replication.quota.window.size.seconds = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tauthorizer.class.name = kafka.security.authorizer.AclAuthorizer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tauto.create.topics.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tauto.leader.rebalance.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tbackground.threads = 10\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tbroker.heartbeat.interval.ms = 2000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tbroker.id = 3\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tbroker.id.generation.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tbroker.rack = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tbroker.session.timeout.ms = 9000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tclient.quota.callback.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcompression.type = producer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tconnection.failed.authentication.delay.ms = 100\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tconnections.max.idle.ms = 600000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tconnections.max.reauth.ms = 0\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontrol.plane.listener.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontrolled.shutdown.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontrolled.shutdown.max.retries = 3\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontrolled.shutdown.retry.backoff.ms = 5000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.listener.names = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.append.linger.ms = 25\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.election.backoff.max.ms = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.election.timeout.ms = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.fetch.timeout.ms = 2000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.request.timeout.ms = 2000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.retry.backoff.ms = 20\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.voters = []\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quota.window.num = 11\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quota.window.size.seconds = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.socket.timeout.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcreate.topic.policy.class.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdefault.replication.factor = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelegation.token.expiry.check.interval.ms = 3600000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelegation.token.expiry.time.ms = 86400000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelegation.token.master.key = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelegation.token.max.lifetime.ms = 604800000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelegation.token.secret.key = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelete.records.purgatory.purge.interval.requests = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelete.topic.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tfetch.max.bytes = 57671680\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tfetch.purgatory.purge.interval.requests = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tgroup.initial.rebalance.delay.ms = 3000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tgroup.max.session.timeout.ms = 1800000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tgroup.max.size = 2147483647\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tgroup.min.session.timeout.ms = 6000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tinitial.broker.registration.timeout.ms = 60000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tinter.broker.listener.name = LISTENER_DOCKER_INTERNAL\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tinter.broker.protocol.version = 3.0-IV1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tkafka.metrics.polling.interval.secs = 10\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tkafka.metrics.reporters = []\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tleader.imbalance.check.interval.seconds = 300\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tleader.imbalance.per.broker.percentage = 10\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlistener.security.protocol.map = LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlisteners = LISTENER_DOCKER_INTERNAL://0.0.0.0:19094,LISTENER_DOCKER_EXTERNAL://0.0.0.0:9094\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.backoff.ms = 15000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.dedupe.buffer.size = 134217728\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.delete.retention.ms = 86400000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.io.buffer.load.factor = 0.9\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.io.buffer.size = 524288\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.io.max.bytes.per.second = 1.7976931348623157E308\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.max.compaction.lag.ms = 9223372036854775807\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.min.cleanable.ratio = 0.5\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.min.compaction.lag.ms = 0\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.threads = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleanup.policy = [delete]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.dir = /tmp/kafka-logs\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.dirs = /var/lib/kafka/data\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.flush.interval.messages = 9223372036854775807\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.flush.interval.ms = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.flush.offset.checkpoint.interval.ms = 60000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.flush.scheduler.interval.ms = 9223372036854775807\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.flush.start.offset.checkpoint.interval.ms = 60000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.index.interval.bytes = 4096\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.index.size.max.bytes = 10485760\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.message.downconversion.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.message.format.version = 3.0-IV1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.message.timestamp.difference.max.ms = 9223372036854775807\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.message.timestamp.type = CreateTime\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.preallocate = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.retention.bytes = -1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.retention.check.interval.ms = 300000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.retention.hours = 168\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.retention.minutes = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.retention.ms = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.roll.hours = 168\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.roll.jitter.hours = 0\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.roll.jitter.ms = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.roll.ms = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.segment.bytes = 1073741824\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.segment.delete.delay.ms = 60000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmax.connection.creation.rate = 2147483647\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmax.connections = 2147483647\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmax.connections.per.ip = 2147483647\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmax.connections.per.ip.overrides = \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmax.incremental.fetch.session.cache.slots = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmessage.max.bytes = 1048588\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.log.dir = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.log.max.record.bytes.between.snapshots = 20971520\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.log.segment.bytes = 1073741824\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.log.segment.min.bytes = 8388608\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.log.segment.ms = 604800000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.max.retention.bytes = -1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.max.retention.ms = 604800000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetric.reporters = []\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetrics.num.samples = 2\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetrics.recording.level = INFO\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetrics.sample.window.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmin.insync.replicas = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnode.id = -1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnum.io.threads = 8\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnum.network.threads = 3\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnum.partitions = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnum.recovery.threads.per.data.dir = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnum.replica.alter.log.dirs.threads = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnum.replica.fetchers = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffset.metadata.max.bytes = 4096\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.commit.required.acks = -1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.commit.timeout.ms = 5000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.load.buffer.size = 5242880\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.retention.check.interval.ms = 600000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.retention.minutes = 10080\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.topic.compression.codec = 0\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.topic.num.partitions = 50\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.topic.replication.factor = 3\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.topic.segment.bytes = 104857600\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tpassword.encoder.cipher.algorithm = AES/CBC/PKCS5Padding\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tpassword.encoder.iterations = 4096\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tpassword.encoder.key.length = 128\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tpassword.encoder.keyfactory.algorithm = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tpassword.encoder.old.secret = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tpassword.encoder.secret = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tprincipal.builder.class = class org.apache.kafka.common.security.authenticator.DefaultKafkaPrincipalBuilder\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tprocess.roles = []\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tproducer.purgatory.purge.interval.requests = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tqueued.max.request.bytes = -1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tqueued.max.requests = 500\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tquota.window.num = 11\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tquota.window.size.seconds = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.index.file.cache.total.size.bytes = 1073741824\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.manager.task.interval.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.manager.task.retry.backoff.max.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.manager.task.retry.backoff.ms = 500\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.manager.task.retry.jitter = 0.2\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.manager.thread.pool.size = 10\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.metadata.manager.class.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.metadata.manager.class.path = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.metadata.manager.impl.prefix = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.metadata.manager.listener.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.reader.max.pending.tasks = 100\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.reader.threads = 10\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.storage.manager.class.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.storage.manager.class.path = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.storage.manager.impl.prefix = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.storage.system.enable = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.fetch.backoff.ms = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.fetch.max.bytes = 1048576\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.fetch.min.bytes = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.fetch.response.max.bytes = 10485760\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.fetch.wait.max.ms = 500\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.high.watermark.checkpoint.interval.ms = 5000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.lag.time.max.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.selector.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.socket.receive.buffer.bytes = 65536\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.socket.timeout.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplication.quota.window.num = 11\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplication.quota.window.size.seconds = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\trequest.timeout.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treserved.broker.max.id = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.client.callback.handler.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.enabled.mechanisms = [GSSAPI]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.jaas.config = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.kerberos.kinit.cmd = /usr/bin/kinit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.kerberos.min.time.before.relogin = 60000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.kerberos.principal.to.local.rules = [DEFAULT]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.kerberos.service.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.kerberos.ticket.renew.jitter = 0.05\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.kerberos.ticket.renew.window.factor = 0.8\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.login.callback.handler.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.login.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.login.refresh.buffer.seconds = 300\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.login.refresh.min.period.seconds = 60\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.login.refresh.window.factor = 0.8\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.login.refresh.window.jitter = 0.05\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.mechanism.controller.protocol = GSSAPI\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.mechanism.inter.broker.protocol = GSSAPI\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.server.callback.handler.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsecurity.inter.broker.protocol = PLAINTEXT\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsecurity.providers = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsocket.connection.setup.timeout.max.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsocket.connection.setup.timeout.ms = 10000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsocket.receive.buffer.bytes = 102400\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsocket.request.max.bytes = 104857600\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsocket.send.buffer.bytes = 102400\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.cipher.suites = []\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.client.auth = none\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.enabled.protocols = [TLSv1.2, TLSv1.3]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.endpoint.identification.algorithm = https\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.engine.factory.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.key.password = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.keymanager.algorithm = SunX509\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.keystore.certificate.chain = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.keystore.key = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.keystore.location = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.keystore.password = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.keystore.type = JKS\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.principal.mapping.rules = DEFAULT\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.protocol = TLSv1.3\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.provider = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.secure.random.implementation = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.trustmanager.algorithm = PKIX\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.truststore.certificates = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.truststore.location = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.truststore.password = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.truststore.type = JKS\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.abort.timed.out.transaction.cleanup.interval.ms = 10000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.max.timeout.ms = 900000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.remove.expired.transaction.cleanup.interval.ms = 3600000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.state.log.load.buffer.size = 5242880\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.state.log.min.isr = 2\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.state.log.num.partitions = 50\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.state.log.replication.factor = 3\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.state.log.segment.bytes = 104857600\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransactional.id.expiration.ms = 604800000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tunclean.leader.election.enable = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.clientCnxnSocket = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.connect = zoo1:2181\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.connection.timeout.ms = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.max.in.flight.requests = 10\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.session.timeout.ms = 18000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.set.acl = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.cipher.suites = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.client.enable = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.crl.enable = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.enabled.protocols = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.endpoint.identification.algorithm = HTTPS\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.keystore.location = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.keystore.password = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.keystore.type = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.ocsp.enable = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.protocol = TLSv1.2\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.truststore.location = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.truststore.password = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.truststore.type = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.sync.time.ms = 2000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":" (kafka.server.KafkaConfig)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:10,030] INFO [ThrottledChannelReaper-Fetch]: Starting (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:10,040] INFO [ThrottledChannelReaper-Produce]: Starting (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:10,041] INFO [ThrottledChannelReaper-Request]: Starting (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:10,048] INFO [ThrottledChannelReaper-ControllerMutation]: Starting (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:10,151] INFO Loading logs from log dirs ArraySeq(/var/lib/kafka/data) (kafka.log.LogManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:10,300] INFO Attempting recovery for all logs in /var/lib/kafka/data since no clean shutdown file was found (kafka.log.LogManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:10,358] INFO Loaded 0 logs in 207ms. (kafka.log.LogManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:10,362] INFO Starting log cleanup with a period of 300000 ms. (kafka.log.LogManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:10,402] INFO Starting log flusher with a default period of 9223372036854775807 ms. (kafka.log.LogManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:10,531] INFO Starting the log cleaner (kafka.log.LogCleaner)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:11,002] INFO [kafka-log-cleaner-thread-0]: Starting (kafka.log.LogCleaner)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:12,162] INFO [BrokerToControllerChannelManager broker=3 name=forwarding]: Starting (kafka.server.BrokerToControllerRequestThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:13,555] INFO Updated connection-accept-rate max connection creation rate to 2147483647 (kafka.network.ConnectionQuotas)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:13,581] INFO Awaiting socket connections on 0.0.0.0:19094. (kafka.network.Acceptor)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:13,763] INFO [SocketServer listenerType=ZK_BROKER, nodeId=3] Created data-plane acceptor and processors for endpoint : ListenerName(LISTENER_DOCKER_INTERNAL) (kafka.network.SocketServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:13,772] INFO Updated connection-accept-rate max connection creation rate to 2147483647 (kafka.network.ConnectionQuotas)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:13,772] INFO Awaiting socket connections on 0.0.0.0:9094. (kafka.network.Acceptor)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:13,856] INFO [SocketServer listenerType=ZK_BROKER, nodeId=3] Created data-plane acceptor and processors for endpoint : ListenerName(LISTENER_DOCKER_EXTERNAL) (kafka.network.SocketServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:13,916] INFO [BrokerToControllerChannelManager broker=3 name=alterIsr]: Starting (kafka.server.BrokerToControllerRequestThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:13,985] INFO [ExpirationReaper-3-Produce]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:13,992] INFO [ExpirationReaper-3-Fetch]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,005] INFO [ExpirationReaper-3-DeleteRecords]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,007] INFO [ExpirationReaper-3-ElectLeader]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,084] INFO [LogDirFailureHandler]: Starting (kafka.server.ReplicaManager$LogDirFailureHandler)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,169] INFO Creating /brokers/ids/3 (is it secure? false) (kafka.zk.KafkaZkClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,255] INFO Stat of the created znode at /brokers/ids/3 is: 73,73,1647594914226,1647594914226,1,0,0,72065144793399301,311,0,73\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":" (kafka.zk.KafkaZkClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,258] INFO Registered broker 3 at path /brokers/ids/3 with addresses: LISTENER_DOCKER_INTERNAL://kafka3:19094,LISTENER_DOCKER_EXTERNAL://127.0.0.1:9094, czxid (broker epoch): 73 (kafka.zk.KafkaZkClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,457] INFO [ControllerEventThread controllerId=3] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,489] INFO [ExpirationReaper-3-topic]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,518] INFO [ExpirationReaper-3-Heartbeat]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,539] INFO [ExpirationReaper-3-Rebalance]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,576] INFO Successfully created /controller_epoch with initial epoch 0 (kafka.zk.KafkaZkClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,637] INFO [Controller id=3] 3 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,643] INFO [GroupCoordinator 3]: Starting up. (kafka.coordinator.group.GroupCoordinator)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,676] INFO [GroupCoordinator 3]: Startup complete. (kafka.coordinator.group.GroupCoordinator)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,691] INFO [Controller id=3] Creating FeatureZNode at path: /feature with contents: FeatureZNode(Enabled,Features{}) (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,708] INFO Feature ZK node created at path: /feature (kafka.server.FinalizedFeatureChangeListener)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,808] INFO [TransactionCoordinator id=3] Starting up. (kafka.coordinator.transaction.TransactionCoordinator)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,820] INFO [TransactionCoordinator id=3] Startup complete. (kafka.coordinator.transaction.TransactionCoordinator)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,829] INFO Updated cache from existing <empty> to latest FinalizedFeaturesAndEpoch(features=Features{}, epoch=0). (kafka.server.FinalizedFeatureCache)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,830] INFO [Controller id=3] Registering handlers (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,852] INFO [Transaction Marker Channel Manager 3]: Starting (kafka.coordinator.transaction.TransactionMarkerChannelManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,870] INFO [Controller id=3] Deleting log dir event notifications (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,881] INFO [Controller id=3] Deleting isr change notifications (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,890] INFO [Controller id=3] Initializing controller context (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,947] INFO [ZooKeeperClient ACL authorizer] Initializing a new session to zoo1:2181. (kafka.zookeeper.ZooKeeperClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,948] INFO Initiating client connection, connectString=zoo1:2181 sessionTimeout=18000 watcher=kafka.zookeeper.ZooKeeperClient$ZooKeeperClientWatcher$@3b1ed14b (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,948] INFO jute.maxbuffer value is 4194304 Bytes (org.apache.zookeeper.ClientCnxnSocket)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,949] INFO zookeeper.request.timeout value is 0. feature enabled=false (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,964] INFO [ZooKeeperClient ACL authorizer] Waiting until connected. (kafka.zookeeper.ZooKeeperClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,965] INFO Opening socket connection to server zoo1/192.168.32.2:2181. (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,965] INFO SASL config status: Will not attempt to authenticate using SASL (unknown error) (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,966] INFO Socket connection established, initiating session, client: /192.168.32.5:44724, server: zoo1/192.168.32.2:2181 (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,973] INFO Session establishment complete on server zoo1/192.168.32.2:2181, session id = 0x10006de0c190006, negotiated timeout = 18000 (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,977] INFO [ZooKeeperClient ACL authorizer] Connected. (kafka.zookeeper.ZooKeeperClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,009] INFO [Controller id=3] Initialized broker epochs cache: HashMap(1 -> 75, 2 -> 74, 3 -> 73) (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,239] INFO [RequestSendThread controllerId=3] Starting (kafka.controller.RequestSendThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,241] INFO [RequestSendThread controllerId=3] Starting (kafka.controller.RequestSendThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,242] INFO [RequestSendThread controllerId=3] Starting (kafka.controller.RequestSendThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,256] INFO [Controller id=3] Currently active brokers in the cluster: Set(1, 2, 3) (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,259] INFO [Controller id=3] Currently shutting brokers in the cluster: HashSet() (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,260] INFO [Controller id=3] Current list of topics in the cluster: HashSet() (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,261] INFO [Controller id=3] Fetching topic deletions in progress (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,297] INFO [Controller id=3] List of topics to be deleted:  (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,300] INFO [Controller id=3] List of topics ineligible for deletion:  (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,306] INFO [Controller id=3] Initializing topic deletion manager (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,309] INFO [Topic Deletion Manager 3] Initializing manager with initial deletions: Set(), initial ineligible deletions: HashSet() (kafka.controller.TopicDeletionManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,320] INFO [Controller id=3] Sending update metadata request (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,358] INFO [Controller id=3 epoch=1] Sending UpdateMetadata request to brokers HashSet(1, 2, 3) for 0 partitions (state.change.logger)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,364] INFO [/kafka-acl-changes-event-process-thread]: Starting (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,367] INFO [/kafka-acl-extended-changes-event-process-thread]: Starting (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,413] INFO [ReplicaStateMachine controllerId=3] Initializing replica state (kafka.controller.ZkReplicaStateMachine)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,417] INFO [ReplicaStateMachine controllerId=3] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,475] INFO [ReplicaStateMachine controllerId=3] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,490] INFO [PartitionStateMachine controllerId=3] Initializing partition state (kafka.controller.ZkPartitionStateMachine)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,492] INFO [PartitionStateMachine controllerId=3] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,488] INFO [RequestSendThread controllerId=3] Controller 3 connected to kafka1:19092 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,494] INFO [RequestSendThread controllerId=3] Controller 3 connected to kafka2:19093 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,494] INFO [RequestSendThread controllerId=3] Controller 3 connected to kafka3:19094 (id: 3 rack: null) for sending state change requests (kafka.controller.RequestSendThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,534] INFO [Controller id=3] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,610] INFO [Controller id=3] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,614] INFO [Controller id=3] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,616] INFO [Controller id=3] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,617] INFO [Controller id=3] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,621] INFO [Controller id=3] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,711] INFO [Controller id=3] Starting the controller scheduler (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,811] INFO [ExpirationReaper-3-AlterAcls]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,912] INFO [/config/changes-event-process-thread]: Starting (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,978] INFO [SocketServer listenerType=ZK_BROKER, nodeId=3] Starting socket server acceptors and processors (kafka.network.SocketServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:16,017] INFO [SocketServer listenerType=ZK_BROKER, nodeId=3] Started data-plane acceptor and processor(s) for endpoint : ListenerName(LISTENER_DOCKER_INTERNAL) (kafka.network.SocketServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:16,040] INFO [SocketServer listenerType=ZK_BROKER, nodeId=3] Started data-plane acceptor and processor(s) for endpoint : ListenerName(LISTENER_DOCKER_EXTERNAL) (kafka.network.SocketServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:16,045] INFO [SocketServer listenerType=ZK_BROKER, nodeId=3] Started socket server acceptors and processors (kafka.network.SocketServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:16,111] INFO Kafka version: 7.0.1-ccs (org.apache.kafka.common.utils.AppInfoParser)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:16,114] INFO Kafka commitId: b7e52413e7cb3e8b (org.apache.kafka.common.utils.AppInfoParser)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:16,114] INFO Kafka startTimeMs: 1647594916045 (org.apache.kafka.common.utils.AppInfoParser)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:16,136] INFO [KafkaServer id=3] started (kafka.server.KafkaServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:16,378] INFO [BrokerToControllerChannelManager broker=3 name=alterIsr]: Recorded new controller, from now on will use broker kafka3:19094 (id: 3 rack: null) (kafka.server.BrokerToControllerRequestThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:16,381] INFO [BrokerToControllerChannelManager broker=3 name=forwarding]: Recorded new controller, from now on will use broker kafka3:19094 (id: 3 rack: null) (kafka.server.BrokerToControllerRequestThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:20,690] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:20:20,344] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:25:19,992] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:30:19,644] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:35:19,301] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:40:18,953] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:45:18,602] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:50:18,254] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:55:17,902] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 10:00:17,552] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 10:05:17,201] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 10:10:16,852] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 10:15:16,502] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 10:20:16,150] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 10:25:15,798] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 10:30:15,447] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 10:35:15,089] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 10:40:14,736] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 10:45:14,387] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 10:50:14,034] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 10:55:13,684] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 11:00:13,330] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 11:05:12,983] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 11:10:12,635] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 11:15:12,284] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 11:20:11,934] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 11:25:11,584] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 11:30:11,236] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 11:35:10,884] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 11:40:10,533] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 11:45:10,182] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 11:50:09,830] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 11:55:09,480] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:00:09,132] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:05:08,780] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:10:08,433] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:15:08,089] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:20:07,742] INFO [Controller id=3] Processing automatic preferred replica leader election (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:08,821] INFO Terminating process due to signal SIGTERM (org.apache.kafka.common.utils.LoggingSignalHandler)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:08,885] INFO [KafkaServer id=3] shutting down (kafka.server.KafkaServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:08,909] INFO [KafkaServer id=3] Starting controlled shutdown (kafka.server.KafkaServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,010] INFO [Controller id=3] Shutting down broker 3 (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,019] INFO [Controller id=3 epoch=1] Sending UpdateMetadata request to brokers HashSet() for 0 partitions (state.change.logger)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,038] INFO [Controller id=3] Shutting down broker 2 (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,039] INFO [Controller id=3 epoch=1] Sending UpdateMetadata request to brokers HashSet() for 0 partitions (state.change.logger)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,040] INFO [KafkaServer id=3] Controlled shutdown succeeded (kafka.server.KafkaServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,041] INFO [Controller id=3] Shutting down broker 1 (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,041] INFO [Controller id=3 epoch=1] Sending UpdateMetadata request to brokers HashSet() for 0 partitions (state.change.logger)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,091] INFO [/config/changes-event-process-thread]: Shutting down (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,094] INFO [/config/changes-event-process-thread]: Shutdown completed (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,094] INFO [/config/changes-event-process-thread]: Stopped (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,097] INFO [SocketServer listenerType=ZK_BROKER, nodeId=3] Stopping socket server request processors (kafka.network.SocketServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,179] INFO [SocketServer listenerType=ZK_BROKER, nodeId=3] Stopped socket server request processors (kafka.network.SocketServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,182] INFO [data-plane Kafka Request Handler on Broker 3], shutting down (kafka.server.KafkaRequestHandlerPool)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,198] INFO [data-plane Kafka Request Handler on Broker 3], shut down completely (kafka.server.KafkaRequestHandlerPool)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,211] INFO [ExpirationReaper-3-AlterAcls]: Shutting down (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,271] INFO [ExpirationReaper-3-AlterAcls]: Stopped (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,272] WARN Session 0x10006de0c190005 for sever zoo1/192.168.32.2:2181, Closing socket connection. Attempting reconnect except it is a SessionExpiredException. (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"EndOfStreamException: Unable to read additional data from server sessionid 0x10006de0c190005, likely server has closed socket\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxnSocketNIO.doIO(ClientCnxnSocketNIO.java:77)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:350)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1290)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,271] INFO [ExpirationReaper-3-AlterAcls]: Shutdown completed (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,282] WARN Session 0x10006de0c190006 for sever zoo1/192.168.32.2:2181, Closing socket connection. Attempting reconnect except it is a SessionExpiredException. (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"java.io.IOException: Connection reset by peer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/sun.nio.ch.FileDispatcherImpl.read0(Native Method)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/sun.nio.ch.SocketDispatcher.read(SocketDispatcher.java:39)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/sun.nio.ch.IOUtil.readIntoNativeBuffer(IOUtil.java:276)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/sun.nio.ch.IOUtil.read(IOUtil.java:233)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/sun.nio.ch.IOUtil.read(IOUtil.java:223)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:356)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxnSocketNIO.doIO(ClientCnxnSocketNIO.java:74)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:350)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1290)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,331] INFO [KafkaApi-3] Shutdown complete. (kafka.server.KafkaApis)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,343] INFO [/kafka-acl-changes-event-process-thread]: Shutting down (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,343] INFO [/kafka-acl-changes-event-process-thread]: Stopped (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,345] INFO [/kafka-acl-changes-event-process-thread]: Shutdown completed (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,346] INFO [/kafka-acl-extended-changes-event-process-thread]: Shutting down (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,360] INFO [/kafka-acl-extended-changes-event-process-thread]: Stopped (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,362] INFO [/kafka-acl-extended-changes-event-process-thread]: Shutdown completed (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,369] INFO [ZooKeeperClient ACL authorizer] Closing. (kafka.zookeeper.ZooKeeperClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,535] INFO EventThread shut down for session: 0x10006de0c190006 (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,535] INFO Session: 0x10006de0c190006 closed (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,537] INFO [ZooKeeperClient ACL authorizer] Closed. (kafka.zookeeper.ZooKeeperClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,538] INFO [ExpirationReaper-3-topic]: Shutting down (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,671] INFO [ExpirationReaper-3-topic]: Stopped (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,672] INFO [ExpirationReaper-3-topic]: Shutdown completed (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,679] INFO [TransactionCoordinator id=3] Shutting down. (kafka.coordinator.transaction.TransactionCoordinator)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,683] INFO [Transaction State Manager 3]: Shutdown complete (kafka.coordinator.transaction.TransactionStateManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,683] INFO [Transaction Marker Channel Manager 3]: Shutting down (kafka.coordinator.transaction.TransactionMarkerChannelManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,685] INFO [Transaction Marker Channel Manager 3]: Stopped (kafka.coordinator.transaction.TransactionMarkerChannelManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,685] INFO [Transaction Marker Channel Manager 3]: Shutdown completed (kafka.coordinator.transaction.TransactionMarkerChannelManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,690] INFO [TransactionCoordinator id=3] Shutdown complete. (kafka.coordinator.transaction.TransactionCoordinator)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,691] INFO [GroupCoordinator 3]: Shutting down. (kafka.coordinator.group.GroupCoordinator)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,693] INFO [ExpirationReaper-3-Heartbeat]: Shutting down (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,871] INFO [ExpirationReaper-3-Heartbeat]: Stopped (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,871] INFO [ExpirationReaper-3-Heartbeat]: Shutdown completed (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,873] INFO [ExpirationReaper-3-Rebalance]: Shutting down (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,071] INFO [ExpirationReaper-3-Rebalance]: Stopped (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,072] INFO [ExpirationReaper-3-Rebalance]: Shutdown completed (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,075] INFO [GroupCoordinator 3]: Shutdown complete. (kafka.coordinator.group.GroupCoordinator)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,080] INFO [ReplicaManager broker=3] Shutting down (kafka.server.ReplicaManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,081] INFO [LogDirFailureHandler]: Shutting down (kafka.server.ReplicaManager$LogDirFailureHandler)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,081] INFO [LogDirFailureHandler]: Shutdown completed (kafka.server.ReplicaManager$LogDirFailureHandler)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,085] INFO [ReplicaFetcherManager on broker 3] shutting down (kafka.server.ReplicaFetcherManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,081] INFO [LogDirFailureHandler]: Stopped (kafka.server.ReplicaManager$LogDirFailureHandler)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,092] INFO [ReplicaFetcherManager on broker 3] shutdown completed (kafka.server.ReplicaFetcherManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,094] INFO [ReplicaAlterLogDirsManager on broker 3] shutting down (kafka.server.ReplicaAlterLogDirsManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,095] INFO [ReplicaAlterLogDirsManager on broker 3] shutdown completed (kafka.server.ReplicaAlterLogDirsManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,095] INFO [ExpirationReaper-3-Fetch]: Shutting down (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,273] INFO [ExpirationReaper-3-Fetch]: Stopped (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,273] INFO [ExpirationReaper-3-Fetch]: Shutdown completed (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,274] INFO [ExpirationReaper-3-Produce]: Shutting down (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,471] INFO [ExpirationReaper-3-Produce]: Stopped (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,472] INFO [ExpirationReaper-3-Produce]: Shutdown completed (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,473] INFO [ExpirationReaper-3-DeleteRecords]: Shutting down (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,474] INFO [ExpirationReaper-3-DeleteRecords]: Stopped (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,474] INFO [ExpirationReaper-3-DeleteRecords]: Shutdown completed (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,475] INFO [ExpirationReaper-3-ElectLeader]: Shutting down (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,674] INFO [ExpirationReaper-3-ElectLeader]: Stopped (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,674] INFO [ExpirationReaper-3-ElectLeader]: Shutdown completed (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,683] ERROR Unable to resolve address: zoo1:2181 (org.apache.zookeeper.client.StaticHostProvider)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"java.net.UnknownHostException: zoo1: Name or service not known\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/java.net.Inet4AddressImpl.lookupAllHostAddr(Native Method)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/java.net.InetAddress$PlatformNameService.lookupAllHostAddr(InetAddress.java:929)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/java.net.InetAddress.getAddressesFromNameService(InetAddress.java:1519)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/java.net.InetAddress$NameServiceAddresses.get(InetAddress.java:848)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/java.net.InetAddress.getAllByName0(InetAddress.java:1509)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/java.net.InetAddress.getAllByName(InetAddress.java:1368)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/java.net.InetAddress.getAllByName(InetAddress.java:1302)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.client.StaticHostProvider$1.getAllByName(StaticHostProvider.java:88)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.client.StaticHostProvider.resolve(StaticHostProvider.java:141)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.client.StaticHostProvider.next(StaticHostProvider.java:368)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1207)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,692] INFO [ReplicaManager broker=3] Shut down completely (kafka.server.ReplicaManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,693] INFO [BrokerToControllerChannelManager broker=3 name=alterIsr]: Shutting down (kafka.server.BrokerToControllerRequestThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,694] INFO [BrokerToControllerChannelManager broker=3 name=alterIsr]: Stopped (kafka.server.BrokerToControllerRequestThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,694] INFO [BrokerToControllerChannelManager broker=3 name=alterIsr]: Shutdown completed (kafka.server.BrokerToControllerRequestThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,701] INFO Broker to controller channel manager for alterIsr shutdown (kafka.server.BrokerToControllerChannelManagerImpl)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,701] INFO [BrokerToControllerChannelManager broker=3 name=forwarding]: Shutting down (kafka.server.BrokerToControllerRequestThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,702] INFO [BrokerToControllerChannelManager broker=3 name=forwarding]: Stopped (kafka.server.BrokerToControllerRequestThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,703] INFO [BrokerToControllerChannelManager broker=3 name=forwarding]: Shutdown completed (kafka.server.BrokerToControllerRequestThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,704] INFO Broker to controller channel manager for forwarding shutdown (kafka.server.BrokerToControllerChannelManagerImpl)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,706] INFO Shutting down. (kafka.log.LogManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,709] INFO Shutting down the log cleaner. (kafka.log.LogCleaner)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,710] INFO [kafka-log-cleaner-thread-0]: Shutting down (kafka.log.LogCleaner)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,711] INFO [kafka-log-cleaner-thread-0]: Stopped (kafka.log.LogCleaner)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,711] INFO [kafka-log-cleaner-thread-0]: Shutdown completed (kafka.log.LogCleaner)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,732] INFO Shutdown complete. (kafka.log.LogManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,733] INFO [ControllerEventThread controllerId=3] Shutting down (kafka.controller.ControllerEventManager$ControllerEventThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,734] INFO [ControllerEventThread controllerId=3] Shutdown completed (kafka.controller.ControllerEventManager$ControllerEventThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,734] INFO [ControllerEventThread controllerId=3] Stopped (kafka.controller.ControllerEventManager$ControllerEventThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,744] INFO [PartitionStateMachine controllerId=3] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,746] INFO [ReplicaStateMachine controllerId=3] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,747] INFO [RequestSendThread controllerId=3] Shutting down (kafka.controller.RequestSendThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,748] INFO [RequestSendThread controllerId=3] Shutdown completed (kafka.controller.RequestSendThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,748] INFO [RequestSendThread controllerId=3] Stopped (kafka.controller.RequestSendThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,752] INFO [RequestSendThread controllerId=3] Shutting down (kafka.controller.RequestSendThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,752] INFO [RequestSendThread controllerId=3] Shutdown completed (kafka.controller.RequestSendThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,752] INFO [RequestSendThread controllerId=3] Stopped (kafka.controller.RequestSendThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,756] INFO [RequestSendThread controllerId=3] Shutting down (kafka.controller.RequestSendThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,756] INFO [RequestSendThread controllerId=3] Stopped (kafka.controller.RequestSendThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,756] INFO [RequestSendThread controllerId=3] Shutdown completed (kafka.controller.RequestSendThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,761] INFO [Controller id=3] Resigned (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,763] INFO [feature-zk-node-event-process-thread]: Shutting down (kafka.server.FinalizedFeatureChangeListener$ChangeNotificationProcessorThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,767] INFO [feature-zk-node-event-process-thread]: Stopped (kafka.server.FinalizedFeatureChangeListener$ChangeNotificationProcessorThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,768] INFO [feature-zk-node-event-process-thread]: Shutdown completed (kafka.server.FinalizedFeatureChangeListener$ChangeNotificationProcessorThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,769] INFO [ZooKeeperClient Kafka server] Closing. (kafka.zookeeper.ZooKeeperClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:11,263] WARN An exception was thrown while closing send thread for session 0x10006de0c190005. (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"java.lang.IllegalArgumentException: Unable to canonicalize address zoo1:2181 because it's not resolvable\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.SaslServerPrincipal.getServerPrincipal(SaslServerPrincipal.java:78)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.SaslServerPrincipal.getServerPrincipal(SaslServerPrincipal.java:41)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxn$SendThread.startConnect(ClientCnxn.java:1161)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1210)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:11,364] INFO Session: 0x10006de0c190005 closed (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:11,364] INFO EventThread shut down for session: 0x10006de0c190005 (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:11,364] INFO [ZooKeeperClient Kafka server] Closed. (kafka.zookeeper.ZooKeeperClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:11,367] INFO [ThrottledChannelReaper-Fetch]: Shutting down (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:11,387] INFO [ThrottledChannelReaper-Fetch]: Stopped (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:11,387] INFO [ThrottledChannelReaper-Fetch]: Shutdown completed (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:11,388] INFO [ThrottledChannelReaper-Produce]: Shutting down (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:12,387] INFO [ThrottledChannelReaper-Produce]: Stopped (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:12,387] INFO [ThrottledChannelReaper-Produce]: Shutdown completed (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:12,387] INFO [ThrottledChannelReaper-Request]: Shutting down (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:13,388] INFO [ThrottledChannelReaper-Request]: Stopped (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:13,388] INFO [ThrottledChannelReaper-Request]: Shutdown completed (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:13,388] INFO [ThrottledChannelReaper-ControllerMutation]: Shutting down (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:14,388] INFO [ThrottledChannelReaper-ControllerMutation]: Stopped (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:14,388] INFO [ThrottledChannelReaper-ControllerMutation]: Shutdown completed (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:14,391] INFO [SocketServer listenerType=ZK_BROKER, nodeId=3] Shutting down socket server (kafka.network.SocketServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:14,459] INFO [SocketServer listenerType=ZK_BROKER, nodeId=3] Shutdown completed (kafka.network.SocketServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:14,461] INFO Metrics scheduler closed (org.apache.kafka.common.metrics.Metrics)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:14,462] INFO Closing reporter org.apache.kafka.common.metrics.JmxReporter (org.apache.kafka.common.metrics.Metrics)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:14,467] INFO Metrics reporters closed (org.apache.kafka.common.metrics.Metrics)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:14,474] INFO Broker and topic stats closed (kafka.server.BrokerTopicStats)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:14,476] INFO App info kafka.server for 3 unregistered (org.apache.kafka.common.utils.AppInfoParser)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:14,477] INFO [KafkaServer id=3] shut down completed (kafka.server.KafkaServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The files belonging to this database system will be owned by user \"postgres\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"This user must also own the server process.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The database cluster will be initialized with locale \"en_US.utf8\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The default database encoding has accordingly been set to \"UTF8\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The default text search configuration will be set to \"english\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Data page checksums are disabled.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"fixing permissions on existing directory /var/lib/postgresql/data/pgdata ... ok\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"creating subdirectories ... ok\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"selecting dynamic shared memory implementation ... posix\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"selecting default max_connections ... 100\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"selecting default shared_buffers ... 128MB\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"selecting default time zone ... UTC\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"creating configuration files ... ok\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"running bootstrap script ... ok\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"sh: locale: not found\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:38.237 UTC [32] WARNING:  no usable system locales were found\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"performing post-bootstrap initialization ... ok\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"initdb: warning: enabling \"trust\" authentication for local connections\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"You can change this by editing pg_hba.conf or using the option -A, or\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"--auth-local and --auth-host, the next time you run initdb.\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"syncing data to disk ... ok\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Success. You can now start the database server using:\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"    pg_ctl -D /var/lib/postgresql/data/pgdata -l logfile start\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"waiting for server to start....2022-02-08 08:25:39.450 UTC [38] LOG:  starting PostgreSQL 12.9 on x86_64-pc-linux-musl, compiled by gcc (Alpine 10.3.1_git20211027) 10.3.1 20211027, 64-bit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:39.451 UTC [38] LOG:  listening on Unix socket \"/var/run/postgresql/.s.PGSQL.5432\"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:39.471 UTC [39] LOG:  database system was shut down at 2022-02-08 08:25:39 UTC\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:39.477 UTC [38] LOG:  database system is ready to accept connections\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":" done\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"server started\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"/usr/local/bin/docker-entrypoint.sh: ignoring /docker-entrypoint-initdb.d/*\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"waiting for server to shut down....2022-02-08 08:25:39.578 UTC [38] LOG:  received fast shutdown request\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:39.580 UTC [38] LOG:  aborting any active transactions\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:39.582 UTC [38] LOG:  background worker \"logical replication launcher\" (PID 45) exited with exit code 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:39.584 UTC [40] LOG:  shutting down\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:39.599 UTC [38] LOG:  database system is shut down\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":" done\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"server stopped\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"PostgreSQL init process complete; ready for start up.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:39.692 UTC [1] LOG:  starting PostgreSQL 12.9 on x86_64-pc-linux-musl, compiled by gcc (Alpine 10.3.1_git20211027) 10.3.1 20211027, 64-bit\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:39.692 UTC [1] LOG:  listening on IPv4 address \"0.0.0.0\", port 5432\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:39.692 UTC [1] LOG:  listening on IPv6 address \"::\", port 5432\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:39.695 UTC [1] LOG:  listening on Unix socket \"/var/run/postgresql/.s.PGSQL.5432\"\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:39.719 UTC [50] LOG:  database system was shut down at 2022-02-08 08:25:39 UTC\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:39.725 UTC [1] LOG:  database system is ready to accept connections\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 09:15:41.359 UTC [55] LOG:  stats_timestamp 2022-02-08 09:15:41.370777+00 is later than collector's time 2022-02-08 09:15:41.358997+00 for database 0\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-10 03:13:12.770 UTC [55] LOG:  stats_timestamp 2022-02-10 03:13:12.771038+00 is later than collector's time 2022-02-10 03:13:12.746191+00 for database 0\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-10 03:13:42.709 UTC [55] LOG:  stats_timestamp 2022-02-10 03:13:42.734642+00 is later than collector's time 2022-02-10 03:13:42.709453+00 for database 13457\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-11 01:55:56.613 UTC [55] LOG:  stats_timestamp 2022-02-11 01:55:56.623728+00 is later than collector's time 2022-02-11 01:55:56.598023+00 for database 0\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-11 06:29:38.964 UTC [55] LOG:  stats_timestamp 2022-02-11 06:29:38.989186+00 is later than collector's time 2022-02-11 06:29:38.9646+00 for database 0\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-12 03:48:29.026 UTC [55] LOG:  stats_timestamp 2022-02-12 03:48:29.050989+00 is later than collector's time 2022-02-12 03:48:29.025924+00 for database 13457\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-12 09:18:40.737 UTC [55] LOG:  stats_timestamp 2022-02-12 09:18:40.76427+00 is later than collector's time 2022-02-12 09:18:40.737007+00 for database 0\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"PostgreSQL Database directory appears to contain a database; Skipping initialization\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:29.010 UTC [1] LOG:  starting PostgreSQL 12.9 on x86_64-pc-linux-musl, compiled by gcc (Alpine 10.3.1_git20211027) 10.3.1 20211027, 64-bit\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:29.010 UTC [1] LOG:  listening on IPv4 address \"0.0.0.0\", port 5432\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:29.010 UTC [1] LOG:  listening on IPv6 address \"::\", port 5432\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:29.015 UTC [1] LOG:  listening on Unix socket \"/var/run/postgresql/.s.PGSQL.5432\"\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:29.043 UTC [21] LOG:  database system was interrupted; last known up at 2022-02-08 08:31:05 UTC\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:29.554 UTC [21] LOG:  database system was not properly shut down; automatic recovery in progress\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:29.559 UTC [21] LOG:  redo starts at 0/1722D80\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:29.559 UTC [21] LOG:  invalid record length at 0/1722E68: wanted 24, got 0\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:29.559 UTC [21] LOG:  redo done at 0/1722E30\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:29.587 UTC [1] LOG:  database system is ready to accept connections\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"PostgreSQL Database directory appears to contain a database; Skipping initialization\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:09.627 UTC [1] LOG:  starting PostgreSQL 12.9 on x86_64-pc-linux-musl, compiled by gcc (Alpine 10.3.1_git20211027) 10.3.1 20211027, 64-bit\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:09.627 UTC [1] LOG:  listening on IPv4 address \"0.0.0.0\", port 5432\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:09.627 UTC [1] LOG:  listening on IPv6 address \"::\", port 5432\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:09.632 UTC [1] LOG:  listening on Unix socket \"/var/run/postgresql/.s.PGSQL.5432\"\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:09.672 UTC [22] LOG:  database system was interrupted; last known up at 2022-03-11 06:19:29 UTC\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:10.161 UTC [22] LOG:  database system was not properly shut down; automatic recovery in progress\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:10.166 UTC [22] LOG:  redo starts at 0/1722EE0\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:10.167 UTC [22] LOG:  invalid record length at 0/1722F18: wanted 24, got 0\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:10.167 UTC [22] LOG:  redo done at 0/1722EE0\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:10.211 UTC [1] LOG:  database system is ready to accept connections\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"PostgreSQL Database directory appears to contain a database; Skipping initialization\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:44:46.810 UTC [1] LOG:  starting PostgreSQL 12.9 on x86_64-pc-linux-musl, compiled by gcc (Alpine 10.3.1_git20211027) 10.3.1 20211027, 64-bit\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:44:46.811 UTC [1] LOG:  listening on IPv4 address \"0.0.0.0\", port 5432\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:44:46.811 UTC [1] LOG:  listening on IPv6 address \"::\", port 5432\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:44:46.817 UTC [1] LOG:  listening on Unix socket \"/var/run/postgresql/.s.PGSQL.5432\"\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:44:46.852 UTC [22] LOG:  database system was interrupted; last known up at 2022-03-13 14:29:10 UTC\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:44:47.250 UTC [22] LOG:  database system was not properly shut down; automatic recovery in progress\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:44:47.254 UTC [22] LOG:  redo starts at 0/1722F90\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:44:47.254 UTC [22] LOG:  invalid record length at 0/1722FC8: wanted 24, got 0\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:44:47.254 UTC [22] LOG:  redo done at 0/1722F90\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:44:47.303 UTC [1] LOG:  database system is ready to accept connections\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 07:53:20.122 UTC [1] LOG:  received fast shutdown request\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 07:53:20.123 UTC [1] LOG:  aborting any active transactions\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 07:53:20.125 UTC [1] LOG:  background worker \"logical replication launcher\" (PID 28) exited with exit code 1\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 07:53:20.125 UTC [23] LOG:  shutting down\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 07:53:20.151 UTC [1] LOG:  database system is shut down\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The files belonging to this database system will be owned by user \"postgres\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"This user must also own the server process.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The database cluster will be initialized with locale \"en_US.utf8\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The default database encoding has accordingly been set to \"UTF8\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The default text search configuration will be set to \"english\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Data page checksums are disabled.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"fixing permissions on existing directory /var/lib/postgresql/data/pgdata ... ok\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"initdb: error: could not create directory \"/var/lib/postgresql/data/pgdata/pg_wal\": No space left on device\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"initdb: removing contents of data directory \"/var/lib/postgresql/data/pgdata\"\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The files belonging to this database system will be owned by user \"postgres\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"This user must also own the server process.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The database cluster will be initialized with locale \"en_US.utf8\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The default database encoding has accordingly been set to \"UTF8\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The default text search configuration will be set to \"english\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Data page checksums are disabled.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"fixing permissions on existing directory /var/lib/postgresql/data/pgdata ... ok\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"initdb: error: could not create directory \"/var/lib/postgresql/data/pgdata/pg_wal\": No space left on device\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"initdb: removing contents of data directory \"/var/lib/postgresql/data/pgdata\"\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The files belonging to this database system will be owned by user \"postgres\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"This user must also own the server process.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The database cluster will be initialized with locale \"en_US.utf8\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The default database encoding has accordingly been set to \"UTF8\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The default text search configuration will be set to \"english\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Data page checksums are disabled.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"fixing permissions on existing directory /var/lib/postgresql/data/pgdata ... ok\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"initdb: error: could not create directory \"/var/lib/postgresql/data/pgdata/pg_wal\": No space left on device\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"initdb: removing contents of data directory \"/var/lib/postgresql/data/pgdata\"\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The files belonging to this database system will be owned by user \"postgres\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"This user must also own the server process.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The database cluster will be initialized with locale \"en_US.utf8\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The default database encoding has accordingly been set to \"UTF8\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The default text search configuration will be set to \"english\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Data page checksums are disabled.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"fixing permissions on existing directory /var/lib/postgresql/data/pgdata ... ok\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"initdb: error: could not create directory \"/var/lib/postgresql/data/pgdata/pg_wal\": No space left on device\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"initdb: removing contents of data directory \"/var/lib/postgresql/data/pgdata\"\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The files belonging to this database system will be owned by user \"postgres\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"This user must also own the server process.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The database cluster will be initialized with locale \"en_US.utf8\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The default database encoding has accordingly been set to \"UTF8\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The default text search configuration will be set to \"english\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Data page checksums are disabled.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"fixing permissions on existing directory /var/lib/postgresql/data/pgdata ... ok\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"initdb: error: could not create directory \"/var/lib/postgresql/data/pgdata/pg_wal\": No space left on device\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"initdb: removing contents of data directory \"/var/lib/postgresql/data/pgdata\"\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The files belonging to this database system will be owned by user \"postgres\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"This user must also own the server process.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The database cluster will be initialized with locale \"en_US.utf8\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The default database encoding has accordingly been set to \"UTF8\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The default text search configuration will be set to \"english\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Data page checksums are disabled.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"fixing permissions on existing directory /var/lib/postgresql/data/pgdata ... ok\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"initdb: error: could not create directory \"/var/lib/postgresql/data/pgdata/pg_wal\": No space left on device\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"initdb: removing contents of data directory \"/var/lib/postgresql/data/pgdata\"\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The files belonging to this database system will be owned by user \"postgres\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"This user must also own the server process.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The database cluster will be initialized with locale \"en_US.utf8\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The default database encoding has accordingly been set to \"UTF8\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The default text search configuration will be set to \"english\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Data page checksums are disabled.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"fixing permissions on existing directory /var/lib/postgresql/data/pgdata ... ok\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"initdb: error: could not create directory \"/var/lib/postgresql/data/pgdata/pg_wal\": No space left on device\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"initdb: removing contents of data directory \"/var/lib/postgresql/data/pgdata\"\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The files belonging to this database system will be owned by user \"postgres\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"This user must also own the server process.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The database cluster will be initialized with locale \"en_US.utf8\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The default database encoding has accordingly been set to \"UTF8\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The default text search configuration will be set to \"english\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Data page checksums are disabled.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"fixing permissions on existing directory /var/lib/postgresql/data/pgdata ... ok\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"initdb: error: could not create directory \"/var/lib/postgresql/data/pgdata/pg_wal\": No space left on device\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"initdb: removing contents of data directory \"/var/lib/postgresql/data/pgdata\"\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The files belonging to this database system will be owned by user \"postgres\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"This user must also own the server process.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The database cluster will be initialized with locale \"en_US.utf8\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The default database encoding has accordingly been set to \"UTF8\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The default text search configuration will be set to \"english\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Data page checksums are disabled.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"fixing permissions on existing directory /var/lib/postgresql/data/pgdata ... ok\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"initdb: error: could not create directory \"/var/lib/postgresql/data/pgdata/pg_wal\": No space left on device\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"initdb: removing contents of data directory \"/var/lib/postgresql/data/pgdata\"\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The files belonging to this database system will be owned by user \"postgres\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"This user must also own the server process.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The database cluster will be initialized with locale \"en_US.utf8\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The default database encoding has accordingly been set to \"UTF8\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The default text search configuration will be set to \"english\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Data page checksums are disabled.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"fixing permissions on existing directory /var/lib/postgresql/data/pgdata ... ok\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"initdb: error: could not create directory \"/var/lib/postgresql/data/pgdata/pg_wal\": No space left on device\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"initdb: removing contents of data directory \"/var/lib/postgresql/data/pgdata\"\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The files belonging to this database system will be owned by user \"postgres\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"This user must also own the server process.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The database cluster will be initialized with locale \"en_US.utf8\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The default database encoding has accordingly been set to \"UTF8\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"The default text search configuration will be set to \"english\".\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Data page checksums are disabled.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"fixing permissions on existing directory /var/lib/postgresql/data/pgdata ... ok\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"creating subdirectories ... ok\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"selecting dynamic shared memory implementation ... posix\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"selecting default max_connections ... 100\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"selecting default shared_buffers ... 128MB\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"selecting default time zone ... UTC\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"creating configuration files ... ok\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"running bootstrap script ... ok\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"sh: locale: not found\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:25.414 UTC [30] WARNING:  no usable system locales were found\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"performing post-bootstrap initialization ... ok\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"initdb: warning: enabling \"trust\" authentication for local connections\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"You can change this by editing pg_hba.conf or using the option -A, or\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"--auth-local and --auth-host, the next time you run initdb.\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"syncing data to disk ... ok\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Success. You can now start the database server using:\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"    pg_ctl -D /var/lib/postgresql/data/pgdata -l logfile start\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"waiting for server to start....2022-02-13 04:27:26.843 UTC [36] LOG:  starting PostgreSQL 12.9 on x86_64-pc-linux-musl, compiled by gcc (Alpine 10.3.1_git20211027) 10.3.1 20211027, 64-bit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:26.845 UTC [36] LOG:  listening on Unix socket \"/var/run/postgresql/.s.PGSQL.5432\"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:26.862 UTC [37] LOG:  database system was shut down at 2022-02-13 04:27:26 UTC\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:26.866 UTC [36] LOG:  database system is ready to accept connections\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":" done\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"server started\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"/usr/local/bin/docker-entrypoint.sh: ignoring /docker-entrypoint-initdb.d/*\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:26.958 UTC [36] LOG:  received fast shutdown request\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"waiting for server to shut down....2022-02-13 04:27:26.960 UTC [36] LOG:  aborting any active transactions\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:26.961 UTC [36] LOG:  background worker \"logical replication launcher\" (PID 43) exited with exit code 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:26.962 UTC [38] LOG:  shutting down\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:26.996 UTC [36] LOG:  database system is shut down\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":" done\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"server stopped\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"PostgreSQL init process complete; ready for start up.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:27.074 UTC [1] LOG:  starting PostgreSQL 12.9 on x86_64-pc-linux-musl, compiled by gcc (Alpine 10.3.1_git20211027) 10.3.1 20211027, 64-bit\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:27.074 UTC [1] LOG:  listening on IPv4 address \"0.0.0.0\", port 5432\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:27.074 UTC [1] LOG:  listening on IPv6 address \"::\", port 5432\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:27.076 UTC [1] LOG:  listening on Unix socket \"/var/run/postgresql/.s.PGSQL.5432\"\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:27.088 UTC [48] LOG:  database system was shut down at 2022-02-13 04:27:26 UTC\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:27.092 UTC [1] LOG:  database system is ready to accept connections\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-14 05:34:18.084 UTC [53] LOG:  stats_timestamp 2022-02-14 05:34:18.108784+00 is later than collector's time 2022-02-14 05:34:18.083925+00 for database 0\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-14 09:09:44.542 UTC [53] LOG:  stats_timestamp 2022-02-14 09:09:44.567211+00 is later than collector's time 2022-02-14 09:09:44.542056+00 for database 13457\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-15 09:07:42.492 UTC [53] LOG:  stats_timestamp 2022-02-15 09:07:42.510644+00 is later than collector's time 2022-02-15 09:07:42.484777+00 for database 0\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-06 03:23:04.566 UTC [53] LOG:  stats_timestamp 2022-03-06 03:23:04.581919+00 is later than collector's time 2022-03-06 03:23:04.556756+00 for database 13457\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-06 08:16:29.134 UTC [53] LOG:  stats_timestamp 2022-03-06 08:16:29.159558+00 is later than collector's time 2022-03-06 08:16:29.134362+00 for database 13457\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-07 14:16:32.071 UTC [1] LOG:  received fast shutdown request\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-07 14:16:32.108 UTC [1] LOG:  aborting any active transactions\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-07 14:16:32.162 UTC [1] LOG:  background worker \"logical replication launcher\" (PID 54) exited with exit code 1\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-07 14:16:32.166 UTC [49] LOG:  shutting down\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-07 14:16:32.509 UTC [1] LOG:  database system is shut down\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"PostgreSQL Database directory appears to contain a database; Skipping initialization\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:41.587 UTC [1] LOG:  starting PostgreSQL 12.9 on x86_64-pc-linux-musl, compiled by gcc (Alpine 10.3.1_git20211027) 10.3.1 20211027, 64-bit\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:41.587 UTC [1] LOG:  listening on IPv4 address \"0.0.0.0\", port 5432\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:41.587 UTC [1] LOG:  listening on IPv6 address \"::\", port 5432\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:41.590 UTC [1] LOG:  listening on Unix socket \"/var/run/postgresql/.s.PGSQL.5432\"\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:41.617 UTC [23] LOG:  database system was shut down at 2022-03-07 14:16:32 UTC\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:41.630 UTC [1] LOG:  database system is ready to accept connections\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 15:37:14.021 UTC [1] LOG:  received fast shutdown request\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 15:37:14.022 UTC [1] LOG:  aborting any active transactions\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 15:37:14.025 UTC [1] LOG:  background worker \"logical replication launcher\" (PID 29) exited with exit code 1\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 15:37:14.027 UTC [24] LOG:  shutting down\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 15:37:14.039 UTC [1] LOG:  database system is shut down\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"PostgreSQL Database directory appears to contain a database; Skipping initialization\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:03:56.106 UTC [1] LOG:  starting PostgreSQL 12.9 on x86_64-pc-linux-musl, compiled by gcc (Alpine 10.3.1_git20211027) 10.3.1 20211027, 64-bit\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:03:56.107 UTC [1] LOG:  listening on IPv4 address \"0.0.0.0\", port 5432\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:03:56.107 UTC [1] LOG:  listening on IPv6 address \"::\", port 5432\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:03:56.111 UTC [1] LOG:  listening on Unix socket \"/var/run/postgresql/.s.PGSQL.5432\"\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:03:56.148 UTC [23] LOG:  database system was shut down at 2022-03-14 15:37:14 UTC\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:03:56.165 UTC [1] LOG:  database system is ready to accept connections\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 21:41:20.662 UTC [28] LOG:  stats_timestamp 2022-03-19 21:41:20.665754+00 is later than collector's time 2022-03-19 21:41:20.640867+00 for database 0\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-20 15:35:17.004 UTC [28] LOG:  stats_timestamp 2022-03-20 15:35:17.029658+00 is later than collector's time 2022-03-20 15:35:17.004475+00 for database 0\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-24 09:51:59.272 UTC [28] LOG:  stats_timestamp 2022-03-24 09:51:59.296923+00 is later than collector's time 2022-03-24 09:51:59.272314+00 for database 0\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-26 08:07:29.168 UTC [28] LOG:  stats_timestamp 2022-03-26 08:07:29.18455+00 is later than collector's time 2022-03-26 08:07:29.159794+00 for database 13457\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:15:57.910 UTC [1] LOG:  received fast shutdown request\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:15:57.942 UTC [1] LOG:  aborting any active transactions\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:15:57.993 UTC [1] LOG:  background worker \"logical replication launcher\" (PID 29) exited with exit code 1\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:15:58.009 UTC [24] LOG:  shutting down\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:15:58.307 UTC [1] LOG:  database system is shut down\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"SQL Server 2019 will run as non-root by default.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"This container is running as user mssql.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"To learn more visit https://go.microsoft.com/fwlink/?linkid=2099216.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-07 15:34:53.40 Server      Setup step is copying system data file 'C:\\templatedata\\master.mdf' to '/var/opt/mssql/data/master.mdf'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:53.48 Server      Did not find an existing master data file /var/opt/mssql/data/master.mdf, copying the missing default master and other system database files. If you have moved the database location, but not moved the database files, startup may fail. To repair: shutdown SQL Server, move the master database to configured location, and restart.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:53.49 Server      Setup step is copying system data file 'C:\\templatedata\\mastlog.ldf' to '/var/opt/mssql/data/mastlog.ldf'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:53.50 Server      Setup step is copying system data file 'C:\\templatedata\\model.mdf' to '/var/opt/mssql/data/model.mdf'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:53.51 Server      Setup step is copying system data file 'C:\\templatedata\\modellog.ldf' to '/var/opt/mssql/data/modellog.ldf'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:53.53 Server      Setup step is copying system data file 'C:\\templatedata\\msdbdata.mdf' to '/var/opt/mssql/data/msdbdata.mdf'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:53.98 Server      Setup step is copying system data file 'C:\\templatedata\\msdblog.ldf' to '/var/opt/mssql/data/msdblog.ldf'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:53.99 Server      Setup step is FORCE copying system data file 'C:\\templatedata\\model_replicatedmaster.mdf' to '/var/opt/mssql/data/model_replicatedmaster.mdf'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:54.00 Server      Setup step is FORCE copying system data file 'C:\\templatedata\\model_replicatedmaster.ldf' to '/var/opt/mssql/data/model_replicatedmaster.ldf'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:54.01 Server      Setup step is FORCE copying system data file 'C:\\templatedata\\model_msdbdata.mdf' to '/var/opt/mssql/data/model_msdbdata.mdf'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:54.04 Server      Setup step is FORCE copying system data file 'C:\\templatedata\\model_msdblog.ldf' to '/var/opt/mssql/data/model_msdblog.ldf'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:54.10 Server      Microsoft SQL Server 2019 (RTM-CU15) (KB5008996) - 15.0.4198.2 (X64) \r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r\tJan 12 2022 22:30:08 \r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r\tCopyright (C) 2019 Microsoft Corporation\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r\tDeveloper Edition (64-bit) on Linux (Ubuntu 20.04.3 LTS) <X64>\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:54.11 Server      UTC adjustment: 0:00\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:54.11 Server      (c) Microsoft Corporation.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:54.11 Server      All rights reserved.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:54.11 Server      Server process ID is 336.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:54.11 Server      Logging SQL Server messages in file '/var/opt/mssql/log/errorlog'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:54.12 Server      Registry startup parameters: \r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r\t -d /var/opt/mssql/data/master.mdf\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r\t -l /var/opt/mssql/data/mastlog.ldf\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r\t -e /var/opt/mssql/log/errorlog\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:54.12 Server      SQL Server detected 4 sockets with 1 cores per socket and 1 logical processors per socket, 4 total logical processors; using 4 logical processors based on SQL Server licensing. This is an informational message; no user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:54.13 Server      SQL Server is starting at normal priority base (=7). This is an informational message only. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:54.14 Server      Detected 1588 MB of RAM. This is an informational message; no user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:54.14 Server      Using conventional memory in the memory manager.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:54.14 Server      Page exclusion bitmap is enabled.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:54.17 Server      Buffer pool extension is not supported on Linux platform.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:54.17 Server      Buffer Pool: Allocating 262144 bytes for 180152 hashPages.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:54.35 Server      Buffer pool extension is already disabled. No action is necessary.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:54.70 Server      Successfully initialized the TLS configuration. Allowed TLS protocol versions are ['1.0 1.1 1.2']. Allowed TLS ciphers are ['ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:!DHE-RSA-AES256-GCM-SHA384:!DHE-RSA-AES128-GCM-SHA256:!DHE-RSA-AES256-SHA:!DHE-RSA-AES128-SHA'].\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:54.74 Server      Query Store settings initialized with enabled = 1, \r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:54.77 Server      The maximum number of dedicated administrator connections for this instance is '1'\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:54.77 Server      Node configuration: node 0: CPU mask: 0x000000000000000f:0 Active CPU mask: 0x000000000000000f:0. This message provides a description of the NUMA configuration for this computer. This is an informational message only. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:54.79 Server      Using dynamic lock allocation.  Initial allocation of 2500 Lock blocks and 5000 Lock Owner blocks per node.  This is an informational message only.  No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:54.86 Server      In-Memory OLTP initialized on lowend machine.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:54.89 Server      [INFO] Created Extended Events session 'hkenginexesession'\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:54.90 Server      Database Instant File Initialization: enabled. For security and performance considerations see the topic 'Database Instant File Initialization' in SQL Server Books Online. This is an informational message only. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\rForceFlush is enabled for this instance. \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:54.92 Server      Total Log Writer threads: 2. This is an informational message; no user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:54.98 Server      clflush is selected for pmem flush operation.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:54.99 Server      Software Usage Metrics is disabled.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:55.05 spid9s      [1]. Feature Status: PVS: 0. CTR: 0. ConcurrentPFSUpdate: 1.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:55.06 spid9s      Starting up database 'master'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:55.18 Server      CLR version v4.0.30319 loaded.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\rForceFlush feature is enabled for log durability.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:55.42 spid9s      Converting database 'master' from version 897 to the current version 904.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:55.43 spid9s      Database 'master' running the upgrade step from version 897 to version 898.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:55.44 spid9s      Database 'master' running the upgrade step from version 898 to version 899.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:55.49 spid9s      Database 'master' running the upgrade step from version 899 to version 900.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:55.52 spid9s      Database 'master' running the upgrade step from version 900 to version 901.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:55.54 spid9s      Database 'master' running the upgrade step from version 901 to version 902.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:55.55 spid9s      Database 'master' running the upgrade step from version 902 to version 903.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:55.56 spid9s      Database 'master' running the upgrade step from version 903 to version 904.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:55.79 Server      Common language runtime (CLR) functionality initialized.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:55.93 spid9s      Resource governor reconfiguration succeeded.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:55.93 spid9s      SQL Server Audit is starting the audits. This is an informational message. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:55.99 spid9s      SQL Server Audit has started the audits. This is an informational message. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.08 spid9s      SQL Trace ID 1 was started by login \"sa\".\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.09 spid9s      Server name is '4c7b37e2dff4'. This is an informational message only. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.10 spid25s     Password policy update was successful.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.23 spid12s     [32767]. Feature Status: PVS: 0. CTR: 0. ConcurrentPFSUpdate: 1.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.23 spid28s     Always On: The availability replica manager is starting. This is an informational message only. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.24 spid12s     Starting up database 'mssqlsystemresource'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.27 spid9s      [4]. Feature Status: PVS: 0. CTR: 0. ConcurrentPFSUpdate: 1.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.27 spid28s     Always On: The availability replica manager is waiting for the instance of SQL Server to allow client connections. This is an informational message only. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.28 spid9s      Starting up database 'msdb'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.29 spid12s     The resource database build version is 15.00.4198. This is an informational message only. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.36 spid12s     [3]. Feature Status: PVS: 0. CTR: 0. ConcurrentPFSUpdate: 1.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.37 spid12s     Starting up database 'model'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.41 spid9s      The tail of the log for database msdb is being rewritten to match the new sector size of 4096 bytes.  3072 bytes at offset 50176 in file /var/opt/mssql/data/MSDBLog.ldf will be written.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.44 spid25s     A self-generated certificate was successfully loaded for encryption.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.47 spid25s     Server is listening on [ 'any' <ipv6> 1433].\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.47 spid25s     Server is listening on [ 'any' <ipv4> 1433].\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.48 Server      Server is listening on [ ::1 <ipv6> 1434].\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.49 Server      Server is listening on [ 127.0.0.1 <ipv4> 1434].\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.50 Server      Dedicated admin connection support was established for listening locally on port 1434.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.53 spid25s     Server is listening on [ ::1 <ipv6> 1431].\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.54 spid9s      Converting database 'msdb' from version 897 to the current version 904.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.54 spid25s     Server is listening on [ 127.0.0.1 <ipv4> 1431].\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.54 spid12s     The tail of the log for database model is being rewritten to match the new sector size of 4096 bytes.  512 bytes at offset 73216 in file /var/opt/mssql/data/modellog.ldf will be written.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.55 spid9s      Database 'msdb' running the upgrade step from version 897 to version 898.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.57 spid25s     SQL Server is now ready for client connections. This is an informational message; no user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.63 spid9s      Database 'msdb' running the upgrade step from version 898 to version 899.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.65 spid12s     Converting database 'model' from version 897 to the current version 904.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.66 spid12s     Database 'model' running the upgrade step from version 897 to version 898.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.68 spid12s     Database 'model' running the upgrade step from version 898 to version 899.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.69 spid9s      Database 'msdb' running the upgrade step from version 899 to version 900.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.72 spid12s     Database 'model' running the upgrade step from version 899 to version 900.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.74 spid9s      Database 'msdb' running the upgrade step from version 900 to version 901.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.76 spid12s     Database 'model' running the upgrade step from version 900 to version 901.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.76 spid9s      Database 'msdb' running the upgrade step from version 901 to version 902.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.78 spid12s     Database 'model' running the upgrade step from version 901 to version 902.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.80 spid12s     Database 'model' running the upgrade step from version 902 to version 903.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.81 spid12s     Database 'model' running the upgrade step from version 903 to version 904.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:56.93 spid12s     Clearing tempdb database.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:57.17 spid12s     [2]. Feature Status: PVS: 0. CTR: 0. ConcurrentPFSUpdate: 1.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:57.18 spid12s     Starting up database 'tempdb'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:57.32 spid12s     The tempdb database has 1 data file(s).\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:57.36 spid30s     The Service Broker endpoint is in disabled or stopped state.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:57.37 spid30s     The Database Mirroring endpoint is in disabled or stopped state.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:57.38 spid30s     Service Broker manager has started.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:57.39 spid9s      Database 'msdb' running the upgrade step from version 902 to version 903.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:57.40 spid9s      Database 'msdb' running the upgrade step from version 903 to version 904.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:57.54 spid9s      Recovery is complete. This is an informational message only. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:57.56 spid28s     The default language (LCID 0) has been set for engine and full-text services.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:34:57.73 spid28s     The tempdb database has 4 data file(s).\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:35:00.70 spid51      Attempting to load library 'xplog70.dll' into memory. This is an informational message only. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:35:00.74 spid51      Using 'xplog70.dll' version '2019.150.4198' to execute extended stored procedure 'xp_msver'. This is an informational message only; no user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:35:21.89 spid9s      Always On: The availability replica manager is going offline because SQL Server is shutting down. This is an informational message only. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:35:21.89 spid9s      SQL Server is terminating in response to a 'stop' request from Service Control Manager. This is an informational message only. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:35:22.92 spid30s     Service Broker manager has shut down.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:35:22.93 spid9s      .NET Framework runtime has been stopped.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:35:23.03 spid9s      SQL Trace was stopped due to server shutdown. Trace ID = '1'. This is an informational message only; no user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"===> User\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"uid=1000(appuser) gid=1000(appuser) groups=1000(appuser)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"===> Configuring ...\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"===> Running preflight checks ... \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"===> Check if /var/lib/kafka/data is writable ...\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"===> Check if Zookeeper is healthy ...\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"SLF4J: Class path contains multiple SLF4J bindings.\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"SLF4J: Found binding in [jar:file:/usr/share/java/cp-base-new/slf4j-simple-1.7.30.jar!/org/slf4j/impl/StaticLoggerBinder.class]\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"SLF4J: Found binding in [jar:file:/usr/share/java/cp-base-new/slf4j-log4j12-1.7.30.jar!/org/slf4j/impl/StaticLoggerBinder.class]\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"SLF4J: Actual binding is of type [org.slf4j.impl.SimpleLoggerFactory]\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:zookeeper.version=3.6.3--6401e4ad2087061bc6b9f80dec2d69f2e3c8660a, built on 04/08/2021 16:35 GMT\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:host.name=kafka1\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:java.version=11.0.13\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:java.vendor=Azul Systems, Inc.\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:java.home=/usr/lib/jvm/zulu11-ca\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:java.class.path=/usr/share/java/cp-base-new/kafka-server-common-7.0.1-ccs.jar:/usr/share/java/cp-base-new/jackson-databind-2.12.3.jar:/usr/share/java/cp-base-new/common-utils-7.0.1.jar:/usr/share/java/cp-base-new/slf4j-api-1.7.30.jar:/usr/share/java/cp-base-new/slf4j-simple-1.7.30.jar:/usr/share/java/cp-base-new/snappy-java-1.1.8.1.jar:/usr/share/java/cp-base-new/zookeeper-jute-3.6.3.jar:/usr/share/java/cp-base-new/slf4j-log4j12-1.7.30.jar:/usr/share/java/cp-base-new/gson-2.8.6.jar:/usr/share/java/cp-base-new/audience-annotations-0.5.0.jar:/usr/share/java/cp-base-new/kafka_2.13-7.0.1-ccs.jar:/usr/share/java/cp-base-new/kafka-storage-api-7.0.1-ccs.jar:/usr/share/java/cp-base-new/scala-logging_2.13-3.9.3.jar:/usr/share/java/cp-base-new/kafka-storage-7.0.1-ccs.jar:/usr/share/java/cp-base-new/paranamer-2.8.jar:/usr/share/java/cp-base-new/jackson-dataformat-yaml-2.12.3.jar:/usr/share/java/cp-base-new/snakeyaml-1.27.jar:/usr/share/java/cp-base-new/lz4-java-1.7.1.jar:/usr/share/java/cp-base-new/disk-usage-agent-7.0.1.jar:/usr/share/java/cp-base-new/confluent-log4j-1.2.17-cp2.jar:/usr/share/java/cp-base-new/jmx_prometheus_javaagent-0.14.0.jar:/usr/share/java/cp-base-new/jackson-module-scala_2.13-2.12.3.jar:/usr/share/java/cp-base-new/jackson-annotations-2.12.3.jar:/usr/share/java/cp-base-new/metrics-core-4.1.12.1.jar:/usr/share/java/cp-base-new/scala-java8-compat_2.13-1.0.0.jar:/usr/share/java/cp-base-new/jackson-datatype-jdk8-2.12.3.jar:/usr/share/java/cp-base-new/kafka-raft-7.0.1-ccs.jar:/usr/share/java/cp-base-new/jolokia-jvm-1.6.2-agent.jar:/usr/share/java/cp-base-new/jackson-dataformat-csv-2.12.3.jar:/usr/share/java/cp-base-new/jackson-core-2.12.3.jar:/usr/share/java/cp-base-new/argparse4j-0.7.0.jar:/usr/share/java/cp-base-new/jolokia-core-1.6.2.jar:/usr/share/java/cp-base-new/zookeeper-3.6.3.jar:/usr/share/java/cp-base-new/commons-cli-1.4.jar:/usr/share/java/cp-base-new/zstd-jni-1.5.0-2.jar:/usr/share/java/cp-base-new/utility-belt-7.0.1.jar:/usr/share/java/cp-base-new/scala-library-2.13.5.jar:/usr/share/java/cp-base-new/json-simple-1.1.1.jar:/usr/share/java/cp-base-new/kafka-clients-7.0.1-ccs.jar:/usr/share/java/cp-base-new/jopt-simple-5.0.4.jar:/usr/share/java/cp-base-new/kafka-metadata-7.0.1-ccs.jar:/usr/share/java/cp-base-new/scala-reflect-2.13.5.jar:/usr/share/java/cp-base-new/metrics-core-2.2.0.jar:/usr/share/java/cp-base-new/scala-collection-compat_2.13-2.4.4.jar\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:java.library.path=/usr/java/packages/lib:/usr/lib64:/lib64:/lib:/usr/lib\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:java.io.tmpdir=/tmp\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:java.compiler=<NA>\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:os.name=Linux\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:os.arch=amd64\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:os.version=5.10.76-linuxkit\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:user.name=appuser\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:user.home=/home/appuser\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:user.dir=/home/appuser\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:os.memory.free=26MB\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:os.memory.max=498MB\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:os.memory.total=32MB\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Initiating client connection, connectString=zoo1:2181 sessionTimeout=40000 watcher=io.confluent.admin.utils.ZookeeperConnectionWatcher@68bbe345\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.common.X509Util - Setting -D jdk.tls.rejectClientInitiatedRenegotiation=true to disable client-initiated TLS renegotiation\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ClientCnxnSocket - jute.maxbuffer value is 1048575 Bytes\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ClientCnxn - zookeeper.request.timeout value is 0. feature enabled=false\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main-SendThread(zoo1:2181)] INFO org.apache.zookeeper.ClientCnxn - Opening socket connection to server zoo1/192.168.32.2:2181.\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main-SendThread(zoo1:2181)] INFO org.apache.zookeeper.ClientCnxn - SASL config status: Will not attempt to authenticate using SASL (unknown error)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main-SendThread(zoo1:2181)] WARN org.apache.zookeeper.ClientCnxn - Session 0x0 for sever zoo1/192.168.32.2:2181, Closing socket connection. Attempting reconnect except it is a SessionExpiredException.\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"java.net.ConnectException: Connection refused\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:777)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:344)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1290)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main-SendThread(zoo1:2181)] INFO org.apache.zookeeper.ClientCnxn - Opening socket connection to server zoo1/192.168.32.2:2181.\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main-SendThread(zoo1:2181)] INFO org.apache.zookeeper.ClientCnxn - SASL config status: Will not attempt to authenticate using SASL (unknown error)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main-SendThread(zoo1:2181)] WARN org.apache.zookeeper.ClientCnxn - Session 0x0 for sever zoo1/192.168.32.2:2181, Closing socket connection. Attempting reconnect except it is a SessionExpiredException.\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"java.net.ConnectException: Connection refused\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:777)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:344)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1290)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main-SendThread(zoo1:2181)] INFO org.apache.zookeeper.ClientCnxn - Opening socket connection to server zoo1/192.168.32.2:2181.\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main-SendThread(zoo1:2181)] INFO org.apache.zookeeper.ClientCnxn - SASL config status: Will not attempt to authenticate using SASL (unknown error)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main-SendThread(zoo1:2181)] INFO org.apache.zookeeper.ClientCnxn - Socket connection established, initiating session, client: /192.168.32.4:54794, server: zoo1/192.168.32.2:2181\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main-SendThread(zoo1:2181)] INFO org.apache.zookeeper.ClientCnxn - Session establishment complete on server zoo1/192.168.32.2:2181, session id = 0x10006de0c190001, negotiated timeout = 40000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main-SendThread(zoo1:2181)] WARN org.apache.zookeeper.ClientCnxn - An exception was thrown while closing send thread for session 0x10006de0c190001.\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"EndOfStreamException: Unable to read additional data from server sessionid 0x10006de0c190001, likely server has closed socket\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxnSocketNIO.doIO(ClientCnxnSocketNIO.java:77)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:350)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1290)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main-EventThread] INFO org.apache.zookeeper.ClientCnxn - EventThread shut down for session: 0x10006de0c190001\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Session: 0x10006de0c190001 closed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"===> Launching ... \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"===> Launching kafka ... \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:05,968] INFO Registered kafka:type=kafka.Log4jController MBean (kafka.utils.Log4jControllerRegistration$)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:07,593] INFO Setting -D jdk.tls.rejectClientInitiatedRenegotiation=true to disable client-initiated TLS renegotiation (org.apache.zookeeper.common.X509Util)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,006] INFO Registered signal handlers for TERM, INT, HUP (org.apache.kafka.common.utils.LoggingSignalHandler)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,019] INFO starting (kafka.server.KafkaServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,020] INFO Connecting to zookeeper on zoo1:2181 (kafka.server.KafkaServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,074] INFO [ZooKeeperClient Kafka server] Initializing a new session to zoo1:2181. (kafka.zookeeper.ZooKeeperClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,093] INFO Client environment:zookeeper.version=3.6.3--6401e4ad2087061bc6b9f80dec2d69f2e3c8660a, built on 04/08/2021 16:35 GMT (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,093] INFO Client environment:host.name=kafka1 (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,093] INFO Client environment:java.version=11.0.13 (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,093] INFO Client environment:java.vendor=Azul Systems, Inc. (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,094] INFO Client environment:java.home=/usr/lib/jvm/zulu11-ca (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,094] INFO Client environment:java.class.path=/usr/bin/../share/java/kafka/jetty-server-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/rocksdbjni-6.19.3.jar:/usr/bin/../share/java/kafka/connect-mirror-client-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/kafka-server-common-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/jersey-server-2.34.jar:/usr/bin/../share/java/kafka/hk2-locator-2.6.1.jar:/usr/bin/../share/java/kafka/jackson-databind-2.12.3.jar:/usr/bin/../share/java/kafka/maven-artifact-3.8.1.jar:/usr/bin/../share/java/kafka/scala-reflect-2.13.6.jar:/usr/bin/../share/java/kafka/slf4j-api-1.7.30.jar:/usr/bin/../share/java/kafka/kafka-shell-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/jetty-continuation-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/connect-basic-auth-extension-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/connect-api-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/netty-transport-4.1.68.Final.jar:/usr/bin/../share/java/kafka/snappy-java-1.1.8.1.jar:/usr/bin/../share/java/kafka/jetty-http-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/zookeeper-jute-3.6.3.jar:/usr/bin/../share/java/kafka/netty-common-4.1.68.Final.jar:/usr/bin/../share/java/kafka/jakarta.activation-api-1.2.1.jar:/usr/bin/../share/java/kafka/slf4j-log4j12-1.7.30.jar:/usr/bin/../share/java/kafka/connect-mirror-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/netty-buffer-4.1.68.Final.jar:/usr/bin/../share/java/kafka/kafka-tools-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/osgi-resource-locator-1.0.3.jar:/usr/bin/../share/java/kafka/audience-annotations-0.5.0.jar:/usr/bin/../share/java/kafka/jersey-container-servlet-2.34.jar:/usr/bin/../share/java/kafka/jackson-jaxrs-json-provider-2.12.3.jar:/usr/bin/../share/java/kafka/jakarta.ws.rs-api-2.1.6.jar:/usr/bin/../share/java/kafka/kafka_2.13-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/javassist-3.27.0-GA.jar:/usr/bin/../share/java/kafka/kafka-storage-api-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/jetty-servlet-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/jersey-client-2.34.jar:/usr/bin/../share/java/kafka/hk2-utils-2.6.1.jar:/usr/bin/../share/java/kafka/jackson-jaxrs-base-2.12.3.jar:/usr/bin/../share/java/kafka/reflections-0.9.12.jar:/usr/bin/../share/java/kafka/kafka-streams-examples-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/jaxb-api-2.3.0.jar:/usr/bin/../share/java/kafka/jetty-util-ajax-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/netty-transport-native-epoll-4.1.68.Final.jar:/usr/bin/../share/java/kafka/scala-logging_2.13-3.9.3.jar:/usr/bin/../share/java/kafka/kafka-storage-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/javax.ws.rs-api-2.1.1.jar:/usr/bin/../share/java/kafka/paranamer-2.8.jar:/usr/bin/../share/java/kafka/jersey-container-servlet-core-2.34.jar:/usr/bin/../share/java/kafka/jetty-security-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/kafka-streams-scala_2.13-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/jetty-util-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/lz4-java-1.7.1.jar:/usr/bin/../share/java/kafka/confluent-log4j-1.2.17-cp2.jar:/usr/bin/../share/java/kafka/kafka.jar:/usr/bin/../share/java/kafka/jakarta.annotation-api-1.3.5.jar:/usr/bin/../share/java/kafka/jersey-common-2.34.jar:/usr/bin/../share/java/kafka/jakarta.inject-2.6.1.jar:/usr/bin/../share/java/kafka/jackson-module-scala_2.13-2.12.3.jar:/usr/bin/../share/java/kafka/connect-json-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/jackson-annotations-2.12.3.jar:/usr/bin/../share/java/kafka/metrics-core-4.1.12.1.jar:/usr/bin/../share/java/kafka/scala-java8-compat_2.13-1.0.0.jar:/usr/bin/../share/java/kafka/javax.servlet-api-3.1.0.jar:/usr/bin/../share/java/kafka/jackson-datatype-jdk8-2.12.3.jar:/usr/bin/../share/java/kafka/trogdor-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/connect-runtime-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/jakarta.xml.bind-api-2.3.2.jar:/usr/bin/../share/java/kafka/jakarta.validation-api-2.0.2.jar:/usr/bin/../share/java/kafka/netty-transport-native-unix-common-4.1.68.Final.jar:/usr/bin/../share/java/kafka/kafka-streams-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/kafka-raft-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/scala-library-2.13.6.jar:/usr/bin/../share/java/kafka/jetty-servlets-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/netty-handler-4.1.68.Final.jar:/usr/bin/../share/java/kafka/plexus-utils-3.2.1.jar:/usr/bin/../share/java/kafka/kafka-log4j-appender-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/jackson-dataformat-csv-2.12.3.jar:/usr/bin/../share/java/kafka/jackson-core-2.12.3.jar:/usr/bin/../share/java/kafka/hk2-api-2.6.1.jar:/usr/bin/../share/java/kafka/argparse4j-0.7.0.jar:/usr/bin/../share/java/kafka/zookeeper-3.6.3.jar:/usr/bin/../share/java/kafka/commons-cli-1.4.jar:/usr/bin/../share/java/kafka/netty-codec-4.1.68.Final.jar:/usr/bin/../share/java/kafka/jetty-client-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/jackson-module-jaxb-annotations-2.12.3.jar:/usr/bin/../share/java/kafka/zstd-jni-1.5.0-2.jar:/usr/bin/../share/java/kafka/jersey-hk2-2.34.jar:/usr/bin/../share/java/kafka/jline-3.12.1.jar:/usr/bin/../share/java/kafka/kafka-streams-test-utils-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/connect-transforms-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/kafka-clients-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/jopt-simple-5.0.4.jar:/usr/bin/../share/java/kafka/jetty-io-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/kafka-metadata-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/activation-1.1.1.jar:/usr/bin/../share/java/kafka/commons-lang3-3.8.1.jar:/usr/bin/../share/java/kafka/aopalliance-repackaged-2.6.1.jar:/usr/bin/../share/java/kafka/metrics-core-2.2.0.jar:/usr/bin/../share/java/kafka/scala-collection-compat_2.13-2.4.4.jar:/usr/bin/../share/java/kafka/netty-resolver-4.1.68.Final.jar:/usr/bin/../share/java/confluent-telemetry/* (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,094] INFO Client environment:java.library.path=/usr/java/packages/lib:/usr/lib64:/lib64:/lib:/usr/lib (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,094] INFO Client environment:java.io.tmpdir=/tmp (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,094] INFO Client environment:java.compiler=<NA> (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,094] INFO Client environment:os.name=Linux (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,095] INFO Client environment:os.arch=amd64 (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,095] INFO Client environment:os.version=5.10.76-linuxkit (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,095] INFO Client environment:user.name=appuser (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,095] INFO Client environment:user.home=/home/appuser (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,095] INFO Client environment:user.dir=/home/appuser (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,095] INFO Client environment:os.memory.free=1008MB (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,096] INFO Client environment:os.memory.max=1024MB (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,096] INFO Client environment:os.memory.total=1024MB (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,105] INFO Initiating client connection, connectString=zoo1:2181 sessionTimeout=18000 watcher=kafka.zookeeper.ZooKeeperClient$ZooKeeperClientWatcher$@626c44e7 (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,120] INFO jute.maxbuffer value is 4194304 Bytes (org.apache.zookeeper.ClientCnxnSocket)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,141] INFO zookeeper.request.timeout value is 0. feature enabled=false (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,162] INFO [ZooKeeperClient Kafka server] Waiting until connected. (kafka.zookeeper.ZooKeeperClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,191] INFO Opening socket connection to server zoo1/192.168.32.2:2181. (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,194] INFO SASL config status: Will not attempt to authenticate using SASL (unknown error) (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,224] INFO Socket connection established, initiating session, client: /192.168.32.4:54798, server: zoo1/192.168.32.2:2181 (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,246] INFO Session establishment complete on server zoo1/192.168.32.2:2181, session id = 0x10006de0c190004, negotiated timeout = 18000 (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,267] INFO [ZooKeeperClient Kafka server] Connected. (kafka.zookeeper.ZooKeeperClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,649] INFO [feature-zk-node-event-process-thread]: Starting (kafka.server.FinalizedFeatureChangeListener$ChangeNotificationProcessorThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,709] INFO Feature ZK node at path: /feature does not exist (kafka.server.FinalizedFeatureChangeListener)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,710] INFO Cleared cache (kafka.server.FinalizedFeatureCache)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:09,441] INFO Cluster ID = V5kB09chREKL6G31lo5VzA (kafka.server.KafkaServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:09,451] WARN No meta.properties file under dir /var/lib/kafka/data/meta.properties (kafka.server.BrokerMetadataCheckpoint)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:09,692] INFO KafkaConfig values: \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tadvertised.listeners = LISTENER_DOCKER_INTERNAL://kafka1:19092,LISTENER_DOCKER_EXTERNAL://127.0.0.1:9092\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\talter.config.policy.class.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\talter.log.dirs.replication.quota.window.num = 11\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\talter.log.dirs.replication.quota.window.size.seconds = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tauthorizer.class.name = kafka.security.authorizer.AclAuthorizer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tauto.create.topics.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tauto.leader.rebalance.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tbackground.threads = 10\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tbroker.heartbeat.interval.ms = 2000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tbroker.id = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tbroker.id.generation.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tbroker.rack = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tbroker.session.timeout.ms = 9000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tclient.quota.callback.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcompression.type = producer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tconnection.failed.authentication.delay.ms = 100\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tconnections.max.idle.ms = 600000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tconnections.max.reauth.ms = 0\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontrol.plane.listener.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontrolled.shutdown.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontrolled.shutdown.max.retries = 3\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontrolled.shutdown.retry.backoff.ms = 5000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.listener.names = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.append.linger.ms = 25\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.election.backoff.max.ms = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.election.timeout.ms = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.fetch.timeout.ms = 2000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.request.timeout.ms = 2000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.retry.backoff.ms = 20\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.voters = []\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quota.window.num = 11\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quota.window.size.seconds = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.socket.timeout.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcreate.topic.policy.class.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdefault.replication.factor = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelegation.token.expiry.check.interval.ms = 3600000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelegation.token.expiry.time.ms = 86400000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelegation.token.master.key = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelegation.token.max.lifetime.ms = 604800000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelegation.token.secret.key = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelete.records.purgatory.purge.interval.requests = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelete.topic.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tfetch.max.bytes = 57671680\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tfetch.purgatory.purge.interval.requests = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tgroup.initial.rebalance.delay.ms = 3000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tgroup.max.session.timeout.ms = 1800000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tgroup.max.size = 2147483647\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tgroup.min.session.timeout.ms = 6000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tinitial.broker.registration.timeout.ms = 60000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tinter.broker.listener.name = LISTENER_DOCKER_INTERNAL\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tinter.broker.protocol.version = 3.0-IV1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tkafka.metrics.polling.interval.secs = 10\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tkafka.metrics.reporters = []\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tleader.imbalance.check.interval.seconds = 300\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tleader.imbalance.per.broker.percentage = 10\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlistener.security.protocol.map = LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlisteners = LISTENER_DOCKER_INTERNAL://0.0.0.0:19092,LISTENER_DOCKER_EXTERNAL://0.0.0.0:9092\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.backoff.ms = 15000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.dedupe.buffer.size = 134217728\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.delete.retention.ms = 86400000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.io.buffer.load.factor = 0.9\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.io.buffer.size = 524288\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.io.max.bytes.per.second = 1.7976931348623157E308\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.max.compaction.lag.ms = 9223372036854775807\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.min.cleanable.ratio = 0.5\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.min.compaction.lag.ms = 0\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.threads = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleanup.policy = [delete]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.dir = /tmp/kafka-logs\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.dirs = /var/lib/kafka/data\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.flush.interval.messages = 9223372036854775807\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.flush.interval.ms = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.flush.offset.checkpoint.interval.ms = 60000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.flush.scheduler.interval.ms = 9223372036854775807\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.flush.start.offset.checkpoint.interval.ms = 60000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.index.interval.bytes = 4096\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.index.size.max.bytes = 10485760\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.message.downconversion.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.message.format.version = 3.0-IV1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.message.timestamp.difference.max.ms = 9223372036854775807\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.message.timestamp.type = CreateTime\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.preallocate = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.retention.bytes = -1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.retention.check.interval.ms = 300000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.retention.hours = 168\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.retention.minutes = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.retention.ms = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.roll.hours = 168\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.roll.jitter.hours = 0\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.roll.jitter.ms = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.roll.ms = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.segment.bytes = 1073741824\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.segment.delete.delay.ms = 60000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmax.connection.creation.rate = 2147483647\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmax.connections = 2147483647\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmax.connections.per.ip = 2147483647\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmax.connections.per.ip.overrides = \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmax.incremental.fetch.session.cache.slots = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmessage.max.bytes = 1048588\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.log.dir = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.log.max.record.bytes.between.snapshots = 20971520\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.log.segment.bytes = 1073741824\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.log.segment.min.bytes = 8388608\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.log.segment.ms = 604800000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.max.retention.bytes = -1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.max.retention.ms = 604800000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetric.reporters = []\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetrics.num.samples = 2\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetrics.recording.level = INFO\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetrics.sample.window.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmin.insync.replicas = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnode.id = -1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnum.io.threads = 8\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnum.network.threads = 3\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnum.partitions = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnum.recovery.threads.per.data.dir = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnum.replica.alter.log.dirs.threads = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnum.replica.fetchers = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffset.metadata.max.bytes = 4096\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.commit.required.acks = -1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.commit.timeout.ms = 5000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.load.buffer.size = 5242880\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.retention.check.interval.ms = 600000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.retention.minutes = 10080\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.topic.compression.codec = 0\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.topic.num.partitions = 50\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.topic.replication.factor = 3\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.topic.segment.bytes = 104857600\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tpassword.encoder.cipher.algorithm = AES/CBC/PKCS5Padding\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tpassword.encoder.iterations = 4096\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tpassword.encoder.key.length = 128\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tpassword.encoder.keyfactory.algorithm = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tpassword.encoder.old.secret = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tpassword.encoder.secret = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tprincipal.builder.class = class org.apache.kafka.common.security.authenticator.DefaultKafkaPrincipalBuilder\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tprocess.roles = []\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tproducer.purgatory.purge.interval.requests = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tqueued.max.request.bytes = -1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tqueued.max.requests = 500\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tquota.window.num = 11\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tquota.window.size.seconds = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.index.file.cache.total.size.bytes = 1073741824\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.manager.task.interval.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.manager.task.retry.backoff.max.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.manager.task.retry.backoff.ms = 500\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.manager.task.retry.jitter = 0.2\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.manager.thread.pool.size = 10\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.metadata.manager.class.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.metadata.manager.class.path = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.metadata.manager.impl.prefix = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.metadata.manager.listener.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.reader.max.pending.tasks = 100\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.reader.threads = 10\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.storage.manager.class.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.storage.manager.class.path = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.storage.manager.impl.prefix = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.storage.system.enable = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.fetch.backoff.ms = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.fetch.max.bytes = 1048576\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.fetch.min.bytes = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.fetch.response.max.bytes = 10485760\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.fetch.wait.max.ms = 500\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.high.watermark.checkpoint.interval.ms = 5000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.lag.time.max.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.selector.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.socket.receive.buffer.bytes = 65536\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.socket.timeout.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplication.quota.window.num = 11\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplication.quota.window.size.seconds = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\trequest.timeout.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treserved.broker.max.id = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.client.callback.handler.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.enabled.mechanisms = [GSSAPI]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.jaas.config = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.kerberos.kinit.cmd = /usr/bin/kinit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.kerberos.min.time.before.relogin = 60000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.kerberos.principal.to.local.rules = [DEFAULT]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.kerberos.service.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.kerberos.ticket.renew.jitter = 0.05\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.kerberos.ticket.renew.window.factor = 0.8\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.login.callback.handler.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.login.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.login.refresh.buffer.seconds = 300\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.login.refresh.min.period.seconds = 60\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.login.refresh.window.factor = 0.8\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.login.refresh.window.jitter = 0.05\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.mechanism.controller.protocol = GSSAPI\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.mechanism.inter.broker.protocol = GSSAPI\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.server.callback.handler.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsecurity.inter.broker.protocol = PLAINTEXT\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsecurity.providers = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsocket.connection.setup.timeout.max.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsocket.connection.setup.timeout.ms = 10000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsocket.receive.buffer.bytes = 102400\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsocket.request.max.bytes = 104857600\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsocket.send.buffer.bytes = 102400\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.cipher.suites = []\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.client.auth = none\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.enabled.protocols = [TLSv1.2, TLSv1.3]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.endpoint.identification.algorithm = https\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.engine.factory.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.key.password = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.keymanager.algorithm = SunX509\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.keystore.certificate.chain = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.keystore.key = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.keystore.location = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.keystore.password = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.keystore.type = JKS\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.principal.mapping.rules = DEFAULT\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.protocol = TLSv1.3\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.provider = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.secure.random.implementation = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.trustmanager.algorithm = PKIX\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.truststore.certificates = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.truststore.location = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.truststore.password = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.truststore.type = JKS\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.abort.timed.out.transaction.cleanup.interval.ms = 10000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.max.timeout.ms = 900000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.remove.expired.transaction.cleanup.interval.ms = 3600000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.state.log.load.buffer.size = 5242880\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.state.log.min.isr = 2\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.state.log.num.partitions = 50\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.state.log.replication.factor = 3\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.state.log.segment.bytes = 104857600\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransactional.id.expiration.ms = 604800000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tunclean.leader.election.enable = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.clientCnxnSocket = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.connect = zoo1:2181\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.connection.timeout.ms = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.max.in.flight.requests = 10\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.session.timeout.ms = 18000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.set.acl = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.cipher.suites = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.client.enable = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.crl.enable = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.enabled.protocols = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.endpoint.identification.algorithm = HTTPS\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.keystore.location = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.keystore.password = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.keystore.type = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.ocsp.enable = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.protocol = TLSv1.2\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.truststore.location = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.truststore.password = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.truststore.type = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.sync.time.ms = 2000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":" (kafka.server.KafkaConfig)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:09,732] INFO KafkaConfig values: \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tadvertised.listeners = LISTENER_DOCKER_INTERNAL://kafka1:19092,LISTENER_DOCKER_EXTERNAL://127.0.0.1:9092\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\talter.config.policy.class.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\talter.log.dirs.replication.quota.window.num = 11\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\talter.log.dirs.replication.quota.window.size.seconds = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tauthorizer.class.name = kafka.security.authorizer.AclAuthorizer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tauto.create.topics.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tauto.leader.rebalance.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tbackground.threads = 10\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tbroker.heartbeat.interval.ms = 2000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tbroker.id = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tbroker.id.generation.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tbroker.rack = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tbroker.session.timeout.ms = 9000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tclient.quota.callback.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcompression.type = producer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tconnection.failed.authentication.delay.ms = 100\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tconnections.max.idle.ms = 600000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tconnections.max.reauth.ms = 0\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontrol.plane.listener.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontrolled.shutdown.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontrolled.shutdown.max.retries = 3\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontrolled.shutdown.retry.backoff.ms = 5000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.listener.names = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.append.linger.ms = 25\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.election.backoff.max.ms = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.election.timeout.ms = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.fetch.timeout.ms = 2000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.request.timeout.ms = 2000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.retry.backoff.ms = 20\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.voters = []\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quota.window.num = 11\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quota.window.size.seconds = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.socket.timeout.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcreate.topic.policy.class.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdefault.replication.factor = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelegation.token.expiry.check.interval.ms = 3600000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelegation.token.expiry.time.ms = 86400000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelegation.token.master.key = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelegation.token.max.lifetime.ms = 604800000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelegation.token.secret.key = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelete.records.purgatory.purge.interval.requests = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelete.topic.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tfetch.max.bytes = 57671680\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tfetch.purgatory.purge.interval.requests = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tgroup.initial.rebalance.delay.ms = 3000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tgroup.max.session.timeout.ms = 1800000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tgroup.max.size = 2147483647\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tgroup.min.session.timeout.ms = 6000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tinitial.broker.registration.timeout.ms = 60000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tinter.broker.listener.name = LISTENER_DOCKER_INTERNAL\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tinter.broker.protocol.version = 3.0-IV1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tkafka.metrics.polling.interval.secs = 10\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tkafka.metrics.reporters = []\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tleader.imbalance.check.interval.seconds = 300\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tleader.imbalance.per.broker.percentage = 10\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlistener.security.protocol.map = LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlisteners = LISTENER_DOCKER_INTERNAL://0.0.0.0:19092,LISTENER_DOCKER_EXTERNAL://0.0.0.0:9092\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.backoff.ms = 15000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.dedupe.buffer.size = 134217728\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.delete.retention.ms = 86400000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.io.buffer.load.factor = 0.9\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.io.buffer.size = 524288\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.io.max.bytes.per.second = 1.7976931348623157E308\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.max.compaction.lag.ms = 9223372036854775807\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.min.cleanable.ratio = 0.5\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.min.compaction.lag.ms = 0\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.threads = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleanup.policy = [delete]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.dir = /tmp/kafka-logs\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.dirs = /var/lib/kafka/data\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.flush.interval.messages = 9223372036854775807\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.flush.interval.ms = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.flush.offset.checkpoint.interval.ms = 60000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.flush.scheduler.interval.ms = 9223372036854775807\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.flush.start.offset.checkpoint.interval.ms = 60000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.index.interval.bytes = 4096\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.index.size.max.bytes = 10485760\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.message.downconversion.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.message.format.version = 3.0-IV1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.message.timestamp.difference.max.ms = 9223372036854775807\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.message.timestamp.type = CreateTime\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.preallocate = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.retention.bytes = -1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.retention.check.interval.ms = 300000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.retention.hours = 168\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.retention.minutes = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.retention.ms = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.roll.hours = 168\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.roll.jitter.hours = 0\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.roll.jitter.ms = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.roll.ms = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.segment.bytes = 1073741824\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.segment.delete.delay.ms = 60000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmax.connection.creation.rate = 2147483647\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmax.connections = 2147483647\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmax.connections.per.ip = 2147483647\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmax.connections.per.ip.overrides = \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmax.incremental.fetch.session.cache.slots = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmessage.max.bytes = 1048588\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.log.dir = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.log.max.record.bytes.between.snapshots = 20971520\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.log.segment.bytes = 1073741824\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.log.segment.min.bytes = 8388608\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.log.segment.ms = 604800000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.max.retention.bytes = -1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.max.retention.ms = 604800000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetric.reporters = []\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetrics.num.samples = 2\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetrics.recording.level = INFO\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetrics.sample.window.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmin.insync.replicas = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnode.id = -1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnum.io.threads = 8\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnum.network.threads = 3\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnum.partitions = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnum.recovery.threads.per.data.dir = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnum.replica.alter.log.dirs.threads = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnum.replica.fetchers = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffset.metadata.max.bytes = 4096\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.commit.required.acks = -1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.commit.timeout.ms = 5000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.load.buffer.size = 5242880\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.retention.check.interval.ms = 600000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.retention.minutes = 10080\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.topic.compression.codec = 0\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.topic.num.partitions = 50\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.topic.replication.factor = 3\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.topic.segment.bytes = 104857600\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tpassword.encoder.cipher.algorithm = AES/CBC/PKCS5Padding\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tpassword.encoder.iterations = 4096\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tpassword.encoder.key.length = 128\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tpassword.encoder.keyfactory.algorithm = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tpassword.encoder.old.secret = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tpassword.encoder.secret = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tprincipal.builder.class = class org.apache.kafka.common.security.authenticator.DefaultKafkaPrincipalBuilder\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tprocess.roles = []\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tproducer.purgatory.purge.interval.requests = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tqueued.max.request.bytes = -1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tqueued.max.requests = 500\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tquota.window.num = 11\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tquota.window.size.seconds = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.index.file.cache.total.size.bytes = 1073741824\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.manager.task.interval.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.manager.task.retry.backoff.max.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.manager.task.retry.backoff.ms = 500\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.manager.task.retry.jitter = 0.2\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.manager.thread.pool.size = 10\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.metadata.manager.class.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.metadata.manager.class.path = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.metadata.manager.impl.prefix = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.metadata.manager.listener.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.reader.max.pending.tasks = 100\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.reader.threads = 10\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.storage.manager.class.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.storage.manager.class.path = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.storage.manager.impl.prefix = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.storage.system.enable = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.fetch.backoff.ms = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.fetch.max.bytes = 1048576\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.fetch.min.bytes = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.fetch.response.max.bytes = 10485760\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.fetch.wait.max.ms = 500\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.high.watermark.checkpoint.interval.ms = 5000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.lag.time.max.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.selector.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.socket.receive.buffer.bytes = 65536\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.socket.timeout.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplication.quota.window.num = 11\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplication.quota.window.size.seconds = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\trequest.timeout.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treserved.broker.max.id = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.client.callback.handler.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.enabled.mechanisms = [GSSAPI]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.jaas.config = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.kerberos.kinit.cmd = /usr/bin/kinit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.kerberos.min.time.before.relogin = 60000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.kerberos.principal.to.local.rules = [DEFAULT]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.kerberos.service.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.kerberos.ticket.renew.jitter = 0.05\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.kerberos.ticket.renew.window.factor = 0.8\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.login.callback.handler.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.login.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.login.refresh.buffer.seconds = 300\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.login.refresh.min.period.seconds = 60\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.login.refresh.window.factor = 0.8\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.login.refresh.window.jitter = 0.05\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.mechanism.controller.protocol = GSSAPI\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.mechanism.inter.broker.protocol = GSSAPI\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.server.callback.handler.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsecurity.inter.broker.protocol = PLAINTEXT\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsecurity.providers = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsocket.connection.setup.timeout.max.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsocket.connection.setup.timeout.ms = 10000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsocket.receive.buffer.bytes = 102400\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsocket.request.max.bytes = 104857600\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsocket.send.buffer.bytes = 102400\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.cipher.suites = []\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.client.auth = none\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.enabled.protocols = [TLSv1.2, TLSv1.3]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.endpoint.identification.algorithm = https\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.engine.factory.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.key.password = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.keymanager.algorithm = SunX509\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.keystore.certificate.chain = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.keystore.key = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.keystore.location = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.keystore.password = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.keystore.type = JKS\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.principal.mapping.rules = DEFAULT\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.protocol = TLSv1.3\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.provider = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.secure.random.implementation = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.trustmanager.algorithm = PKIX\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.truststore.certificates = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.truststore.location = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.truststore.password = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.truststore.type = JKS\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.abort.timed.out.transaction.cleanup.interval.ms = 10000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.max.timeout.ms = 900000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.remove.expired.transaction.cleanup.interval.ms = 3600000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.state.log.load.buffer.size = 5242880\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.state.log.min.isr = 2\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.state.log.num.partitions = 50\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.state.log.replication.factor = 3\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.state.log.segment.bytes = 104857600\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransactional.id.expiration.ms = 604800000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tunclean.leader.election.enable = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.clientCnxnSocket = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.connect = zoo1:2181\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.connection.timeout.ms = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.max.in.flight.requests = 10\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.session.timeout.ms = 18000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.set.acl = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.cipher.suites = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.client.enable = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.crl.enable = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.enabled.protocols = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.endpoint.identification.algorithm = HTTPS\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.keystore.location = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.keystore.password = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.keystore.type = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.ocsp.enable = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.protocol = TLSv1.2\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.truststore.location = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.truststore.password = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.truststore.type = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.sync.time.ms = 2000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":" (kafka.server.KafkaConfig)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:09,872] INFO [ThrottledChannelReaper-Fetch]: Starting (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:09,903] INFO [ThrottledChannelReaper-Produce]: Starting (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:09,903] INFO [ThrottledChannelReaper-Request]: Starting (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:09,914] INFO [ThrottledChannelReaper-ControllerMutation]: Starting (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:10,038] INFO Loading logs from log dirs ArraySeq(/var/lib/kafka/data) (kafka.log.LogManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:10,050] INFO Attempting recovery for all logs in /var/lib/kafka/data since no clean shutdown file was found (kafka.log.LogManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:10,075] INFO Loaded 0 logs in 37ms. (kafka.log.LogManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:10,078] INFO Starting log cleanup with a period of 300000 ms. (kafka.log.LogManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:10,087] INFO Starting log flusher with a default period of 9223372036854775807 ms. (kafka.log.LogManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:10,127] INFO Starting the log cleaner (kafka.log.LogCleaner)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:11,003] INFO [kafka-log-cleaner-thread-0]: Starting (kafka.log.LogCleaner)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:12,245] INFO [BrokerToControllerChannelManager broker=1 name=forwarding]: Starting (kafka.server.BrokerToControllerRequestThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:13,677] INFO Updated connection-accept-rate max connection creation rate to 2147483647 (kafka.network.ConnectionQuotas)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:13,688] INFO Awaiting socket connections on 0.0.0.0:19092. (kafka.network.Acceptor)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:13,829] INFO [SocketServer listenerType=ZK_BROKER, nodeId=1] Created data-plane acceptor and processors for endpoint : ListenerName(LISTENER_DOCKER_INTERNAL) (kafka.network.SocketServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:13,832] INFO Updated connection-accept-rate max connection creation rate to 2147483647 (kafka.network.ConnectionQuotas)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:13,834] INFO Awaiting socket connections on 0.0.0.0:9092. (kafka.network.Acceptor)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:13,874] INFO [SocketServer listenerType=ZK_BROKER, nodeId=1] Created data-plane acceptor and processors for endpoint : ListenerName(LISTENER_DOCKER_EXTERNAL) (kafka.network.SocketServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:13,910] INFO [BrokerToControllerChannelManager broker=1 name=alterIsr]: Starting (kafka.server.BrokerToControllerRequestThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:13,960] INFO [ExpirationReaper-1-Produce]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:13,970] INFO [ExpirationReaper-1-Fetch]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:13,983] INFO [ExpirationReaper-1-DeleteRecords]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:13,993] INFO [ExpirationReaper-1-ElectLeader]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,097] INFO [LogDirFailureHandler]: Starting (kafka.server.ReplicaManager$LogDirFailureHandler)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,187] INFO Creating /brokers/ids/1 (is it secure? false) (kafka.zk.KafkaZkClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,274] INFO Stat of the created znode at /brokers/ids/1 is: 75,75,1647594914254,1647594914254,1,0,0,72065144793399300,311,0,75\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":" (kafka.zk.KafkaZkClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,282] INFO Registered broker 1 at path /brokers/ids/1 with addresses: LISTENER_DOCKER_INTERNAL://kafka1:19092,LISTENER_DOCKER_EXTERNAL://127.0.0.1:9092, czxid (broker epoch): 75 (kafka.zk.KafkaZkClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,541] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,586] INFO [ExpirationReaper-1-topic]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,605] INFO [ExpirationReaper-1-Rebalance]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,605] INFO [ExpirationReaper-1-Heartbeat]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,714] INFO [GroupCoordinator 1]: Starting up. (kafka.coordinator.group.GroupCoordinator)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,731] INFO Feature ZK node created at path: /feature (kafka.server.FinalizedFeatureChangeListener)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,772] INFO [GroupCoordinator 1]: Startup complete. (kafka.coordinator.group.GroupCoordinator)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,874] INFO Updated cache from existing <empty> to latest FinalizedFeaturesAndEpoch(features=Features{}, epoch=0). (kafka.server.FinalizedFeatureCache)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,943] INFO [TransactionCoordinator id=1] Starting up. (kafka.coordinator.transaction.TransactionCoordinator)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,962] INFO [TransactionCoordinator id=1] Startup complete. (kafka.coordinator.transaction.TransactionCoordinator)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,983] INFO [Transaction Marker Channel Manager 1]: Starting (kafka.coordinator.transaction.TransactionMarkerChannelManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,062] INFO [ZooKeeperClient ACL authorizer] Initializing a new session to zoo1:2181. (kafka.zookeeper.ZooKeeperClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,062] INFO Initiating client connection, connectString=zoo1:2181 sessionTimeout=18000 watcher=kafka.zookeeper.ZooKeeperClient$ZooKeeperClientWatcher$@119c745c (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,063] INFO jute.maxbuffer value is 4194304 Bytes (org.apache.zookeeper.ClientCnxnSocket)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,063] INFO zookeeper.request.timeout value is 0. feature enabled=false (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,066] INFO [ZooKeeperClient ACL authorizer] Waiting until connected. (kafka.zookeeper.ZooKeeperClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,074] INFO Opening socket connection to server zoo1/192.168.32.2:2181. (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,074] INFO SASL config status: Will not attempt to authenticate using SASL (unknown error) (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,078] INFO Socket connection established, initiating session, client: /192.168.32.4:54806, server: zoo1/192.168.32.2:2181 (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,087] INFO Session establishment complete on server zoo1/192.168.32.2:2181, session id = 0x10006de0c190008, negotiated timeout = 18000 (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,090] INFO [ZooKeeperClient ACL authorizer] Connected. (kafka.zookeeper.ZooKeeperClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,372] INFO [/kafka-acl-changes-event-process-thread]: Starting (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,388] INFO [/kafka-acl-extended-changes-event-process-thread]: Starting (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,593] INFO [ExpirationReaper-1-AlterAcls]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,687] INFO [/config/changes-event-process-thread]: Starting (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,759] INFO [SocketServer listenerType=ZK_BROKER, nodeId=1] Starting socket server acceptors and processors (kafka.network.SocketServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,795] INFO [SocketServer listenerType=ZK_BROKER, nodeId=1] Started data-plane acceptor and processor(s) for endpoint : ListenerName(LISTENER_DOCKER_INTERNAL) (kafka.network.SocketServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,819] INFO [SocketServer listenerType=ZK_BROKER, nodeId=1] Started data-plane acceptor and processor(s) for endpoint : ListenerName(LISTENER_DOCKER_EXTERNAL) (kafka.network.SocketServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,821] INFO [SocketServer listenerType=ZK_BROKER, nodeId=1] Started socket server acceptors and processors (kafka.network.SocketServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,882] INFO Kafka version: 7.0.1-ccs (org.apache.kafka.common.utils.AppInfoParser)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,882] INFO Kafka commitId: b7e52413e7cb3e8b (org.apache.kafka.common.utils.AppInfoParser)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,882] INFO Kafka startTimeMs: 1647594915821 (org.apache.kafka.common.utils.AppInfoParser)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,897] INFO [KafkaServer id=1] started (kafka.server.KafkaServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:16,325] INFO [BrokerToControllerChannelManager broker=1 name=forwarding]: Recorded new controller, from now on will use broker kafka3:19094 (id: 3 rack: null) (kafka.server.BrokerToControllerRequestThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:16,329] INFO [BrokerToControllerChannelManager broker=1 name=alterIsr]: Recorded new controller, from now on will use broker kafka3:19094 (id: 3 rack: null) (kafka.server.BrokerToControllerRequestThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:08,815] INFO Terminating process due to signal SIGTERM (org.apache.kafka.common.utils.LoggingSignalHandler)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:08,876] INFO [KafkaServer id=1] shutting down (kafka.server.KafkaServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:08,914] INFO [KafkaServer id=1] Starting controlled shutdown (kafka.server.KafkaServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,061] INFO [KafkaServer id=1] Controlled shutdown succeeded (kafka.server.KafkaServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,122] INFO [/config/changes-event-process-thread]: Shutting down (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,124] INFO [/config/changes-event-process-thread]: Stopped (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,126] INFO [/config/changes-event-process-thread]: Shutdown completed (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,135] INFO [SocketServer listenerType=ZK_BROKER, nodeId=1] Stopping socket server request processors (kafka.network.SocketServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,215] INFO [SocketServer listenerType=ZK_BROKER, nodeId=1] Stopped socket server request processors (kafka.network.SocketServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,222] INFO [data-plane Kafka Request Handler on Broker 1], shutting down (kafka.server.KafkaRequestHandlerPool)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,240] INFO [data-plane Kafka Request Handler on Broker 1], shut down completely (kafka.server.KafkaRequestHandlerPool)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,253] INFO [ExpirationReaper-1-AlterAcls]: Shutting down (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,268] INFO [ExpirationReaper-1-AlterAcls]: Shutdown completed (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,268] INFO [ExpirationReaper-1-AlterAcls]: Stopped (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,274] WARN Session 0x10006de0c190004 for sever zoo1/192.168.32.2:2181, Closing socket connection. Attempting reconnect except it is a SessionExpiredException. (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"EndOfStreamException: Unable to read additional data from server sessionid 0x10006de0c190004, likely server has closed socket\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxnSocketNIO.doIO(ClientCnxnSocketNIO.java:77)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:350)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1290)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,282] WARN Session 0x10006de0c190008 for sever zoo1/192.168.32.2:2181, Closing socket connection. Attempting reconnect except it is a SessionExpiredException. (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"java.io.IOException: Connection reset by peer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/sun.nio.ch.FileDispatcherImpl.read0(Native Method)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/sun.nio.ch.SocketDispatcher.read(SocketDispatcher.java:39)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/sun.nio.ch.IOUtil.readIntoNativeBuffer(IOUtil.java:276)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/sun.nio.ch.IOUtil.read(IOUtil.java:233)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/sun.nio.ch.IOUtil.read(IOUtil.java:223)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:356)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxnSocketNIO.doIO(ClientCnxnSocketNIO.java:74)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:350)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1290)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,274] INFO [KafkaApi-1] Shutdown complete. (kafka.server.KafkaApis)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,344] INFO [/kafka-acl-changes-event-process-thread]: Shutting down (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,345] INFO [/kafka-acl-changes-event-process-thread]: Shutdown completed (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,345] INFO [/kafka-acl-extended-changes-event-process-thread]: Shutting down (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,346] INFO [/kafka-acl-extended-changes-event-process-thread]: Stopped (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,346] INFO [/kafka-acl-changes-event-process-thread]: Stopped (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,346] INFO [/kafka-acl-extended-changes-event-process-thread]: Shutdown completed (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,349] INFO [ZooKeeperClient ACL authorizer] Closing. (kafka.zookeeper.ZooKeeperClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,543] INFO EventThread shut down for session: 0x10006de0c190008 (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,543] INFO Session: 0x10006de0c190008 closed (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,548] INFO [ZooKeeperClient ACL authorizer] Closed. (kafka.zookeeper.ZooKeeperClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,550] INFO [ExpirationReaper-1-topic]: Shutting down (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,670] INFO [ExpirationReaper-1-topic]: Stopped (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,670] INFO [ExpirationReaper-1-topic]: Shutdown completed (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,681] INFO [TransactionCoordinator id=1] Shutting down. (kafka.coordinator.transaction.TransactionCoordinator)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,685] INFO [Transaction State Manager 1]: Shutdown complete (kafka.coordinator.transaction.TransactionStateManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,686] INFO [Transaction Marker Channel Manager 1]: Shutting down (kafka.coordinator.transaction.TransactionMarkerChannelManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,688] INFO [Transaction Marker Channel Manager 1]: Stopped (kafka.coordinator.transaction.TransactionMarkerChannelManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,689] INFO [Transaction Marker Channel Manager 1]: Shutdown completed (kafka.coordinator.transaction.TransactionMarkerChannelManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,692] INFO [TransactionCoordinator id=1] Shutdown complete. (kafka.coordinator.transaction.TransactionCoordinator)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,694] INFO [GroupCoordinator 1]: Shutting down. (kafka.coordinator.group.GroupCoordinator)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,696] INFO [ExpirationReaper-1-Heartbeat]: Shutting down (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,870] INFO [ExpirationReaper-1-Heartbeat]: Stopped (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,870] INFO [ExpirationReaper-1-Heartbeat]: Shutdown completed (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,873] INFO [ExpirationReaper-1-Rebalance]: Shutting down (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,875] INFO [ExpirationReaper-1-Rebalance]: Stopped (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,876] INFO [ExpirationReaper-1-Rebalance]: Shutdown completed (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,879] INFO [GroupCoordinator 1]: Shutdown complete. (kafka.coordinator.group.GroupCoordinator)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,882] INFO [ReplicaManager broker=1] Shutting down (kafka.server.ReplicaManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,883] INFO [LogDirFailureHandler]: Shutting down (kafka.server.ReplicaManager$LogDirFailureHandler)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,886] INFO [LogDirFailureHandler]: Stopped (kafka.server.ReplicaManager$LogDirFailureHandler)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,886] INFO [LogDirFailureHandler]: Shutdown completed (kafka.server.ReplicaManager$LogDirFailureHandler)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,887] INFO [ReplicaFetcherManager on broker 1] shutting down (kafka.server.ReplicaFetcherManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,891] INFO [ReplicaFetcherManager on broker 1] shutdown completed (kafka.server.ReplicaFetcherManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,893] INFO [ReplicaAlterLogDirsManager on broker 1] shutting down (kafka.server.ReplicaAlterLogDirsManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,894] INFO [ReplicaAlterLogDirsManager on broker 1] shutdown completed (kafka.server.ReplicaAlterLogDirsManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,894] INFO [ExpirationReaper-1-Fetch]: Shutting down (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,076] INFO [ExpirationReaper-1-Fetch]: Stopped (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,077] INFO [ExpirationReaper-1-Fetch]: Shutdown completed (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,078] INFO [ExpirationReaper-1-Produce]: Shutting down (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,271] INFO [ExpirationReaper-1-Produce]: Stopped (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,271] INFO [ExpirationReaper-1-Produce]: Shutdown completed (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,273] INFO [ExpirationReaper-1-DeleteRecords]: Shutting down (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,277] INFO [ExpirationReaper-1-DeleteRecords]: Stopped (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,278] INFO [ExpirationReaper-1-DeleteRecords]: Shutdown completed (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,279] INFO [ExpirationReaper-1-ElectLeader]: Shutting down (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,473] INFO [ExpirationReaper-1-ElectLeader]: Shutdown completed (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,473] INFO [ExpirationReaper-1-ElectLeader]: Stopped (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,490] INFO [ReplicaManager broker=1] Shut down completely (kafka.server.ReplicaManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,492] INFO [BrokerToControllerChannelManager broker=1 name=alterIsr]: Shutting down (kafka.server.BrokerToControllerRequestThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,493] INFO [BrokerToControllerChannelManager broker=1 name=alterIsr]: Stopped (kafka.server.BrokerToControllerRequestThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,494] INFO [BrokerToControllerChannelManager broker=1 name=alterIsr]: Shutdown completed (kafka.server.BrokerToControllerRequestThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,500] INFO Broker to controller channel manager for alterIsr shutdown (kafka.server.BrokerToControllerChannelManagerImpl)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,500] INFO [BrokerToControllerChannelManager broker=1 name=forwarding]: Shutting down (kafka.server.BrokerToControllerRequestThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,501] INFO [BrokerToControllerChannelManager broker=1 name=forwarding]: Stopped (kafka.server.BrokerToControllerRequestThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,501] INFO [BrokerToControllerChannelManager broker=1 name=forwarding]: Shutdown completed (kafka.server.BrokerToControllerRequestThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,502] INFO Broker to controller channel manager for forwarding shutdown (kafka.server.BrokerToControllerChannelManagerImpl)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,503] INFO Shutting down. (kafka.log.LogManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,507] INFO Shutting down the log cleaner. (kafka.log.LogCleaner)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,508] INFO [kafka-log-cleaner-thread-0]: Shutting down (kafka.log.LogCleaner)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,510] INFO [kafka-log-cleaner-thread-0]: Stopped (kafka.log.LogCleaner)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,510] INFO [kafka-log-cleaner-thread-0]: Shutdown completed (kafka.log.LogCleaner)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,532] INFO Shutdown complete. (kafka.log.LogManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,532] INFO [ControllerEventThread controllerId=1] Shutting down (kafka.controller.ControllerEventManager$ControllerEventThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,533] INFO [ControllerEventThread controllerId=1] Shutdown completed (kafka.controller.ControllerEventManager$ControllerEventThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,533] INFO [ControllerEventThread controllerId=1] Stopped (kafka.controller.ControllerEventManager$ControllerEventThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,537] INFO [PartitionStateMachine controllerId=1] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,538] INFO [ReplicaStateMachine controllerId=1] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,542] INFO [Controller id=1] Resigned (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,544] INFO [feature-zk-node-event-process-thread]: Shutting down (kafka.server.FinalizedFeatureChangeListener$ChangeNotificationProcessorThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,548] INFO [feature-zk-node-event-process-thread]: Shutdown completed (kafka.server.FinalizedFeatureChangeListener$ChangeNotificationProcessorThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,548] INFO [feature-zk-node-event-process-thread]: Stopped (kafka.server.FinalizedFeatureChangeListener$ChangeNotificationProcessorThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,551] INFO [ZooKeeperClient Kafka server] Closing. (kafka.zookeeper.ZooKeeperClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,683] ERROR Unable to resolve address: zoo1:2181 (org.apache.zookeeper.client.StaticHostProvider)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"java.net.UnknownHostException: zoo1: Name or service not known\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/java.net.Inet4AddressImpl.lookupAllHostAddr(Native Method)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/java.net.InetAddress$PlatformNameService.lookupAllHostAddr(InetAddress.java:929)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/java.net.InetAddress.getAddressesFromNameService(InetAddress.java:1519)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/java.net.InetAddress$NameServiceAddresses.get(InetAddress.java:848)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/java.net.InetAddress.getAllByName0(InetAddress.java:1509)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/java.net.InetAddress.getAllByName(InetAddress.java:1368)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/java.net.InetAddress.getAllByName(InetAddress.java:1302)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.client.StaticHostProvider$1.getAllByName(StaticHostProvider.java:88)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.client.StaticHostProvider.resolve(StaticHostProvider.java:141)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.client.StaticHostProvider.next(StaticHostProvider.java:368)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1207)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:11,414] WARN An exception was thrown while closing send thread for session 0x10006de0c190004. (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"java.lang.IllegalArgumentException: Unable to canonicalize address zoo1:2181 because it's not resolvable\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.SaslServerPrincipal.getServerPrincipal(SaslServerPrincipal.java:78)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.SaslServerPrincipal.getServerPrincipal(SaslServerPrincipal.java:41)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxn$SendThread.startConnect(ClientCnxn.java:1161)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1210)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:11,517] INFO Session: 0x10006de0c190004 closed (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:11,517] INFO EventThread shut down for session: 0x10006de0c190004 (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:11,518] INFO [ZooKeeperClient Kafka server] Closed. (kafka.zookeeper.ZooKeeperClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:11,526] INFO [ThrottledChannelReaper-Fetch]: Shutting down (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:12,393] INFO [ThrottledChannelReaper-Fetch]: Stopped (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:12,393] INFO [ThrottledChannelReaper-Fetch]: Shutdown completed (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:12,394] INFO [ThrottledChannelReaper-Produce]: Shutting down (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:12,395] INFO [ThrottledChannelReaper-Produce]: Stopped (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:12,395] INFO [ThrottledChannelReaper-Produce]: Shutdown completed (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:12,396] INFO [ThrottledChannelReaper-Request]: Shutting down (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:13,393] INFO [ThrottledChannelReaper-Request]: Stopped (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:13,393] INFO [ThrottledChannelReaper-Request]: Shutdown completed (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:13,394] INFO [ThrottledChannelReaper-ControllerMutation]: Shutting down (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:13,399] INFO [ThrottledChannelReaper-ControllerMutation]: Stopped (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:13,399] INFO [ThrottledChannelReaper-ControllerMutation]: Shutdown completed (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:13,402] INFO [SocketServer listenerType=ZK_BROKER, nodeId=1] Shutting down socket server (kafka.network.SocketServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:13,459] INFO [SocketServer listenerType=ZK_BROKER, nodeId=1] Shutdown completed (kafka.network.SocketServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:13,461] INFO Metrics scheduler closed (org.apache.kafka.common.metrics.Metrics)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:13,461] INFO Closing reporter org.apache.kafka.common.metrics.JmxReporter (org.apache.kafka.common.metrics.Metrics)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:13,461] INFO Metrics reporters closed (org.apache.kafka.common.metrics.Metrics)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:13,466] INFO Broker and topic stats closed (kafka.server.BrokerTopicStats)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:13,468] INFO App info kafka.server for 1 unregistered (org.apache.kafka.common.utils.AppInfoParser)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:13,469] INFO [KafkaServer id=1] shut down completed (kafka.server.KafkaServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:42.748704+00:00 [info] <0.222.0> Feature flags: list of feature flags found:\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:42.779087+00:00 [info] <0.222.0> Feature flags:   [ ] implicit_default_bindings\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:42.779175+00:00 [info] <0.222.0> Feature flags:   [ ] maintenance_mode_status\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:42.779230+00:00 [info] <0.222.0> Feature flags:   [ ] quorum_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:42.779292+00:00 [info] <0.222.0> Feature flags:   [ ] stream_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:42.779428+00:00 [info] <0.222.0> Feature flags:   [ ] user_limits\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:42.779458+00:00 [info] <0.222.0> Feature flags:   [ ] virtual_host_metadata\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:42.779480+00:00 [info] <0.222.0> Feature flags: feature flag states written to disk: yes\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:43.573438+00:00 [noti] <0.44.0> Application syslog exited with reason: stopped\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:43.573549+00:00 [noti] <0.222.0> Logging: switching to configured handler(s); following messages may not be visible in this log output\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:43.603682+00:00 [noti] <0.222.0> Logging: configured log handlers are now ACTIVE\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:44.022595+00:00 [info] <0.222.0> ra: starting system quorum_queues\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:44.022744+00:00 [info] <0.222.0> starting Ra system: quorum_queues in directory: /var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e/quorum/rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:44.188619+00:00 [info] <0.259.0> ra: meta data store initialised for system quorum_queues. 0 record(s) recovered\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:44.221819+00:00 [noti] <0.264.0> WAL: ra_log_wal init, open tbls: ra_log_open_mem_tables, closed tbls: ra_log_closed_mem_tables\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:44.235772+00:00 [info] <0.222.0> ra: starting system coordination\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:44.235841+00:00 [info] <0.222.0> starting Ra system: coordination in directory: /var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e/coordination/rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:44.240192+00:00 [info] <0.272.0> ra: meta data store initialised for system coordination. 0 record(s) recovered\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:44.240678+00:00 [noti] <0.277.0> WAL: ra_coordination_log_wal init, open tbls: ra_coordination_log_open_mem_tables, closed tbls: ra_coordination_log_closed_mem_tables\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:44.245287+00:00 [info] <0.222.0> \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:44.245287+00:00 [info] <0.222.0>  Starting RabbitMQ 3.9.11 on Erlang 24.2 [jit]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:44.245287+00:00 [info] <0.222.0>  Copyright (c) 2007-2021 VMware, Inc. or its affiliates.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:44.245287+00:00 [info] <0.222.0>  Licensed under the MPL 2.0. Website: https://rabbitmq.com\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  ##  ##      RabbitMQ 3.9.11\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  ##  ##\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  ##########  Copyright (c) 2007-2021 VMware, Inc. or its affiliates.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  ######  ##\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  ##########  Licensed under the MPL 2.0. Website: https://rabbitmq.com\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Erlang:      24.2 [jit]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  TLS Library: OpenSSL - OpenSSL 1.1.1m  14 Dec 2021\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Doc guides:  https://rabbitmq.com/documentation.html\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Support:     https://rabbitmq.com/contact.html\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Tutorials:   https://rabbitmq.com/getstarted.html\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Monitoring:  https://rabbitmq.com/monitoring.html\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Logs: /var/log/rabbitmq/rabbit@cc5c74ca7d4e_upgrade.log\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"        <stdout>\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Config file(s): /etc/rabbitmq/conf.d/10-default-guest-user.conf\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Starting broker...2022-02-08 08:25:44.247544+00:00 [info] <0.222.0> \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:44.247544+00:00 [info] <0.222.0>  node           : rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:44.247544+00:00 [info] <0.222.0>  home dir       : /var/lib/rabbitmq\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:44.247544+00:00 [info] <0.222.0>  config file(s) : /etc/rabbitmq/conf.d/10-default-guest-user.conf\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:44.247544+00:00 [info] <0.222.0>  cookie hash    : /c9IfjRdZQiq5EMuXaZaFQ==\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:44.247544+00:00 [info] <0.222.0>  log(s)         : /var/log/rabbitmq/rabbit@cc5c74ca7d4e_upgrade.log\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:44.247544+00:00 [info] <0.222.0>                 : <stdout>\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:44.247544+00:00 [info] <0.222.0>  database dir   : /var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:44.701027+00:00 [info] <0.222.0> Feature flags: list of feature flags found:\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:44.701108+00:00 [info] <0.222.0> Feature flags:   [ ] drop_unroutable_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:44.701151+00:00 [info] <0.222.0> Feature flags:   [ ] empty_basic_get_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:44.701262+00:00 [info] <0.222.0> Feature flags:   [ ] implicit_default_bindings\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:44.701299+00:00 [info] <0.222.0> Feature flags:   [ ] maintenance_mode_status\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:44.701322+00:00 [info] <0.222.0> Feature flags:   [ ] quorum_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:44.701344+00:00 [info] <0.222.0> Feature flags:   [ ] stream_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:44.701434+00:00 [info] <0.222.0> Feature flags:   [ ] user_limits\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:44.701462+00:00 [info] <0.222.0> Feature flags:   [ ] virtual_host_metadata\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:44.701496+00:00 [info] <0.222.0> Feature flags: feature flag states written to disk: yes\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:50.936133+00:00 [info] <0.222.0> Running boot step pre_boot defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:50.936297+00:00 [info] <0.222.0> Running boot step rabbit_global_counters defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:50.937039+00:00 [info] <0.222.0> Running boot step rabbit_osiris_metrics defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:50.937479+00:00 [info] <0.222.0> Running boot step rabbit_core_metrics defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:50.938568+00:00 [info] <0.222.0> Running boot step rabbit_alarm defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:50.948138+00:00 [info] <0.291.0> Memory high watermark set to 794 MiB (832879001 bytes) of 1985 MiB (2082197504 bytes) total\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:50.954848+00:00 [info] <0.293.0> Enabling free disk space monitoring\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:50.954932+00:00 [info] <0.293.0> Disk free limit set to 50MB\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:50.958355+00:00 [info] <0.222.0> Running boot step code_server_cache defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:50.958629+00:00 [info] <0.222.0> Running boot step file_handle_cache defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:50.958894+00:00 [info] <0.296.0> Limiting to approx 1048479 file handles (943629 sockets)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:50.959051+00:00 [info] <0.297.0> FHC read buffering: OFF\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:50.959098+00:00 [info] <0.297.0> FHC write buffering: ON\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:50.959850+00:00 [info] <0.222.0> Running boot step worker_pool defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:50.959977+00:00 [info] <0.279.0> Will use 4 processes for default worker pool\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:50.960013+00:00 [info] <0.279.0> Starting worker pool 'worker_pool' with 4 processes in it\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:50.960897+00:00 [info] <0.222.0> Running boot step database defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:50.961449+00:00 [info] <0.222.0> Node database directory at /var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e is empty. Assuming we need to join an existing cluster or initialise from scratch...\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:50.961543+00:00 [info] <0.222.0> Configured peer discovery backend: rabbit_peer_discovery_classic_config\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:50.961714+00:00 [info] <0.222.0> Will try to lock with peer discovery backend rabbit_peer_discovery_classic_config\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:50.961886+00:00 [info] <0.222.0> All discovered existing cluster peers:\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:50.961968+00:00 [info] <0.222.0> Discovered no peer nodes to cluster with. Some discovery backends can filter nodes out based on a readiness criteria. Enabling debug logging might help troubleshoot.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:50.966680+00:00 [noti] <0.44.0> Application mnesia exited with reason: stopped\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.090249+00:00 [info] <0.222.0> Waiting for Mnesia tables for 30000 ms, 9 retries left\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.090434+00:00 [info] <0.222.0> Successfully synced tables from a peer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.105265+00:00 [info] <0.222.0> Waiting for Mnesia tables for 30000 ms, 9 retries left\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.105497+00:00 [info] <0.222.0> Successfully synced tables from a peer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.105861+00:00 [info] <0.222.0> Feature flag `drop_unroutable_metric`: supported, attempt to enable...\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.106294+00:00 [info] <0.222.0> Feature flag `drop_unroutable_metric`: mark as enabled=state_changing\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.108318+00:00 [info] <0.222.0> Feature flags: list of feature flags found:\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.108399+00:00 [info] <0.222.0> Feature flags:   [~] drop_unroutable_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.108660+00:00 [info] <0.222.0> Feature flags:   [ ] empty_basic_get_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.108709+00:00 [info] <0.222.0> Feature flags:   [ ] implicit_default_bindings\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.108755+00:00 [info] <0.222.0> Feature flags:   [ ] maintenance_mode_status\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.108956+00:00 [info] <0.222.0> Feature flags:   [ ] quorum_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.108989+00:00 [info] <0.222.0> Feature flags:   [ ] stream_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.109017+00:00 [info] <0.222.0> Feature flags:   [ ] user_limits\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.109039+00:00 [info] <0.222.0> Feature flags:   [ ] virtual_host_metadata\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.109132+00:00 [info] <0.222.0> Feature flags: feature flag states written to disk: yes\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.120684+00:00 [info] <0.222.0> Feature flag `drop_unroutable_metric`: mark as enabled=true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.123620+00:00 [info] <0.222.0> Feature flags: list of feature flags found:\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.123732+00:00 [info] <0.222.0> Feature flags:   [x] drop_unroutable_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.123852+00:00 [info] <0.222.0> Feature flags:   [ ] empty_basic_get_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.123921+00:00 [info] <0.222.0> Feature flags:   [ ] implicit_default_bindings\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.123962+00:00 [info] <0.222.0> Feature flags:   [ ] maintenance_mode_status\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.124110+00:00 [info] <0.222.0> Feature flags:   [ ] quorum_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.124244+00:00 [info] <0.222.0> Feature flags:   [ ] stream_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.124358+00:00 [info] <0.222.0> Feature flags:   [ ] user_limits\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.124396+00:00 [info] <0.222.0> Feature flags:   [ ] virtual_host_metadata\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.124611+00:00 [info] <0.222.0> Feature flags: feature flag states written to disk: yes\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.138491+00:00 [info] <0.222.0> Feature flag `empty_basic_get_metric`: supported, attempt to enable...\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.138623+00:00 [info] <0.222.0> Feature flag `empty_basic_get_metric`: mark as enabled=state_changing\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.139804+00:00 [info] <0.222.0> Feature flags: list of feature flags found:\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.139873+00:00 [info] <0.222.0> Feature flags:   [x] drop_unroutable_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.140174+00:00 [info] <0.222.0> Feature flags:   [~] empty_basic_get_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.140222+00:00 [info] <0.222.0> Feature flags:   [ ] implicit_default_bindings\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.140285+00:00 [info] <0.222.0> Feature flags:   [ ] maintenance_mode_status\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.140464+00:00 [info] <0.222.0> Feature flags:   [ ] quorum_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.140510+00:00 [info] <0.222.0> Feature flags:   [ ] stream_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.140538+00:00 [info] <0.222.0> Feature flags:   [ ] user_limits\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.140860+00:00 [info] <0.222.0> Feature flags:   [ ] virtual_host_metadata\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.141358+00:00 [info] <0.222.0> Feature flags: feature flag states written to disk: yes\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.153097+00:00 [info] <0.222.0> Feature flag `empty_basic_get_metric`: mark as enabled=true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.158266+00:00 [info] <0.222.0> Feature flags: list of feature flags found:\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.158376+00:00 [info] <0.222.0> Feature flags:   [x] drop_unroutable_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.158420+00:00 [info] <0.222.0> Feature flags:   [x] empty_basic_get_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.158452+00:00 [info] <0.222.0> Feature flags:   [ ] implicit_default_bindings\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.158683+00:00 [info] <0.222.0> Feature flags:   [ ] maintenance_mode_status\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.158728+00:00 [info] <0.222.0> Feature flags:   [ ] quorum_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.158861+00:00 [info] <0.222.0> Feature flags:   [ ] stream_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.158978+00:00 [info] <0.222.0> Feature flags:   [ ] user_limits\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.159109+00:00 [info] <0.222.0> Feature flags:   [ ] virtual_host_metadata\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.159201+00:00 [info] <0.222.0> Feature flags: feature flag states written to disk: yes\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.171482+00:00 [info] <0.222.0> Feature flag `implicit_default_bindings`: supported, attempt to enable...\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.171649+00:00 [info] <0.222.0> Feature flag `implicit_default_bindings`: mark as enabled=state_changing\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.173830+00:00 [info] <0.222.0> Feature flags: list of feature flags found:\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.173964+00:00 [info] <0.222.0> Feature flags:   [x] drop_unroutable_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.174003+00:00 [info] <0.222.0> Feature flags:   [x] empty_basic_get_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.174470+00:00 [info] <0.222.0> Feature flags:   [~] implicit_default_bindings\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.174527+00:00 [info] <0.222.0> Feature flags:   [ ] maintenance_mode_status\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.174955+00:00 [info] <0.222.0> Feature flags:   [ ] quorum_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.174989+00:00 [info] <0.222.0> Feature flags:   [ ] stream_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.175012+00:00 [info] <0.222.0> Feature flags:   [ ] user_limits\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.175243+00:00 [info] <0.222.0> Feature flags:   [ ] virtual_host_metadata\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.175328+00:00 [info] <0.222.0> Feature flags: feature flag states written to disk: yes\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.189326+00:00 [info] <0.222.0> Waiting for Mnesia tables for 30000 ms, 0 retries left\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.189517+00:00 [info] <0.222.0> Successfully synced tables from a peer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.189648+00:00 [info] <0.222.0> Feature flag `implicit_default_bindings`: mark as enabled=true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.202357+00:00 [info] <0.222.0> Feature flags: list of feature flags found:\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.202460+00:00 [info] <0.222.0> Feature flags:   [x] drop_unroutable_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.202496+00:00 [info] <0.222.0> Feature flags:   [x] empty_basic_get_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.202528+00:00 [info] <0.222.0> Feature flags:   [x] implicit_default_bindings\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.202557+00:00 [info] <0.222.0> Feature flags:   [ ] maintenance_mode_status\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.202580+00:00 [info] <0.222.0> Feature flags:   [ ] quorum_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.202617+00:00 [info] <0.222.0> Feature flags:   [ ] stream_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.202801+00:00 [info] <0.222.0> Feature flags:   [ ] user_limits\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.202923+00:00 [info] <0.222.0> Feature flags:   [ ] virtual_host_metadata\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.203045+00:00 [info] <0.222.0> Feature flags: feature flag states written to disk: yes\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.213854+00:00 [info] <0.222.0> Feature flag `maintenance_mode_status`: supported, attempt to enable...\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.213947+00:00 [info] <0.222.0> Feature flag `maintenance_mode_status`: mark as enabled=state_changing\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.215119+00:00 [info] <0.222.0> Feature flags: list of feature flags found:\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.215162+00:00 [info] <0.222.0> Feature flags:   [x] drop_unroutable_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.215211+00:00 [info] <0.222.0> Feature flags:   [x] empty_basic_get_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.215237+00:00 [info] <0.222.0> Feature flags:   [x] implicit_default_bindings\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.215267+00:00 [info] <0.222.0> Feature flags:   [~] maintenance_mode_status\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.215307+00:00 [info] <0.222.0> Feature flags:   [ ] quorum_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.215335+00:00 [info] <0.222.0> Feature flags:   [ ] stream_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.215356+00:00 [info] <0.222.0> Feature flags:   [ ] user_limits\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.215380+00:00 [info] <0.222.0> Feature flags:   [ ] virtual_host_metadata\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.215404+00:00 [info] <0.222.0> Feature flags: feature flag states written to disk: yes\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.224964+00:00 [info] <0.222.0> Creating table rabbit_node_maintenance_states for feature flag `maintenance_mode_status`\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.248831+00:00 [info] <0.222.0> Feature flag `maintenance_mode_status`: mark as enabled=true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.254187+00:00 [info] <0.222.0> Feature flags: list of feature flags found:\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.254254+00:00 [info] <0.222.0> Feature flags:   [x] drop_unroutable_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.254282+00:00 [info] <0.222.0> Feature flags:   [x] empty_basic_get_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.254312+00:00 [info] <0.222.0> Feature flags:   [x] implicit_default_bindings\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.254415+00:00 [info] <0.222.0> Feature flags:   [x] maintenance_mode_status\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.254439+00:00 [info] <0.222.0> Feature flags:   [ ] quorum_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.254474+00:00 [info] <0.222.0> Feature flags:   [ ] stream_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.254594+00:00 [info] <0.222.0> Feature flags:   [ ] user_limits\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.254623+00:00 [info] <0.222.0> Feature flags:   [ ] virtual_host_metadata\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.254649+00:00 [info] <0.222.0> Feature flags: feature flag states written to disk: yes\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.265661+00:00 [info] <0.222.0> Feature flag `quorum_queue`: supported, attempt to enable...\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.265828+00:00 [info] <0.222.0> Feature flag `quorum_queue`: mark as enabled=state_changing\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.267484+00:00 [info] <0.222.0> Feature flags: list of feature flags found:\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.267562+00:00 [info] <0.222.0> Feature flags:   [x] drop_unroutable_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.267757+00:00 [info] <0.222.0> Feature flags:   [x] empty_basic_get_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.267788+00:00 [info] <0.222.0> Feature flags:   [x] implicit_default_bindings\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.268141+00:00 [info] <0.222.0> Feature flags:   [x] maintenance_mode_status\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.268198+00:00 [info] <0.222.0> Feature flags:   [~] quorum_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.268240+00:00 [info] <0.222.0> Feature flags:   [ ] stream_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.268267+00:00 [info] <0.222.0> Feature flags:   [ ] user_limits\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.268475+00:00 [info] <0.222.0> Feature flags:   [ ] virtual_host_metadata\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.268650+00:00 [info] <0.222.0> Feature flags: feature flag states written to disk: yes\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.283673+00:00 [info] <0.222.0> Waiting for Mnesia tables for 30000 ms, 9 retries left\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.283885+00:00 [info] <0.222.0> Successfully synced tables from a peer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.284003+00:00 [info] <0.222.0> Feature flag `quorum_queue`:   migrating Mnesia table rabbit_queue...\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.304529+00:00 [info] <0.222.0> Feature flag `quorum_queue`:   migrating Mnesia table rabbit_durable_queue...\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.319873+00:00 [info] <0.222.0> Feature flag `quorum_queue`:   Mnesia tables migration done\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.319956+00:00 [info] <0.222.0> Feature flag `quorum_queue`: mark as enabled=true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.322668+00:00 [info] <0.222.0> Feature flags: list of feature flags found:\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.322733+00:00 [info] <0.222.0> Feature flags:   [x] drop_unroutable_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.322761+00:00 [info] <0.222.0> Feature flags:   [x] empty_basic_get_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.322791+00:00 [info] <0.222.0> Feature flags:   [x] implicit_default_bindings\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.322890+00:00 [info] <0.222.0> Feature flags:   [x] maintenance_mode_status\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.323054+00:00 [info] <0.222.0> Feature flags:   [x] quorum_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.323102+00:00 [info] <0.222.0> Feature flags:   [ ] stream_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.323318+00:00 [info] <0.222.0> Feature flags:   [ ] user_limits\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.323507+00:00 [info] <0.222.0> Feature flags:   [ ] virtual_host_metadata\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.323703+00:00 [info] <0.222.0> Feature flags: feature flag states written to disk: yes\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.338369+00:00 [info] <0.222.0> Feature flag `stream_queue`: supported, attempt to enable...\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.338641+00:00 [info] <0.222.0> Feature flag `stream_queue`: mark as enabled=state_changing\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.340711+00:00 [info] <0.222.0> Feature flags: list of feature flags found:\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.340833+00:00 [info] <0.222.0> Feature flags:   [x] drop_unroutable_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.340933+00:00 [info] <0.222.0> Feature flags:   [x] empty_basic_get_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.341007+00:00 [info] <0.222.0> Feature flags:   [x] implicit_default_bindings\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.341070+00:00 [info] <0.222.0> Feature flags:   [x] maintenance_mode_status\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.341149+00:00 [info] <0.222.0> Feature flags:   [x] quorum_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.341219+00:00 [info] <0.222.0> Feature flags:   [~] stream_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.341340+00:00 [info] <0.222.0> Feature flags:   [ ] user_limits\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.341482+00:00 [info] <0.222.0> Feature flags:   [ ] virtual_host_metadata\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.341625+00:00 [info] <0.222.0> Feature flags: feature flag states written to disk: yes\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.354410+00:00 [info] <0.222.0> Feature flag `stream_queue`: mark as enabled=true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.358130+00:00 [info] <0.222.0> Feature flags: list of feature flags found:\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.358224+00:00 [info] <0.222.0> Feature flags:   [x] drop_unroutable_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.358258+00:00 [info] <0.222.0> Feature flags:   [x] empty_basic_get_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.358285+00:00 [info] <0.222.0> Feature flags:   [x] implicit_default_bindings\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.358309+00:00 [info] <0.222.0> Feature flags:   [x] maintenance_mode_status\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.358374+00:00 [info] <0.222.0> Feature flags:   [x] quorum_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.358405+00:00 [info] <0.222.0> Feature flags:   [x] stream_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.358427+00:00 [info] <0.222.0> Feature flags:   [ ] user_limits\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.358475+00:00 [info] <0.222.0> Feature flags:   [ ] virtual_host_metadata\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.358635+00:00 [info] <0.222.0> Feature flags: feature flag states written to disk: yes\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.370827+00:00 [info] <0.222.0> Feature flag `user_limits`: supported, attempt to enable...\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.371069+00:00 [info] <0.222.0> Feature flag `user_limits`: mark as enabled=state_changing\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.372559+00:00 [info] <0.222.0> Feature flags: list of feature flags found:\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.372624+00:00 [info] <0.222.0> Feature flags:   [x] drop_unroutable_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.372843+00:00 [info] <0.222.0> Feature flags:   [x] empty_basic_get_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.372888+00:00 [info] <0.222.0> Feature flags:   [x] implicit_default_bindings\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.372932+00:00 [info] <0.222.0> Feature flags:   [x] maintenance_mode_status\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.373225+00:00 [info] <0.222.0> Feature flags:   [x] quorum_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.373267+00:00 [info] <0.222.0> Feature flags:   [x] stream_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.373312+00:00 [info] <0.222.0> Feature flags:   [~] user_limits\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.373350+00:00 [info] <0.222.0> Feature flags:   [ ] virtual_host_metadata\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.373476+00:00 [info] <0.222.0> Feature flags: feature flag states written to disk: yes\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.387401+00:00 [info] <0.222.0> Waiting for Mnesia tables for 30000 ms, 9 retries left\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.387677+00:00 [info] <0.222.0> Successfully synced tables from a peer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.417998+00:00 [info] <0.222.0> Feature flag `user_limits`: mark as enabled=true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.424771+00:00 [info] <0.222.0> Feature flags: list of feature flags found:\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.424871+00:00 [info] <0.222.0> Feature flags:   [x] drop_unroutable_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.424900+00:00 [info] <0.222.0> Feature flags:   [x] empty_basic_get_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.425005+00:00 [info] <0.222.0> Feature flags:   [x] implicit_default_bindings\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.425042+00:00 [info] <0.222.0> Feature flags:   [x] maintenance_mode_status\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.425077+00:00 [info] <0.222.0> Feature flags:   [x] quorum_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.425105+00:00 [info] <0.222.0> Feature flags:   [x] stream_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.425158+00:00 [info] <0.222.0> Feature flags:   [x] user_limits\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.425244+00:00 [info] <0.222.0> Feature flags:   [ ] virtual_host_metadata\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.425545+00:00 [info] <0.222.0> Feature flags: feature flag states written to disk: yes\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.438272+00:00 [info] <0.222.0> Feature flag `virtual_host_metadata`: supported, attempt to enable...\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.438412+00:00 [info] <0.222.0> Feature flag `virtual_host_metadata`: mark as enabled=state_changing\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.440057+00:00 [info] <0.222.0> Feature flags: list of feature flags found:\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.440186+00:00 [info] <0.222.0> Feature flags:   [x] drop_unroutable_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.440255+00:00 [info] <0.222.0> Feature flags:   [x] empty_basic_get_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.440324+00:00 [info] <0.222.0> Feature flags:   [x] implicit_default_bindings\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.440461+00:00 [info] <0.222.0> Feature flags:   [x] maintenance_mode_status\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.440674+00:00 [info] <0.222.0> Feature flags:   [x] quorum_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.440894+00:00 [info] <0.222.0> Feature flags:   [x] stream_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.441103+00:00 [info] <0.222.0> Feature flags:   [x] user_limits\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.441452+00:00 [info] <0.222.0> Feature flags:   [~] virtual_host_metadata\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.441531+00:00 [info] <0.222.0> Feature flags: feature flag states written to disk: yes\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.452413+00:00 [info] <0.222.0> Waiting for Mnesia tables for 30000 ms, 9 retries left\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.452681+00:00 [info] <0.222.0> Successfully synced tables from a peer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.474603+00:00 [info] <0.222.0> Feature flag `virtual_host_metadata`: mark as enabled=true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.477679+00:00 [info] <0.222.0> Feature flags: list of feature flags found:\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.477824+00:00 [info] <0.222.0> Feature flags:   [x] drop_unroutable_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.477860+00:00 [info] <0.222.0> Feature flags:   [x] empty_basic_get_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.477888+00:00 [info] <0.222.0> Feature flags:   [x] implicit_default_bindings\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.477924+00:00 [info] <0.222.0> Feature flags:   [x] maintenance_mode_status\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.477947+00:00 [info] <0.222.0> Feature flags:   [x] quorum_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.478003+00:00 [info] <0.222.0> Feature flags:   [x] stream_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.478037+00:00 [info] <0.222.0> Feature flags:   [x] user_limits\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.478059+00:00 [info] <0.222.0> Feature flags:   [x] virtual_host_metadata\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.478115+00:00 [info] <0.222.0> Feature flags: feature flag states written to disk: yes\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.492046+00:00 [info] <0.222.0> Waiting for Mnesia tables for 30000 ms, 9 retries left\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.492213+00:00 [info] <0.222.0> Successfully synced tables from a peer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.515032+00:00 [info] <0.222.0> Waiting for Mnesia tables for 30000 ms, 9 retries left\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.515282+00:00 [info] <0.222.0> Successfully synced tables from a peer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.515349+00:00 [info] <0.222.0> Peer discovery backend rabbit_peer_discovery_classic_config does not support registration, skipping registration.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.515425+00:00 [info] <0.222.0> Will try to unlock with peer discovery backend rabbit_peer_discovery_classic_config\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.515759+00:00 [info] <0.222.0> Running boot step database_sync defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.515952+00:00 [info] <0.222.0> Running boot step feature_flags defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.516348+00:00 [info] <0.222.0> Running boot step codec_correctness_check defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.516391+00:00 [info] <0.222.0> Running boot step external_infrastructure defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.516430+00:00 [info] <0.222.0> Running boot step rabbit_registry defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.516720+00:00 [info] <0.222.0> Running boot step rabbit_auth_mechanism_cr_demo defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.516948+00:00 [info] <0.222.0> Running boot step rabbit_queue_location_random defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.517066+00:00 [info] <0.222.0> Running boot step rabbit_event defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.517470+00:00 [info] <0.222.0> Running boot step rabbit_auth_mechanism_amqplain defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.517721+00:00 [info] <0.222.0> Running boot step rabbit_auth_mechanism_plain defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.517879+00:00 [info] <0.222.0> Running boot step rabbit_exchange_type_direct defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.518024+00:00 [info] <0.222.0> Running boot step rabbit_exchange_type_fanout defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.518178+00:00 [info] <0.222.0> Running boot step rabbit_exchange_type_headers defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.518326+00:00 [info] <0.222.0> Running boot step rabbit_exchange_type_topic defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.518479+00:00 [info] <0.222.0> Running boot step rabbit_mirror_queue_mode_all defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.518666+00:00 [info] <0.222.0> Running boot step rabbit_mirror_queue_mode_exactly defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.518799+00:00 [info] <0.222.0> Running boot step rabbit_mirror_queue_mode_nodes defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.518973+00:00 [info] <0.222.0> Running boot step rabbit_priority_queue defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.519009+00:00 [info] <0.222.0> Priority queues enabled, real BQ is rabbit_variable_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.519157+00:00 [info] <0.222.0> Running boot step rabbit_queue_location_client_local defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.519297+00:00 [info] <0.222.0> Running boot step rabbit_queue_location_min_masters defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.519416+00:00 [info] <0.222.0> Running boot step kernel_ready defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.519496+00:00 [info] <0.222.0> Running boot step rabbit_sysmon_minder defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.519934+00:00 [info] <0.222.0> Running boot step rabbit_epmd_monitor defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.670439+00:00 [info] <0.558.0> epmd monitor knows us, inter-node communication (distribution) port: 25672\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.670874+00:00 [info] <0.222.0> Running boot step guid_generator defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.674008+00:00 [info] <0.222.0> Running boot step rabbit_node_monitor defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.674602+00:00 [info] <0.562.0> Starting rabbit_node_monitor\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.675100+00:00 [info] <0.222.0> Running boot step delegate_sup defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.677030+00:00 [info] <0.222.0> Running boot step rabbit_memory_monitor defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.678032+00:00 [info] <0.222.0> Running boot step core_initialized defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.678245+00:00 [info] <0.222.0> Running boot step upgrade_queues defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.700558+00:00 [info] <0.222.0> message_store upgrades: 1 to apply\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.700729+00:00 [info] <0.222.0> message_store upgrades: Applying rabbit_variable_queue:move_messages_to_vhost_store\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.700944+00:00 [info] <0.222.0> message_store upgrades: No durable queues found. Skipping message store migration\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.700999+00:00 [info] <0.222.0> message_store upgrades: Removing the old message store data\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.701511+00:00 [info] <0.222.0> message_store upgrades: All upgrades applied successfully\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.714846+00:00 [info] <0.222.0> Running boot step channel_tracking defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.720221+00:00 [info] <0.222.0> Setting up a table for channel tracking on this node: tracked_channel_on_node_rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.726225+00:00 [info] <0.222.0> Setting up a table for channel tracking on this node: tracked_channel_table_per_user_on_node_rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.726825+00:00 [info] <0.222.0> Running boot step rabbit_channel_tracking_handler defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.727103+00:00 [info] <0.222.0> Running boot step connection_tracking defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.732271+00:00 [info] <0.222.0> Setting up a table for connection tracking on this node: tracked_connection_on_node_rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.737226+00:00 [info] <0.222.0> Setting up a table for per-vhost connection counting on this node: tracked_connection_per_vhost_on_node_rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.742118+00:00 [info] <0.222.0> Setting up a table for per-user connection counting on this node: tracked_connection_table_per_user_on_node_rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.742927+00:00 [info] <0.222.0> Running boot step rabbit_connection_tracking_handler defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.743068+00:00 [info] <0.222.0> Running boot step rabbit_exchange_parameters defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.743560+00:00 [info] <0.222.0> Running boot step rabbit_mirror_queue_misc defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.744387+00:00 [info] <0.222.0> Running boot step rabbit_policies defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.745615+00:00 [info] <0.222.0> Running boot step rabbit_policy defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.745846+00:00 [info] <0.222.0> Running boot step rabbit_queue_location_validator defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.746259+00:00 [info] <0.222.0> Running boot step rabbit_quorum_memory_manager defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.746725+00:00 [info] <0.222.0> Running boot step rabbit_stream_coordinator defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.747174+00:00 [info] <0.222.0> Running boot step rabbit_vhost_limit defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.747303+00:00 [info] <0.222.0> Running boot step rabbit_mgmt_reset_handler defined by app rabbitmq_management\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.747610+00:00 [info] <0.222.0> Running boot step rabbit_mgmt_db_handler defined by app rabbitmq_management_agent\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.747702+00:00 [info] <0.222.0> Management plugin: using rates mode 'basic'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.748654+00:00 [info] <0.222.0> Running boot step recovery defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.750196+00:00 [info] <0.222.0> Running boot step empty_db_check defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.750251+00:00 [info] <0.222.0> Will seed default virtual host and user...\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.750384+00:00 [info] <0.222.0> Adding vhost '/' (description: 'Default virtual host', tags: [])\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.770556+00:00 [info] <0.623.0> Making sure data directory '/var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e/msg_stores/vhosts/628WB79CIFDYO9LJI6DKMI09L' for vhost '/' exists\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.774148+00:00 [info] <0.623.0> Setting segment_entry_count for vhost '/' with 0 queues to '2048'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.778909+00:00 [info] <0.623.0> Starting message stores for vhost '/'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.779205+00:00 [info] <0.627.0> Message store \"628WB79CIFDYO9LJI6DKMI09L/msg_store_transient\": using rabbit_msg_store_ets_index to provide index\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.781539+00:00 [info] <0.623.0> Started message store of type transient for vhost '/'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.782103+00:00 [info] <0.631.0> Message store \"628WB79CIFDYO9LJI6DKMI09L/msg_store_persistent\": using rabbit_msg_store_ets_index to provide index\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.783587+00:00 [warn] <0.631.0> Message store \"628WB79CIFDYO9LJI6DKMI09L/msg_store_persistent\": rebuilding indices from scratch\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.785117+00:00 [info] <0.623.0> Started message store of type persistent for vhost '/'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.785382+00:00 [info] <0.623.0> Recovering 0 queues of type rabbit_classic_queue took 10ms\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.785444+00:00 [info] <0.623.0> Recovering 0 queues of type rabbit_quorum_queue took 0ms\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.785522+00:00 [info] <0.623.0> Recovering 0 queues of type rabbit_stream_queue took 0ms\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.790327+00:00 [info] <0.222.0> Created user 'guest'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.792128+00:00 [info] <0.222.0> Successfully set user tags for user 'guest' to [administrator]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.793838+00:00 [info] <0.222.0> Successfully set permissions for 'guest' in virtual host '/' to '.*', '.*', '.*'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.793928+00:00 [info] <0.222.0> Running boot step rabbit_looking_glass defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.793972+00:00 [info] <0.222.0> Running boot step rabbit_core_metrics_gc defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.794480+00:00 [info] <0.222.0> Running boot step background_gc defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.795050+00:00 [info] <0.222.0> Running boot step routing_ready defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.795121+00:00 [info] <0.222.0> Running boot step pre_flight defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.795166+00:00 [info] <0.222.0> Running boot step notify_cluster defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.795199+00:00 [info] <0.222.0> Running boot step networking defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.795544+00:00 [info] <0.222.0> Running boot step definition_import_worker_pool defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.796101+00:00 [info] <0.279.0> Starting worker pool 'definition_import_pool' with 4 processes in it\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.797145+00:00 [info] <0.222.0> Running boot step cluster_name defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.797250+00:00 [info] <0.222.0> Initialising internal cluster ID to 'rabbitmq-cluster-id-8miC8PXPU3UOiOjKd8FKZQ'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.799005+00:00 [info] <0.222.0> Running boot step direct_client defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.799366+00:00 [info] <0.222.0> Running boot step rabbit_management_load_definitions defined by app rabbitmq_management\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.799597+00:00 [info] <0.664.0> Resetting node maintenance status\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.816031+00:00 [info] <0.723.0> Management plugin: HTTP (non-TLS) listener started on port 15672\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.816211+00:00 [info] <0.751.0> Statistics database started.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.816658+00:00 [info] <0.750.0> Starting worker pool 'management_worker_pool' with 3 processes in it\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.828083+00:00 [info] <0.765.0> Prometheus metrics: HTTP (non-TLS) listener started on port 15692\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:51.828270+00:00 [info] <0.664.0> Ready to start client connection listeners\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:52.038895+00:00 [info] <0.809.0> started TCP listener on [::]:5672\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:52.176408+00:00 [info] <0.812.0> accepting AMQP connection <0.812.0> (172.27.0.5:42322 -> 172.27.0.3:5672)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:52.181658+00:00 [info] <0.812.0> connection <0.812.0> (172.27.0.5:42322 -> 172.27.0.3:5672): user 'guest' authenticated and granted access to vhost '/'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:52.205218+00:00 [info] <0.830.0> accepting AMQP connection <0.830.0> (172.27.0.5:42326 -> 172.27.0.3:5672)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:52.209509+00:00 [info] <0.830.0> connection <0.830.0> (172.27.0.5:42326 -> 172.27.0.3:5672): user 'guest' authenticated and granted access to vhost '/'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":" completed with 4 plugins.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:52.251800+00:00 [info] <0.664.0> Server startup complete; 4 plugins started.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:52.251800+00:00 [info] <0.664.0>  * rabbitmq_prometheus\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:52.251800+00:00 [info] <0.664.0>  * rabbitmq_management\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:52.251800+00:00 [info] <0.664.0>  * rabbitmq_web_dispatch\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:52.251800+00:00 [info] <0.664.0>  * rabbitmq_management_agent\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:52.288455+00:00 [info] <0.842.0> accepting AMQP connection <0.842.0> (172.27.0.4:46756 -> 172.27.0.3:5672)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-08 08:25:52.292468+00:00 [info] <0.842.0> connection <0.842.0> (172.27.0.4:46756 -> 172.27.0.3:5672): user 'guest' authenticated and granted access to vhost '/'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:32.019090+00:00 [info] <0.222.0> Feature flags: list of feature flags found:\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:32.064618+00:00 [info] <0.222.0> Feature flags:   [x] implicit_default_bindings\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:32.064731+00:00 [info] <0.222.0> Feature flags:   [x] maintenance_mode_status\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:32.064827+00:00 [info] <0.222.0> Feature flags:   [x] quorum_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:32.064874+00:00 [info] <0.222.0> Feature flags:   [x] stream_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:32.065161+00:00 [info] <0.222.0> Feature flags:   [x] user_limits\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:32.065234+00:00 [info] <0.222.0> Feature flags:   [x] virtual_host_metadata\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:32.065340+00:00 [info] <0.222.0> Feature flags: feature flag states written to disk: yes\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:33.203041+00:00 [noti] <0.44.0> Application syslog exited with reason: stopped\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:33.203163+00:00 [noti] <0.222.0> Logging: switching to configured handler(s); following messages may not be visible in this log output\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:33.246452+00:00 [noti] <0.222.0> Logging: configured log handlers are now ACTIVE\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:41.997435+00:00 [info] <0.222.0> ra: starting system quorum_queues\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:41.997540+00:00 [info] <0.222.0> starting Ra system: quorum_queues in directory: /var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e/quorum/rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:42.003950+00:00 [info] <0.292.0> ra: meta data store initialised for system quorum_queues. 0 record(s) recovered\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:42.004659+00:00 [noti] <0.301.0> WAL: ra_log_wal init, open tbls: ra_log_open_mem_tables, closed tbls: ra_log_closed_mem_tables\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:42.049600+00:00 [info] <0.222.0> ra: starting system coordination\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:42.049681+00:00 [info] <0.222.0> starting Ra system: coordination in directory: /var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e/coordination/rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:42.053842+00:00 [info] <0.352.0> ra: meta data store initialised for system coordination. 0 record(s) recovered\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:42.054134+00:00 [noti] <0.357.0> WAL: ra_coordination_log_wal init, open tbls: ra_coordination_log_open_mem_tables, closed tbls: ra_coordination_log_closed_mem_tables\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:42.077541+00:00 [info] <0.222.0> \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:42.077541+00:00 [info] <0.222.0>  Starting RabbitMQ 3.9.11 on Erlang 24.2 [jit]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:42.077541+00:00 [info] <0.222.0>  Copyright (c) 2007-2021 VMware, Inc. or its affiliates.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:42.077541+00:00 [info] <0.222.0>  Licensed under the MPL 2.0. Website: https://rabbitmq.com\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  ##  ##      RabbitMQ 3.9.11\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  ##  ##\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  ##########  Copyright (c) 2007-2021 VMware, Inc. or its affiliates.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  ######  ##\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  ##########  Licensed under the MPL 2.0. Website: https://rabbitmq.com\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Erlang:      24.2 [jit]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  TLS Library: OpenSSL - OpenSSL 1.1.1m  14 Dec 2021\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Doc guides:  https://rabbitmq.com/documentation.html\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Support:     https://rabbitmq.com/contact.html\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Tutorials:   https://rabbitmq.com/getstarted.html\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Monitoring:  https://rabbitmq.com/monitoring.html\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Logs: /var/log/rabbitmq/rabbit@cc5c74ca7d4e_upgrade.log\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"        <stdout>\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Config file(s): /etc/rabbitmq/conf.d/10-default-guest-user.conf\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Starting broker...2022-02-13 04:27:42.079867+00:00 [info] <0.222.0> \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:42.079867+00:00 [info] <0.222.0>  node           : rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:42.079867+00:00 [info] <0.222.0>  home dir       : /var/lib/rabbitmq\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:42.079867+00:00 [info] <0.222.0>  config file(s) : /etc/rabbitmq/conf.d/10-default-guest-user.conf\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:42.079867+00:00 [info] <0.222.0>  cookie hash    : /c9IfjRdZQiq5EMuXaZaFQ==\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:42.079867+00:00 [info] <0.222.0>  log(s)         : /var/log/rabbitmq/rabbit@cc5c74ca7d4e_upgrade.log\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:42.079867+00:00 [info] <0.222.0>                 : <stdout>\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:42.079867+00:00 [info] <0.222.0>  database dir   : /var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:42.635220+00:00 [info] <0.222.0> Feature flags: list of feature flags found:\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:42.635352+00:00 [info] <0.222.0> Feature flags:   [x] drop_unroutable_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:42.635388+00:00 [info] <0.222.0> Feature flags:   [x] empty_basic_get_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:42.635414+00:00 [info] <0.222.0> Feature flags:   [x] implicit_default_bindings\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:42.635506+00:00 [info] <0.222.0> Feature flags:   [x] maintenance_mode_status\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:42.635533+00:00 [info] <0.222.0> Feature flags:   [x] quorum_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:42.635554+00:00 [info] <0.222.0> Feature flags:   [x] stream_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:42.635590+00:00 [info] <0.222.0> Feature flags:   [x] user_limits\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:42.635727+00:00 [info] <0.222.0> Feature flags:   [x] virtual_host_metadata\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:42.635762+00:00 [info] <0.222.0> Feature flags: feature flag states written to disk: yes\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.144430+00:00 [info] <0.222.0> Running boot step pre_boot defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.144507+00:00 [info] <0.222.0> Running boot step rabbit_global_counters defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.145478+00:00 [info] <0.222.0> Running boot step rabbit_osiris_metrics defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.145738+00:00 [info] <0.222.0> Running boot step rabbit_core_metrics defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.146608+00:00 [info] <0.222.0> Running boot step rabbit_alarm defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.153592+00:00 [info] <0.367.0> Memory high watermark set to 794 MiB (832879001 bytes) of 1985 MiB (2082197504 bytes) total\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.159595+00:00 [info] <0.369.0> Enabling free disk space monitoring\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.159662+00:00 [info] <0.369.0> Disk free limit set to 50MB\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.163920+00:00 [info] <0.222.0> Running boot step code_server_cache defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.164111+00:00 [info] <0.222.0> Running boot step file_handle_cache defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.164628+00:00 [info] <0.372.0> Limiting to approx 1048479 file handles (943629 sockets)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.165431+00:00 [info] <0.373.0> FHC read buffering: OFF\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.165543+00:00 [info] <0.373.0> FHC write buffering: ON\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.167698+00:00 [info] <0.222.0> Running boot step worker_pool defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.167849+00:00 [info] <0.359.0> Will use 4 processes for default worker pool\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.167882+00:00 [info] <0.359.0> Starting worker pool 'worker_pool' with 4 processes in it\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.169113+00:00 [info] <0.222.0> Running boot step database defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.172969+00:00 [info] <0.222.0> Waiting for Mnesia tables for 30000 ms, 9 retries left\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.173575+00:00 [info] <0.222.0> Successfully synced tables from a peer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.173684+00:00 [info] <0.222.0> Waiting for Mnesia tables for 30000 ms, 9 retries left\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.174224+00:00 [info] <0.222.0> Successfully synced tables from a peer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.188630+00:00 [info] <0.222.0> Waiting for Mnesia tables for 30000 ms, 9 retries left\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.188833+00:00 [info] <0.222.0> Successfully synced tables from a peer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.188871+00:00 [info] <0.222.0> Peer discovery backend rabbit_peer_discovery_classic_config does not support registration, skipping registration.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.189003+00:00 [info] <0.222.0> Running boot step database_sync defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.189428+00:00 [info] <0.222.0> Running boot step feature_flags defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.189689+00:00 [info] <0.222.0> Running boot step codec_correctness_check defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.189727+00:00 [info] <0.222.0> Running boot step external_infrastructure defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.189762+00:00 [info] <0.222.0> Running boot step rabbit_registry defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.189999+00:00 [info] <0.222.0> Running boot step rabbit_auth_mechanism_cr_demo defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.190251+00:00 [info] <0.222.0> Running boot step rabbit_queue_location_random defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.190331+00:00 [info] <0.222.0> Running boot step rabbit_event defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.190505+00:00 [info] <0.222.0> Running boot step rabbit_auth_mechanism_amqplain defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.190567+00:00 [info] <0.222.0> Running boot step rabbit_auth_mechanism_plain defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.190789+00:00 [info] <0.222.0> Running boot step rabbit_exchange_type_direct defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.190954+00:00 [info] <0.222.0> Running boot step rabbit_exchange_type_fanout defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.191131+00:00 [info] <0.222.0> Running boot step rabbit_exchange_type_headers defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.191197+00:00 [info] <0.222.0> Running boot step rabbit_exchange_type_topic defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.191279+00:00 [info] <0.222.0> Running boot step rabbit_mirror_queue_mode_all defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.191413+00:00 [info] <0.222.0> Running boot step rabbit_mirror_queue_mode_exactly defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.191526+00:00 [info] <0.222.0> Running boot step rabbit_mirror_queue_mode_nodes defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.191706+00:00 [info] <0.222.0> Running boot step rabbit_priority_queue defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.191757+00:00 [info] <0.222.0> Priority queues enabled, real BQ is rabbit_variable_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.191881+00:00 [info] <0.222.0> Running boot step rabbit_queue_location_client_local defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.191954+00:00 [info] <0.222.0> Running boot step rabbit_queue_location_min_masters defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.192179+00:00 [info] <0.222.0> Running boot step kernel_ready defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.192222+00:00 [info] <0.222.0> Running boot step rabbit_sysmon_minder defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.192677+00:00 [info] <0.222.0> Running boot step rabbit_epmd_monitor defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.194424+00:00 [info] <0.395.0> epmd monitor knows us, inter-node communication (distribution) port: 25672\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.194697+00:00 [info] <0.222.0> Running boot step guid_generator defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.198925+00:00 [info] <0.222.0> Running boot step rabbit_node_monitor defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.199389+00:00 [info] <0.399.0> Starting rabbit_node_monitor\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.199871+00:00 [info] <0.222.0> Running boot step delegate_sup defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.201514+00:00 [info] <0.222.0> Running boot step rabbit_memory_monitor defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.202007+00:00 [info] <0.222.0> Running boot step core_initialized defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.202160+00:00 [info] <0.222.0> Running boot step upgrade_queues defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.216720+00:00 [info] <0.222.0> Running boot step channel_tracking defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.217398+00:00 [info] <0.222.0> Setting up a table for channel tracking on this node: tracked_channel_on_node_rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.217887+00:00 [info] <0.222.0> Setting up a table for channel tracking on this node: tracked_channel_table_per_user_on_node_rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.218489+00:00 [info] <0.222.0> Running boot step rabbit_channel_tracking_handler defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.218681+00:00 [info] <0.222.0> Running boot step connection_tracking defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.218970+00:00 [info] <0.222.0> Setting up a table for connection tracking on this node: tracked_connection_on_node_rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.219477+00:00 [info] <0.222.0> Setting up a table for per-vhost connection counting on this node: tracked_connection_per_vhost_on_node_rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.219874+00:00 [info] <0.222.0> Setting up a table for per-user connection counting on this node: tracked_connection_table_per_user_on_node_rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.220449+00:00 [info] <0.222.0> Running boot step rabbit_connection_tracking_handler defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.220563+00:00 [info] <0.222.0> Running boot step rabbit_exchange_parameters defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.220652+00:00 [info] <0.222.0> Running boot step rabbit_mirror_queue_misc defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.220991+00:00 [info] <0.222.0> Running boot step rabbit_policies defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.221504+00:00 [info] <0.222.0> Running boot step rabbit_policy defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.221627+00:00 [info] <0.222.0> Running boot step rabbit_queue_location_validator defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.221681+00:00 [info] <0.222.0> Running boot step rabbit_quorum_memory_manager defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.221784+00:00 [info] <0.222.0> Running boot step rabbit_stream_coordinator defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.222280+00:00 [info] <0.222.0> Running boot step rabbit_vhost_limit defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.222382+00:00 [info] <0.222.0> Running boot step rabbit_mgmt_reset_handler defined by app rabbitmq_management\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.222477+00:00 [info] <0.222.0> Running boot step rabbit_mgmt_db_handler defined by app rabbitmq_management_agent\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.222526+00:00 [info] <0.222.0> Management plugin: using rates mode 'basic'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.223046+00:00 [info] <0.222.0> Running boot step recovery defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.224914+00:00 [info] <0.437.0> Making sure data directory '/var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e/msg_stores/vhosts/628WB79CIFDYO9LJI6DKMI09L' for vhost '/' exists\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.238985+00:00 [info] <0.437.0> Starting message stores for vhost '/'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.239384+00:00 [info] <0.441.0> Message store \"628WB79CIFDYO9LJI6DKMI09L/msg_store_transient\": using rabbit_msg_store_ets_index to provide index\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.242912+00:00 [info] <0.437.0> Started message store of type transient for vhost '/'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.243291+00:00 [info] <0.445.0> Message store \"628WB79CIFDYO9LJI6DKMI09L/msg_store_persistent\": using rabbit_msg_store_ets_index to provide index\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.244874+00:00 [warn] <0.445.0> Message store \"628WB79CIFDYO9LJI6DKMI09L/msg_store_persistent\": rebuilding indices from scratch\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.247057+00:00 [info] <0.437.0> Started message store of type persistent for vhost '/'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.247378+00:00 [info] <0.437.0> Recovering 0 queues of type rabbit_classic_queue took 20ms\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.247536+00:00 [info] <0.437.0> Recovering 0 queues of type rabbit_quorum_queue took 0ms\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.247929+00:00 [info] <0.437.0> Recovering 0 queues of type rabbit_stream_queue took 0ms\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.251663+00:00 [info] <0.222.0> Running boot step empty_db_check defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.251774+00:00 [info] <0.222.0> Will not seed default virtual host and user: have definitions to load...\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.251852+00:00 [info] <0.222.0> Running boot step rabbit_looking_glass defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.251974+00:00 [info] <0.222.0> Running boot step rabbit_core_metrics_gc defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.252844+00:00 [info] <0.222.0> Running boot step background_gc defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.253329+00:00 [info] <0.222.0> Running boot step routing_ready defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.253410+00:00 [info] <0.222.0> Running boot step pre_flight defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.253443+00:00 [info] <0.222.0> Running boot step notify_cluster defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.253472+00:00 [info] <0.222.0> Running boot step networking defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.253593+00:00 [info] <0.222.0> Running boot step definition_import_worker_pool defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.253713+00:00 [info] <0.359.0> Starting worker pool 'definition_import_pool' with 4 processes in it\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.255438+00:00 [info] <0.222.0> Running boot step cluster_name defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.255547+00:00 [info] <0.222.0> Running boot step direct_client defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.255660+00:00 [info] <0.222.0> Running boot step rabbit_management_load_definitions defined by app rabbitmq_management\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.256099+00:00 [info] <0.475.0> Resetting node maintenance status\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.273153+00:00 [info] <0.534.0> Management plugin: HTTP (non-TLS) listener started on port 15672\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.273329+00:00 [info] <0.562.0> Statistics database started.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.273413+00:00 [info] <0.561.0> Starting worker pool 'management_worker_pool' with 3 processes in it\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.286358+00:00 [info] <0.576.0> Prometheus metrics: HTTP (non-TLS) listener started on port 15692\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.286575+00:00 [info] <0.475.0> Ready to start client connection listeners\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.289549+00:00 [info] <0.620.0> started TCP listener on [::]:5672\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.426659+00:00 [info] <0.475.0> Server startup complete; 4 plugins started.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.426659+00:00 [info] <0.475.0>  * rabbitmq_prometheus\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.426659+00:00 [info] <0.475.0>  * rabbitmq_management\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.426659+00:00 [info] <0.475.0>  * rabbitmq_web_dispatch\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-02-13 04:27:43.426659+00:00 [info] <0.475.0>  * rabbitmq_management_agent\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":" completed with 4 plugins.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-07 14:16:32.117012+00:00 [noti] <0.60.0> SIGTERM received - shutting down\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-07 14:16:32.117012+00:00 [noti] <0.60.0> \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-07 14:16:32.382020+00:00 [warn] <0.526.0> HTTP listener registry could not find context rabbitmq_prometheus_tls\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-07 14:16:32.455938+00:00 [warn] <0.526.0> HTTP listener registry could not find context rabbitmq_management_tls\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-07 14:16:32.521244+00:00 [info] <0.222.0> Peer discovery backend rabbit_peer_discovery_classic_config does not support registration, skipping unregistration.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-07 14:16:32.536963+00:00 [info] <0.620.0> stopped TCP listener on [::]:5672\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-07 14:16:32.553610+00:00 [info] <0.16715.4> Closing all connections in vhost '/' on node 'rabbit@cc5c74ca7d4e' because the vhost is stopping\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-07 14:16:32.561047+00:00 [info] <0.445.0> Stopping message store for directory '/var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e/msg_stores/vhosts/628WB79CIFDYO9LJI6DKMI09L/msg_store_persistent'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-07 14:16:32.632276+00:00 [info] <0.445.0> Message store for directory '/var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e/msg_stores/vhosts/628WB79CIFDYO9LJI6DKMI09L/msg_store_persistent' is stopped\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-07 14:16:32.632820+00:00 [info] <0.441.0> Stopping message store for directory '/var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e/msg_stores/vhosts/628WB79CIFDYO9LJI6DKMI09L/msg_store_transient'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-07 14:16:32.686578+00:00 [info] <0.441.0> Message store for directory '/var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e/msg_stores/vhosts/628WB79CIFDYO9LJI6DKMI09L/msg_store_transient' is stopped\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-07 14:16:32.706928+00:00 [info] <0.391.0> Management plugin: to stop collect_statistics.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:37.500461+00:00 [info] <0.222.0> Feature flags: list of feature flags found:\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:37.520156+00:00 [info] <0.222.0> Feature flags:   [x] implicit_default_bindings\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:37.520212+00:00 [info] <0.222.0> Feature flags:   [x] maintenance_mode_status\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:37.520251+00:00 [info] <0.222.0> Feature flags:   [x] quorum_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:37.520273+00:00 [info] <0.222.0> Feature flags:   [x] stream_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:37.520373+00:00 [info] <0.222.0> Feature flags:   [x] user_limits\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:37.520396+00:00 [info] <0.222.0> Feature flags:   [x] virtual_host_metadata\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:37.520431+00:00 [info] <0.222.0> Feature flags: feature flag states written to disk: yes\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:38.203143+00:00 [noti] <0.44.0> Application syslog exited with reason: stopped\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:38.203266+00:00 [noti] <0.222.0> Logging: switching to configured handler(s); following messages may not be visible in this log output\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:38.228551+00:00 [noti] <0.222.0> Logging: configured log handlers are now ACTIVE\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:46.692961+00:00 [info] <0.222.0> ra: starting system quorum_queues\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:46.693087+00:00 [info] <0.222.0> starting Ra system: quorum_queues in directory: /var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e/quorum/rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:46.699753+00:00 [info] <0.291.0> ra: meta data store initialised for system quorum_queues. 0 record(s) recovered\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:46.700421+00:00 [noti] <0.302.0> WAL: ra_log_wal init, open tbls: ra_log_open_mem_tables, closed tbls: ra_log_closed_mem_tables\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:46.740147+00:00 [info] <0.222.0> ra: starting system coordination\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:46.740235+00:00 [info] <0.222.0> starting Ra system: coordination in directory: /var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e/coordination/rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:46.745359+00:00 [info] <0.336.0> ra: meta data store initialised for system coordination. 0 record(s) recovered\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:46.745598+00:00 [noti] <0.341.0> WAL: ra_coordination_log_wal init, open tbls: ra_coordination_log_open_mem_tables, closed tbls: ra_coordination_log_closed_mem_tables\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:46.767549+00:00 [info] <0.222.0> \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:46.767549+00:00 [info] <0.222.0>  Starting RabbitMQ 3.9.11 on Erlang 24.2 [jit]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:46.767549+00:00 [info] <0.222.0>  Copyright (c) 2007-2021 VMware, Inc. or its affiliates.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:46.767549+00:00 [info] <0.222.0>  Licensed under the MPL 2.0. Website: https://rabbitmq.com\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  ##  ##      RabbitMQ 3.9.11\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  ##  ##\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  ##########  Copyright (c) 2007-2021 VMware, Inc. or its affiliates.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  ######  ##\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  ##########  Licensed under the MPL 2.0. Website: https://rabbitmq.com\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Erlang:      24.2 [jit]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  TLS Library: OpenSSL - OpenSSL 1.1.1m  14 Dec 2021\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Doc guides:  https://rabbitmq.com/documentation.html\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Support:     https://rabbitmq.com/contact.html\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Tutorials:   https://rabbitmq.com/getstarted.html\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Monitoring:  https://rabbitmq.com/monitoring.html\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Logs: /var/log/rabbitmq/rabbit@cc5c74ca7d4e_upgrade.log\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"        <stdout>\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Config file(s): /etc/rabbitmq/conf.d/10-default-guest-user.conf\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Starting broker...2022-03-11 06:19:46.770093+00:00 [info] <0.222.0> \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:46.770093+00:00 [info] <0.222.0>  node           : rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:46.770093+00:00 [info] <0.222.0>  home dir       : /var/lib/rabbitmq\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:46.770093+00:00 [info] <0.222.0>  config file(s) : /etc/rabbitmq/conf.d/10-default-guest-user.conf\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:46.770093+00:00 [info] <0.222.0>  cookie hash    : /c9IfjRdZQiq5EMuXaZaFQ==\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:46.770093+00:00 [info] <0.222.0>  log(s)         : /var/log/rabbitmq/rabbit@cc5c74ca7d4e_upgrade.log\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:46.770093+00:00 [info] <0.222.0>                 : <stdout>\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:46.770093+00:00 [info] <0.222.0>  database dir   : /var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.261357+00:00 [info] <0.222.0> Feature flags: list of feature flags found:\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.261438+00:00 [info] <0.222.0> Feature flags:   [x] drop_unroutable_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.261469+00:00 [info] <0.222.0> Feature flags:   [x] empty_basic_get_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.261493+00:00 [info] <0.222.0> Feature flags:   [x] implicit_default_bindings\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.261562+00:00 [info] <0.222.0> Feature flags:   [x] maintenance_mode_status\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.261588+00:00 [info] <0.222.0> Feature flags:   [x] quorum_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.261609+00:00 [info] <0.222.0> Feature flags:   [x] stream_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.261657+00:00 [info] <0.222.0> Feature flags:   [x] user_limits\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.261818+00:00 [info] <0.222.0> Feature flags:   [x] virtual_host_metadata\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.261857+00:00 [info] <0.222.0> Feature flags: feature flag states written to disk: yes\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.753918+00:00 [info] <0.222.0> Running boot step pre_boot defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.754060+00:00 [info] <0.222.0> Running boot step rabbit_global_counters defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.754385+00:00 [info] <0.222.0> Running boot step rabbit_osiris_metrics defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.754713+00:00 [info] <0.222.0> Running boot step rabbit_core_metrics defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.755504+00:00 [info] <0.222.0> Running boot step rabbit_alarm defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.762012+00:00 [info] <0.351.0> Memory high watermark set to 794 MiB (832879001 bytes) of 1985 MiB (2082197504 bytes) total\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.767630+00:00 [info] <0.353.0> Enabling free disk space monitoring\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.767696+00:00 [info] <0.353.0> Disk free limit set to 50MB\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.771298+00:00 [info] <0.222.0> Running boot step code_server_cache defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.771440+00:00 [info] <0.222.0> Running boot step file_handle_cache defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.771704+00:00 [info] <0.356.0> Limiting to approx 1048479 file handles (943629 sockets)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.771922+00:00 [info] <0.357.0> FHC read buffering: OFF\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.771967+00:00 [info] <0.357.0> FHC write buffering: ON\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.773319+00:00 [info] <0.222.0> Running boot step worker_pool defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.773461+00:00 [info] <0.343.0> Will use 4 processes for default worker pool\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.773493+00:00 [info] <0.343.0> Starting worker pool 'worker_pool' with 4 processes in it\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.774232+00:00 [info] <0.222.0> Running boot step database defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.777387+00:00 [info] <0.222.0> Waiting for Mnesia tables for 30000 ms, 9 retries left\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.778095+00:00 [info] <0.222.0> Successfully synced tables from a peer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.778210+00:00 [info] <0.222.0> Waiting for Mnesia tables for 30000 ms, 9 retries left\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.778388+00:00 [info] <0.222.0> Successfully synced tables from a peer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.790637+00:00 [info] <0.222.0> Waiting for Mnesia tables for 30000 ms, 9 retries left\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.790834+00:00 [info] <0.222.0> Successfully synced tables from a peer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.790870+00:00 [info] <0.222.0> Peer discovery backend rabbit_peer_discovery_classic_config does not support registration, skipping registration.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.791002+00:00 [info] <0.222.0> Running boot step database_sync defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.791153+00:00 [info] <0.222.0> Running boot step feature_flags defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.791384+00:00 [info] <0.222.0> Running boot step codec_correctness_check defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.791419+00:00 [info] <0.222.0> Running boot step external_infrastructure defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.791444+00:00 [info] <0.222.0> Running boot step rabbit_registry defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.791573+00:00 [info] <0.222.0> Running boot step rabbit_auth_mechanism_cr_demo defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.791650+00:00 [info] <0.222.0> Running boot step rabbit_queue_location_random defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.791718+00:00 [info] <0.222.0> Running boot step rabbit_event defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.792141+00:00 [info] <0.222.0> Running boot step rabbit_auth_mechanism_amqplain defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.792444+00:00 [info] <0.222.0> Running boot step rabbit_auth_mechanism_plain defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.792647+00:00 [info] <0.222.0> Running boot step rabbit_exchange_type_direct defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.792740+00:00 [info] <0.222.0> Running boot step rabbit_exchange_type_fanout defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.792885+00:00 [info] <0.222.0> Running boot step rabbit_exchange_type_headers defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.793013+00:00 [info] <0.222.0> Running boot step rabbit_exchange_type_topic defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.793123+00:00 [info] <0.222.0> Running boot step rabbit_mirror_queue_mode_all defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.793212+00:00 [info] <0.222.0> Running boot step rabbit_mirror_queue_mode_exactly defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.793276+00:00 [info] <0.222.0> Running boot step rabbit_mirror_queue_mode_nodes defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.793365+00:00 [info] <0.222.0> Running boot step rabbit_priority_queue defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.793452+00:00 [info] <0.222.0> Priority queues enabled, real BQ is rabbit_variable_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.793626+00:00 [info] <0.222.0> Running boot step rabbit_queue_location_client_local defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.793755+00:00 [info] <0.222.0> Running boot step rabbit_queue_location_min_masters defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.793955+00:00 [info] <0.222.0> Running boot step kernel_ready defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.794041+00:00 [info] <0.222.0> Running boot step rabbit_sysmon_minder defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.794378+00:00 [info] <0.222.0> Running boot step rabbit_epmd_monitor defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.795651+00:00 [info] <0.379.0> epmd monitor knows us, inter-node communication (distribution) port: 25672\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.795805+00:00 [info] <0.222.0> Running boot step guid_generator defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.798681+00:00 [info] <0.222.0> Running boot step rabbit_node_monitor defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.798964+00:00 [info] <0.383.0> Starting rabbit_node_monitor\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.799235+00:00 [info] <0.222.0> Running boot step delegate_sup defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.800384+00:00 [info] <0.222.0> Running boot step rabbit_memory_monitor defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.800741+00:00 [info] <0.222.0> Running boot step core_initialized defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.800776+00:00 [info] <0.222.0> Running boot step upgrade_queues defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.808996+00:00 [info] <0.222.0> Running boot step channel_tracking defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.809367+00:00 [info] <0.222.0> Setting up a table for channel tracking on this node: tracked_channel_on_node_rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.809761+00:00 [info] <0.222.0> Setting up a table for channel tracking on this node: tracked_channel_table_per_user_on_node_rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.810093+00:00 [info] <0.222.0> Running boot step rabbit_channel_tracking_handler defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.810227+00:00 [info] <0.222.0> Running boot step connection_tracking defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.810386+00:00 [info] <0.222.0> Setting up a table for connection tracking on this node: tracked_connection_on_node_rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.810616+00:00 [info] <0.222.0> Setting up a table for per-vhost connection counting on this node: tracked_connection_per_vhost_on_node_rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.810910+00:00 [info] <0.222.0> Setting up a table for per-user connection counting on this node: tracked_connection_table_per_user_on_node_rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.811254+00:00 [info] <0.222.0> Running boot step rabbit_connection_tracking_handler defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.811368+00:00 [info] <0.222.0> Running boot step rabbit_exchange_parameters defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.811496+00:00 [info] <0.222.0> Running boot step rabbit_mirror_queue_misc defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.811928+00:00 [info] <0.222.0> Running boot step rabbit_policies defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.812486+00:00 [info] <0.222.0> Running boot step rabbit_policy defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.812596+00:00 [info] <0.222.0> Running boot step rabbit_queue_location_validator defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.812649+00:00 [info] <0.222.0> Running boot step rabbit_quorum_memory_manager defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.812704+00:00 [info] <0.222.0> Running boot step rabbit_stream_coordinator defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.812971+00:00 [info] <0.222.0> Running boot step rabbit_vhost_limit defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.813205+00:00 [info] <0.222.0> Running boot step rabbit_mgmt_reset_handler defined by app rabbitmq_management\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.813352+00:00 [info] <0.222.0> Running boot step rabbit_mgmt_db_handler defined by app rabbitmq_management_agent\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.813395+00:00 [info] <0.222.0> Management plugin: using rates mode 'basic'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.814282+00:00 [info] <0.222.0> Running boot step recovery defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.815805+00:00 [info] <0.421.0> Making sure data directory '/var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e/msg_stores/vhosts/628WB79CIFDYO9LJI6DKMI09L' for vhost '/' exists\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.820370+00:00 [info] <0.421.0> Starting message stores for vhost '/'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.820581+00:00 [info] <0.425.0> Message store \"628WB79CIFDYO9LJI6DKMI09L/msg_store_transient\": using rabbit_msg_store_ets_index to provide index\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.825446+00:00 [info] <0.421.0> Started message store of type transient for vhost '/'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.825624+00:00 [info] <0.429.0> Message store \"628WB79CIFDYO9LJI6DKMI09L/msg_store_persistent\": using rabbit_msg_store_ets_index to provide index\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.830941+00:00 [info] <0.421.0> Started message store of type persistent for vhost '/'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.831131+00:00 [info] <0.421.0> Recovering 0 queues of type rabbit_classic_queue took 14ms\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.831206+00:00 [info] <0.421.0> Recovering 0 queues of type rabbit_quorum_queue took 0ms\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.831244+00:00 [info] <0.421.0> Recovering 0 queues of type rabbit_stream_queue took 0ms\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.834253+00:00 [info] <0.222.0> Running boot step empty_db_check defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.834338+00:00 [info] <0.222.0> Will not seed default virtual host and user: have definitions to load...\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.834386+00:00 [info] <0.222.0> Running boot step rabbit_looking_glass defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.834418+00:00 [info] <0.222.0> Running boot step rabbit_core_metrics_gc defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.834580+00:00 [info] <0.222.0> Running boot step background_gc defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.834768+00:00 [info] <0.222.0> Running boot step routing_ready defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.834800+00:00 [info] <0.222.0> Running boot step pre_flight defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.834824+00:00 [info] <0.222.0> Running boot step notify_cluster defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.834851+00:00 [info] <0.222.0> Running boot step networking defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.834988+00:00 [info] <0.222.0> Running boot step definition_import_worker_pool defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.835172+00:00 [info] <0.343.0> Starting worker pool 'definition_import_pool' with 4 processes in it\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.835997+00:00 [info] <0.222.0> Running boot step cluster_name defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.836053+00:00 [info] <0.222.0> Running boot step direct_client defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.836191+00:00 [info] <0.222.0> Running boot step rabbit_management_load_definitions defined by app rabbitmq_management\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.836324+00:00 [info] <0.457.0> Resetting node maintenance status\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.852006+00:00 [info] <0.516.0> Management plugin: HTTP (non-TLS) listener started on port 15672\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.852282+00:00 [info] <0.544.0> Statistics database started.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.852534+00:00 [info] <0.543.0> Starting worker pool 'management_worker_pool' with 3 processes in it\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.865235+00:00 [info] <0.558.0> Prometheus metrics: HTTP (non-TLS) listener started on port 15692\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.865390+00:00 [info] <0.457.0> Ready to start client connection listeners\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:47.868290+00:00 [info] <0.602.0> started TCP listener on [::]:5672\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":" completed with 4 plugins.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:48.020295+00:00 [info] <0.457.0> Server startup complete; 4 plugins started.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:48.020295+00:00 [info] <0.457.0>  * rabbitmq_prometheus\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:48.020295+00:00 [info] <0.457.0>  * rabbitmq_management\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:48.020295+00:00 [info] <0.457.0>  * rabbitmq_web_dispatch\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-11 06:19:48.020295+00:00 [info] <0.457.0>  * rabbitmq_management_agent\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:16.253103+00:00 [info] <0.222.0> Feature flags: list of feature flags found:\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:16.281610+00:00 [info] <0.222.0> Feature flags:   [x] implicit_default_bindings\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:16.281661+00:00 [info] <0.222.0> Feature flags:   [x] maintenance_mode_status\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:16.281695+00:00 [info] <0.222.0> Feature flags:   [x] quorum_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:16.281718+00:00 [info] <0.222.0> Feature flags:   [x] stream_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:16.281829+00:00 [info] <0.222.0> Feature flags:   [x] user_limits\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:16.281852+00:00 [info] <0.222.0> Feature flags:   [x] virtual_host_metadata\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:16.281881+00:00 [info] <0.222.0> Feature flags: feature flag states written to disk: yes\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:17.121953+00:00 [noti] <0.44.0> Application syslog exited with reason: stopped\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:17.122070+00:00 [noti] <0.222.0> Logging: switching to configured handler(s); following messages may not be visible in this log output\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:17.156211+00:00 [noti] <0.222.0> Logging: configured log handlers are now ACTIVE\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:23.177997+00:00 [info] <0.222.0> ra: starting system quorum_queues\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:23.178073+00:00 [info] <0.222.0> starting Ra system: quorum_queues in directory: /var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e/quorum/rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:23.184697+00:00 [info] <0.288.0> ra: meta data store initialised for system quorum_queues. 0 record(s) recovered\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:23.185451+00:00 [noti] <0.297.0> WAL: ra_log_wal init, open tbls: ra_log_open_mem_tables, closed tbls: ra_log_closed_mem_tables\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:23.228263+00:00 [info] <0.222.0> ra: starting system coordination\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:23.228386+00:00 [info] <0.222.0> starting Ra system: coordination in directory: /var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e/coordination/rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:23.234206+00:00 [info] <0.335.0> ra: meta data store initialised for system coordination. 0 record(s) recovered\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:23.234869+00:00 [noti] <0.340.0> WAL: ra_coordination_log_wal init, open tbls: ra_coordination_log_open_mem_tables, closed tbls: ra_coordination_log_closed_mem_tables\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:23.258832+00:00 [info] <0.222.0> \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:23.258832+00:00 [info] <0.222.0>  Starting RabbitMQ 3.9.11 on Erlang 24.2 [jit]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:23.258832+00:00 [info] <0.222.0>  Copyright (c) 2007-2021 VMware, Inc. or its affiliates.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:23.258832+00:00 [info] <0.222.0>  Licensed under the MPL 2.0. Website: https://rabbitmq.com\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  ##  ##      RabbitMQ 3.9.11\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  ##  ##\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  ##########  Copyright (c) 2007-2021 VMware, Inc. or its affiliates.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  ######  ##\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  ##########  Licensed under the MPL 2.0. Website: https://rabbitmq.com\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Erlang:      24.2 [jit]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  TLS Library: OpenSSL - OpenSSL 1.1.1m  14 Dec 2021\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Doc guides:  https://rabbitmq.com/documentation.html\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Support:     https://rabbitmq.com/contact.html\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Tutorials:   https://rabbitmq.com/getstarted.html\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Monitoring:  https://rabbitmq.com/monitoring.html\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Logs: /var/log/rabbitmq/rabbit@cc5c74ca7d4e_upgrade.log\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"        <stdout>\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Config file(s): /etc/rabbitmq/conf.d/10-default-guest-user.conf\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Starting broker...2022-03-13 14:29:23.261818+00:00 [info] <0.222.0> \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:23.261818+00:00 [info] <0.222.0>  node           : rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:23.261818+00:00 [info] <0.222.0>  home dir       : /var/lib/rabbitmq\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:23.261818+00:00 [info] <0.222.0>  config file(s) : /etc/rabbitmq/conf.d/10-default-guest-user.conf\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:23.261818+00:00 [info] <0.222.0>  cookie hash    : /c9IfjRdZQiq5EMuXaZaFQ==\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:23.261818+00:00 [info] <0.222.0>  log(s)         : /var/log/rabbitmq/rabbit@cc5c74ca7d4e_upgrade.log\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:23.261818+00:00 [info] <0.222.0>                 : <stdout>\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:23.261818+00:00 [info] <0.222.0>  database dir   : /var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:23.933508+00:00 [info] <0.222.0> Feature flags: list of feature flags found:\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:23.933581+00:00 [info] <0.222.0> Feature flags:   [x] drop_unroutable_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:23.933611+00:00 [info] <0.222.0> Feature flags:   [x] empty_basic_get_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:23.933635+00:00 [info] <0.222.0> Feature flags:   [x] implicit_default_bindings\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:23.933700+00:00 [info] <0.222.0> Feature flags:   [x] maintenance_mode_status\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:23.933725+00:00 [info] <0.222.0> Feature flags:   [x] quorum_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:23.933746+00:00 [info] <0.222.0> Feature flags:   [x] stream_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:23.933793+00:00 [info] <0.222.0> Feature flags:   [x] user_limits\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:23.933889+00:00 [info] <0.222.0> Feature flags:   [x] virtual_host_metadata\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:23.933913+00:00 [info] <0.222.0> Feature flags: feature flag states written to disk: yes\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.477848+00:00 [info] <0.222.0> Running boot step pre_boot defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.477988+00:00 [info] <0.222.0> Running boot step rabbit_global_counters defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.478723+00:00 [info] <0.222.0> Running boot step rabbit_osiris_metrics defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.478932+00:00 [info] <0.222.0> Running boot step rabbit_core_metrics defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.479791+00:00 [info] <0.222.0> Running boot step rabbit_alarm defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.486180+00:00 [info] <0.351.0> Memory high watermark set to 794 MiB (832879001 bytes) of 1985 MiB (2082197504 bytes) total\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.493827+00:00 [info] <0.353.0> Enabling free disk space monitoring\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.493939+00:00 [info] <0.353.0> Disk free limit set to 50MB\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.497986+00:00 [info] <0.222.0> Running boot step code_server_cache defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.498142+00:00 [info] <0.222.0> Running boot step file_handle_cache defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.498529+00:00 [info] <0.356.0> Limiting to approx 1048479 file handles (943629 sockets)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.498688+00:00 [info] <0.357.0> FHC read buffering: OFF\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.498761+00:00 [info] <0.357.0> FHC write buffering: ON\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.499984+00:00 [info] <0.222.0> Running boot step worker_pool defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.500138+00:00 [info] <0.342.0> Will use 4 processes for default worker pool\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.500201+00:00 [info] <0.342.0> Starting worker pool 'worker_pool' with 4 processes in it\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.500926+00:00 [info] <0.222.0> Running boot step database defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.505682+00:00 [info] <0.222.0> Waiting for Mnesia tables for 30000 ms, 9 retries left\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.505921+00:00 [info] <0.222.0> Successfully synced tables from a peer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.506016+00:00 [info] <0.222.0> Waiting for Mnesia tables for 30000 ms, 9 retries left\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.506337+00:00 [info] <0.222.0> Successfully synced tables from a peer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.520873+00:00 [info] <0.222.0> Waiting for Mnesia tables for 30000 ms, 9 retries left\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.521225+00:00 [info] <0.222.0> Successfully synced tables from a peer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.521275+00:00 [info] <0.222.0> Peer discovery backend rabbit_peer_discovery_classic_config does not support registration, skipping registration.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.521418+00:00 [info] <0.222.0> Running boot step database_sync defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.521617+00:00 [info] <0.222.0> Running boot step feature_flags defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.522131+00:00 [info] <0.222.0> Running boot step codec_correctness_check defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.522173+00:00 [info] <0.222.0> Running boot step external_infrastructure defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.522199+00:00 [info] <0.222.0> Running boot step rabbit_registry defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.522378+00:00 [info] <0.222.0> Running boot step rabbit_auth_mechanism_cr_demo defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.522477+00:00 [info] <0.222.0> Running boot step rabbit_queue_location_random defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.522666+00:00 [info] <0.222.0> Running boot step rabbit_event defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.523086+00:00 [info] <0.222.0> Running boot step rabbit_auth_mechanism_amqplain defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.523252+00:00 [info] <0.222.0> Running boot step rabbit_auth_mechanism_plain defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.523331+00:00 [info] <0.222.0> Running boot step rabbit_exchange_type_direct defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.523437+00:00 [info] <0.222.0> Running boot step rabbit_exchange_type_fanout defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.523579+00:00 [info] <0.222.0> Running boot step rabbit_exchange_type_headers defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.523730+00:00 [info] <0.222.0> Running boot step rabbit_exchange_type_topic defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.523829+00:00 [info] <0.222.0> Running boot step rabbit_mirror_queue_mode_all defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.523903+00:00 [info] <0.222.0> Running boot step rabbit_mirror_queue_mode_exactly defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.523992+00:00 [info] <0.222.0> Running boot step rabbit_mirror_queue_mode_nodes defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.524152+00:00 [info] <0.222.0> Running boot step rabbit_priority_queue defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.524195+00:00 [info] <0.222.0> Priority queues enabled, real BQ is rabbit_variable_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.524389+00:00 [info] <0.222.0> Running boot step rabbit_queue_location_client_local defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.524456+00:00 [info] <0.222.0> Running boot step rabbit_queue_location_min_masters defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.524534+00:00 [info] <0.222.0> Running boot step kernel_ready defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.524564+00:00 [info] <0.222.0> Running boot step rabbit_sysmon_minder defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.525010+00:00 [info] <0.222.0> Running boot step rabbit_epmd_monitor defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.526440+00:00 [info] <0.379.0> epmd monitor knows us, inter-node communication (distribution) port: 25672\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.526716+00:00 [info] <0.222.0> Running boot step guid_generator defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.530065+00:00 [info] <0.222.0> Running boot step rabbit_node_monitor defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.530409+00:00 [info] <0.383.0> Starting rabbit_node_monitor\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.530729+00:00 [info] <0.222.0> Running boot step delegate_sup defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.531833+00:00 [info] <0.222.0> Running boot step rabbit_memory_monitor defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.532290+00:00 [info] <0.222.0> Running boot step core_initialized defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.532332+00:00 [info] <0.222.0> Running boot step upgrade_queues defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.542801+00:00 [info] <0.222.0> Running boot step channel_tracking defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.543276+00:00 [info] <0.222.0> Setting up a table for channel tracking on this node: tracked_channel_on_node_rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.543733+00:00 [info] <0.222.0> Setting up a table for channel tracking on this node: tracked_channel_table_per_user_on_node_rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.544114+00:00 [info] <0.222.0> Running boot step rabbit_channel_tracking_handler defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.544276+00:00 [info] <0.222.0> Running boot step connection_tracking defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.544530+00:00 [info] <0.222.0> Setting up a table for connection tracking on this node: tracked_connection_on_node_rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.544807+00:00 [info] <0.222.0> Setting up a table for per-vhost connection counting on this node: tracked_connection_per_vhost_on_node_rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.545168+00:00 [info] <0.222.0> Setting up a table for per-user connection counting on this node: tracked_connection_table_per_user_on_node_rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.545702+00:00 [info] <0.222.0> Running boot step rabbit_connection_tracking_handler defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.545825+00:00 [info] <0.222.0> Running boot step rabbit_exchange_parameters defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.545936+00:00 [info] <0.222.0> Running boot step rabbit_mirror_queue_misc defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.546244+00:00 [info] <0.222.0> Running boot step rabbit_policies defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.546722+00:00 [info] <0.222.0> Running boot step rabbit_policy defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.546821+00:00 [info] <0.222.0> Running boot step rabbit_queue_location_validator defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.546874+00:00 [info] <0.222.0> Running boot step rabbit_quorum_memory_manager defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.546971+00:00 [info] <0.222.0> Running boot step rabbit_stream_coordinator defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.547447+00:00 [info] <0.222.0> Running boot step rabbit_vhost_limit defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.547553+00:00 [info] <0.222.0> Running boot step rabbit_mgmt_reset_handler defined by app rabbitmq_management\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.547678+00:00 [info] <0.222.0> Running boot step rabbit_mgmt_db_handler defined by app rabbitmq_management_agent\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.547755+00:00 [info] <0.222.0> Management plugin: using rates mode 'basic'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.548619+00:00 [info] <0.222.0> Running boot step recovery defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.550769+00:00 [info] <0.421.0> Making sure data directory '/var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e/msg_stores/vhosts/628WB79CIFDYO9LJI6DKMI09L' for vhost '/' exists\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.556599+00:00 [info] <0.421.0> Starting message stores for vhost '/'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.556987+00:00 [info] <0.425.0> Message store \"628WB79CIFDYO9LJI6DKMI09L/msg_store_transient\": using rabbit_msg_store_ets_index to provide index\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.560912+00:00 [info] <0.421.0> Started message store of type transient for vhost '/'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.561154+00:00 [info] <0.429.0> Message store \"628WB79CIFDYO9LJI6DKMI09L/msg_store_persistent\": using rabbit_msg_store_ets_index to provide index\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.562569+00:00 [warn] <0.429.0> Message store \"628WB79CIFDYO9LJI6DKMI09L/msg_store_persistent\": rebuilding indices from scratch\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.564477+00:00 [info] <0.421.0> Started message store of type persistent for vhost '/'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.564648+00:00 [info] <0.421.0> Recovering 0 queues of type rabbit_classic_queue took 12ms\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.564743+00:00 [info] <0.421.0> Recovering 0 queues of type rabbit_quorum_queue took 0ms\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.565076+00:00 [info] <0.421.0> Recovering 0 queues of type rabbit_stream_queue took 0ms\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.568154+00:00 [info] <0.222.0> Running boot step empty_db_check defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.568219+00:00 [info] <0.222.0> Will not seed default virtual host and user: have definitions to load...\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.568313+00:00 [info] <0.222.0> Running boot step rabbit_looking_glass defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.568355+00:00 [info] <0.222.0> Running boot step rabbit_core_metrics_gc defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.569168+00:00 [info] <0.222.0> Running boot step background_gc defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.570168+00:00 [info] <0.222.0> Running boot step routing_ready defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.570216+00:00 [info] <0.222.0> Running boot step pre_flight defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.570295+00:00 [info] <0.222.0> Running boot step notify_cluster defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.570357+00:00 [info] <0.222.0> Running boot step networking defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.570552+00:00 [info] <0.222.0> Running boot step definition_import_worker_pool defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.571484+00:00 [info] <0.342.0> Starting worker pool 'definition_import_pool' with 4 processes in it\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.572993+00:00 [info] <0.222.0> Running boot step cluster_name defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.573096+00:00 [info] <0.222.0> Running boot step direct_client defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.573183+00:00 [info] <0.222.0> Running boot step rabbit_management_load_definitions defined by app rabbitmq_management\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.573834+00:00 [info] <0.458.0> Resetting node maintenance status\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.593432+00:00 [info] <0.517.0> Management plugin: HTTP (non-TLS) listener started on port 15672\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.593845+00:00 [info] <0.545.0> Statistics database started.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.594430+00:00 [info] <0.544.0> Starting worker pool 'management_worker_pool' with 3 processes in it\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.606962+00:00 [info] <0.559.0> Prometheus metrics: HTTP (non-TLS) listener started on port 15692\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.607230+00:00 [info] <0.458.0> Ready to start client connection listeners\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.609688+00:00 [info] <0.603.0> started TCP listener on [::]:5672\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":" completed with 4 plugins.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.765113+00:00 [info] <0.458.0> Server startup complete; 4 plugins started.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.765113+00:00 [info] <0.458.0>  * rabbitmq_prometheus\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.765113+00:00 [info] <0.458.0>  * rabbitmq_management\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.765113+00:00 [info] <0.458.0>  * rabbitmq_web_dispatch\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-13 14:29:24.765113+00:00 [info] <0.458.0>  * rabbitmq_management_agent\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:48.695632+00:00 [info] <0.222.0> Feature flags: list of feature flags found:\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:48.729654+00:00 [info] <0.222.0> Feature flags:   [x] implicit_default_bindings\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:48.729711+00:00 [info] <0.222.0> Feature flags:   [x] maintenance_mode_status\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:48.729753+00:00 [info] <0.222.0> Feature flags:   [x] quorum_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:48.729779+00:00 [info] <0.222.0> Feature flags:   [x] stream_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:48.729907+00:00 [info] <0.222.0> Feature flags:   [x] user_limits\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:48.729933+00:00 [info] <0.222.0> Feature flags:   [x] virtual_host_metadata\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:48.729971+00:00 [info] <0.222.0> Feature flags: feature flag states written to disk: yes\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:49.612461+00:00 [noti] <0.44.0> Application syslog exited with reason: stopped\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:49.612634+00:00 [noti] <0.222.0> Logging: switching to configured handler(s); following messages may not be visible in this log output\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:49.649420+00:00 [noti] <0.222.0> Logging: configured log handlers are now ACTIVE\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:55.597921+00:00 [info] <0.222.0> ra: starting system quorum_queues\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:55.598046+00:00 [info] <0.222.0> starting Ra system: quorum_queues in directory: /var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e/quorum/rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:55.604019+00:00 [info] <0.290.0> ra: meta data store initialised for system quorum_queues. 0 record(s) recovered\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:55.604752+00:00 [noti] <0.300.0> WAL: ra_log_wal init, open tbls: ra_log_open_mem_tables, closed tbls: ra_log_closed_mem_tables\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:55.647349+00:00 [info] <0.222.0> ra: starting system coordination\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:55.647431+00:00 [info] <0.222.0> starting Ra system: coordination in directory: /var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e/coordination/rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:55.654250+00:00 [info] <0.335.0> ra: meta data store initialised for system coordination. 0 record(s) recovered\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:55.654679+00:00 [noti] <0.340.0> WAL: ra_coordination_log_wal init, open tbls: ra_coordination_log_open_mem_tables, closed tbls: ra_coordination_log_closed_mem_tables\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:55.680477+00:00 [info] <0.222.0> \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:55.680477+00:00 [info] <0.222.0>  Starting RabbitMQ 3.9.11 on Erlang 24.2 [jit]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:55.680477+00:00 [info] <0.222.0>  Copyright (c) 2007-2021 VMware, Inc. or its affiliates.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:55.680477+00:00 [info] <0.222.0>  Licensed under the MPL 2.0. Website: https://rabbitmq.com\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  ##  ##      RabbitMQ 3.9.11\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  ##  ##\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  ##########  Copyright (c) 2007-2021 VMware, Inc. or its affiliates.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  ######  ##\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  ##########  Licensed under the MPL 2.0. Website: https://rabbitmq.com\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Erlang:      24.2 [jit]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  TLS Library: OpenSSL - OpenSSL 1.1.1m  14 Dec 2021\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Doc guides:  https://rabbitmq.com/documentation.html\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Support:     https://rabbitmq.com/contact.html\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Tutorials:   https://rabbitmq.com/getstarted.html\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Monitoring:  https://rabbitmq.com/monitoring.html\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Logs: /var/log/rabbitmq/rabbit@cc5c74ca7d4e_upgrade.log\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"        <stdout>\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Config file(s): /etc/rabbitmq/conf.d/10-default-guest-user.conf\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Starting broker...2022-03-14 12:49:55.683614+00:00 [info] <0.222.0> \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:55.683614+00:00 [info] <0.222.0>  node           : rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:55.683614+00:00 [info] <0.222.0>  home dir       : /var/lib/rabbitmq\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:55.683614+00:00 [info] <0.222.0>  config file(s) : /etc/rabbitmq/conf.d/10-default-guest-user.conf\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:55.683614+00:00 [info] <0.222.0>  cookie hash    : /c9IfjRdZQiq5EMuXaZaFQ==\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:55.683614+00:00 [info] <0.222.0>  log(s)         : /var/log/rabbitmq/rabbit@cc5c74ca7d4e_upgrade.log\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:55.683614+00:00 [info] <0.222.0>                 : <stdout>\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:55.683614+00:00 [info] <0.222.0>  database dir   : /var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.183436+00:00 [info] <0.222.0> Feature flags: list of feature flags found:\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.183540+00:00 [info] <0.222.0> Feature flags:   [x] drop_unroutable_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.183572+00:00 [info] <0.222.0> Feature flags:   [x] empty_basic_get_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.183637+00:00 [info] <0.222.0> Feature flags:   [x] implicit_default_bindings\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.183664+00:00 [info] <0.222.0> Feature flags:   [x] maintenance_mode_status\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.183686+00:00 [info] <0.222.0> Feature flags:   [x] quorum_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.183707+00:00 [info] <0.222.0> Feature flags:   [x] stream_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.183788+00:00 [info] <0.222.0> Feature flags:   [x] user_limits\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.183815+00:00 [info] <0.222.0> Feature flags:   [x] virtual_host_metadata\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.183846+00:00 [info] <0.222.0> Feature flags: feature flag states written to disk: yes\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.641023+00:00 [info] <0.222.0> Running boot step pre_boot defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.641098+00:00 [info] <0.222.0> Running boot step rabbit_global_counters defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.641547+00:00 [info] <0.222.0> Running boot step rabbit_osiris_metrics defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.641783+00:00 [info] <0.222.0> Running boot step rabbit_core_metrics defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.642454+00:00 [info] <0.222.0> Running boot step rabbit_alarm defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.648413+00:00 [info] <0.351.0> Memory high watermark set to 794 MiB (832879001 bytes) of 1985 MiB (2082197504 bytes) total\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.653581+00:00 [info] <0.353.0> Enabling free disk space monitoring\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.653648+00:00 [info] <0.353.0> Disk free limit set to 50MB\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.657506+00:00 [info] <0.222.0> Running boot step code_server_cache defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.657652+00:00 [info] <0.222.0> Running boot step file_handle_cache defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.658007+00:00 [info] <0.356.0> Limiting to approx 1048479 file handles (943629 sockets)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.658226+00:00 [info] <0.357.0> FHC read buffering: OFF\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.658292+00:00 [info] <0.357.0> FHC write buffering: ON\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.659797+00:00 [info] <0.222.0> Running boot step worker_pool defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.659910+00:00 [info] <0.342.0> Will use 4 processes for default worker pool\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.659945+00:00 [info] <0.342.0> Starting worker pool 'worker_pool' with 4 processes in it\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.660824+00:00 [info] <0.222.0> Running boot step database defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.663139+00:00 [info] <0.222.0> Waiting for Mnesia tables for 30000 ms, 9 retries left\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.663827+00:00 [info] <0.222.0> Successfully synced tables from a peer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.663901+00:00 [info] <0.222.0> Waiting for Mnesia tables for 30000 ms, 9 retries left\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.664037+00:00 [info] <0.222.0> Successfully synced tables from a peer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.676611+00:00 [info] <0.222.0> Waiting for Mnesia tables for 30000 ms, 9 retries left\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.676801+00:00 [info] <0.222.0> Successfully synced tables from a peer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.676841+00:00 [info] <0.222.0> Peer discovery backend rabbit_peer_discovery_classic_config does not support registration, skipping registration.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.676976+00:00 [info] <0.222.0> Running boot step database_sync defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.677102+00:00 [info] <0.222.0> Running boot step feature_flags defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.677368+00:00 [info] <0.222.0> Running boot step codec_correctness_check defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.677408+00:00 [info] <0.222.0> Running boot step external_infrastructure defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.677433+00:00 [info] <0.222.0> Running boot step rabbit_registry defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.677610+00:00 [info] <0.222.0> Running boot step rabbit_auth_mechanism_cr_demo defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.677723+00:00 [info] <0.222.0> Running boot step rabbit_queue_location_random defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.677805+00:00 [info] <0.222.0> Running boot step rabbit_event defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.678077+00:00 [info] <0.222.0> Running boot step rabbit_auth_mechanism_amqplain defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.678218+00:00 [info] <0.222.0> Running boot step rabbit_auth_mechanism_plain defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.678521+00:00 [info] <0.222.0> Running boot step rabbit_exchange_type_direct defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.678752+00:00 [info] <0.222.0> Running boot step rabbit_exchange_type_fanout defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.678924+00:00 [info] <0.222.0> Running boot step rabbit_exchange_type_headers defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.679070+00:00 [info] <0.222.0> Running boot step rabbit_exchange_type_topic defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.679182+00:00 [info] <0.222.0> Running boot step rabbit_mirror_queue_mode_all defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.679298+00:00 [info] <0.222.0> Running boot step rabbit_mirror_queue_mode_exactly defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.679479+00:00 [info] <0.222.0> Running boot step rabbit_mirror_queue_mode_nodes defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.679587+00:00 [info] <0.222.0> Running boot step rabbit_priority_queue defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.679635+00:00 [info] <0.222.0> Priority queues enabled, real BQ is rabbit_variable_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.679738+00:00 [info] <0.222.0> Running boot step rabbit_queue_location_client_local defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.679803+00:00 [info] <0.222.0> Running boot step rabbit_queue_location_min_masters defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.679919+00:00 [info] <0.222.0> Running boot step kernel_ready defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.679954+00:00 [info] <0.222.0> Running boot step rabbit_sysmon_minder defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.680117+00:00 [info] <0.222.0> Running boot step rabbit_epmd_monitor defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.681518+00:00 [info] <0.379.0> epmd monitor knows us, inter-node communication (distribution) port: 25672\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.681682+00:00 [info] <0.222.0> Running boot step guid_generator defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.684202+00:00 [info] <0.222.0> Running boot step rabbit_node_monitor defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.684564+00:00 [info] <0.383.0> Starting rabbit_node_monitor\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.684832+00:00 [info] <0.222.0> Running boot step delegate_sup defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.686027+00:00 [info] <0.222.0> Running boot step rabbit_memory_monitor defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.686369+00:00 [info] <0.222.0> Running boot step core_initialized defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.686426+00:00 [info] <0.222.0> Running boot step upgrade_queues defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.694980+00:00 [info] <0.222.0> Running boot step channel_tracking defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.695401+00:00 [info] <0.222.0> Setting up a table for channel tracking on this node: tracked_channel_on_node_rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.695692+00:00 [info] <0.222.0> Setting up a table for channel tracking on this node: tracked_channel_table_per_user_on_node_rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.696041+00:00 [info] <0.222.0> Running boot step rabbit_channel_tracking_handler defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.696181+00:00 [info] <0.222.0> Running boot step connection_tracking defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.696647+00:00 [info] <0.222.0> Setting up a table for connection tracking on this node: tracked_connection_on_node_rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.696960+00:00 [info] <0.222.0> Setting up a table for per-vhost connection counting on this node: tracked_connection_per_vhost_on_node_rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.697352+00:00 [info] <0.222.0> Setting up a table for per-user connection counting on this node: tracked_connection_table_per_user_on_node_rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.697838+00:00 [info] <0.222.0> Running boot step rabbit_connection_tracking_handler defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.697955+00:00 [info] <0.222.0> Running boot step rabbit_exchange_parameters defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.698124+00:00 [info] <0.222.0> Running boot step rabbit_mirror_queue_misc defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.698510+00:00 [info] <0.222.0> Running boot step rabbit_policies defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.699003+00:00 [info] <0.222.0> Running boot step rabbit_policy defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.699113+00:00 [info] <0.222.0> Running boot step rabbit_queue_location_validator defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.699222+00:00 [info] <0.222.0> Running boot step rabbit_quorum_memory_manager defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.699356+00:00 [info] <0.222.0> Running boot step rabbit_stream_coordinator defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.699727+00:00 [info] <0.222.0> Running boot step rabbit_vhost_limit defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.699984+00:00 [info] <0.222.0> Running boot step rabbit_mgmt_reset_handler defined by app rabbitmq_management\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.700110+00:00 [info] <0.222.0> Running boot step rabbit_mgmt_db_handler defined by app rabbitmq_management_agent\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.700151+00:00 [info] <0.222.0> Management plugin: using rates mode 'basic'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.700889+00:00 [info] <0.222.0> Running boot step recovery defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.702090+00:00 [info] <0.421.0> Making sure data directory '/var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e/msg_stores/vhosts/628WB79CIFDYO9LJI6DKMI09L' for vhost '/' exists\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.706768+00:00 [info] <0.421.0> Starting message stores for vhost '/'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.707111+00:00 [info] <0.425.0> Message store \"628WB79CIFDYO9LJI6DKMI09L/msg_store_transient\": using rabbit_msg_store_ets_index to provide index\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.714871+00:00 [info] <0.421.0> Started message store of type transient for vhost '/'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.715123+00:00 [info] <0.429.0> Message store \"628WB79CIFDYO9LJI6DKMI09L/msg_store_persistent\": using rabbit_msg_store_ets_index to provide index\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.716181+00:00 [warn] <0.429.0> Message store \"628WB79CIFDYO9LJI6DKMI09L/msg_store_persistent\": rebuilding indices from scratch\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.718255+00:00 [info] <0.421.0> Started message store of type persistent for vhost '/'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.718475+00:00 [info] <0.421.0> Recovering 0 queues of type rabbit_classic_queue took 14ms\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.718553+00:00 [info] <0.421.0> Recovering 0 queues of type rabbit_quorum_queue took 0ms\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.718650+00:00 [info] <0.421.0> Recovering 0 queues of type rabbit_stream_queue took 0ms\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.721222+00:00 [info] <0.222.0> Running boot step empty_db_check defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.721303+00:00 [info] <0.222.0> Will not seed default virtual host and user: have definitions to load...\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.721336+00:00 [info] <0.222.0> Running boot step rabbit_looking_glass defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.721378+00:00 [info] <0.222.0> Running boot step rabbit_core_metrics_gc defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.721556+00:00 [info] <0.222.0> Running boot step background_gc defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.721745+00:00 [info] <0.222.0> Running boot step routing_ready defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.721858+00:00 [info] <0.222.0> Running boot step pre_flight defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.721931+00:00 [info] <0.222.0> Running boot step notify_cluster defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.722001+00:00 [info] <0.222.0> Running boot step networking defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.722126+00:00 [info] <0.222.0> Running boot step definition_import_worker_pool defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.722194+00:00 [info] <0.342.0> Starting worker pool 'definition_import_pool' with 4 processes in it\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.723624+00:00 [info] <0.222.0> Running boot step cluster_name defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.723710+00:00 [info] <0.222.0> Running boot step direct_client defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.723799+00:00 [info] <0.222.0> Running boot step rabbit_management_load_definitions defined by app rabbitmq_management\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.723975+00:00 [info] <0.458.0> Resetting node maintenance status\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.740679+00:00 [info] <0.517.0> Management plugin: HTTP (non-TLS) listener started on port 15672\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.740863+00:00 [info] <0.545.0> Statistics database started.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.740965+00:00 [info] <0.544.0> Starting worker pool 'management_worker_pool' with 3 processes in it\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.752976+00:00 [info] <0.559.0> Prometheus metrics: HTTP (non-TLS) listener started on port 15692\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.753176+00:00 [info] <0.458.0> Ready to start client connection listeners\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.755811+00:00 [info] <0.603.0> started TCP listener on [::]:5672\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":" completed with 4 plugins.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.891928+00:00 [info] <0.458.0> Server startup complete; 4 plugins started.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.891928+00:00 [info] <0.458.0>  * rabbitmq_prometheus\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.891928+00:00 [info] <0.458.0>  * rabbitmq_management\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.891928+00:00 [info] <0.458.0>  * rabbitmq_web_dispatch\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 12:49:56.891928+00:00 [info] <0.458.0>  * rabbitmq_management_agent\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 15:37:14.068115+00:00 [noti] <0.60.0> SIGTERM received - shutting down\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 15:37:14.068115+00:00 [noti] <0.60.0> \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 15:37:14.073315+00:00 [warn] <0.509.0> HTTP listener registry could not find context rabbitmq_prometheus_tls\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 15:37:14.079974+00:00 [warn] <0.509.0> HTTP listener registry could not find context rabbitmq_management_tls\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 15:37:14.098814+00:00 [info] <0.222.0> Peer discovery backend rabbit_peer_discovery_classic_config does not support registration, skipping unregistration.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 15:37:14.099233+00:00 [info] <0.603.0> stopped TCP listener on [::]:5672\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 15:37:14.101695+00:00 [info] <0.4755.0> Closing all connections in vhost '/' on node 'rabbit@cc5c74ca7d4e' because the vhost is stopping\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 15:37:14.101935+00:00 [info] <0.429.0> Stopping message store for directory '/var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e/msg_stores/vhosts/628WB79CIFDYO9LJI6DKMI09L/msg_store_persistent'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 15:37:14.109227+00:00 [info] <0.429.0> Message store for directory '/var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e/msg_stores/vhosts/628WB79CIFDYO9LJI6DKMI09L/msg_store_persistent' is stopped\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 15:37:14.109606+00:00 [info] <0.425.0> Stopping message store for directory '/var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e/msg_stores/vhosts/628WB79CIFDYO9LJI6DKMI09L/msg_store_transient'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 15:37:14.115495+00:00 [info] <0.425.0> Message store for directory '/var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e/msg_stores/vhosts/628WB79CIFDYO9LJI6DKMI09L/msg_store_transient' is stopped\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 15:37:14.117877+00:00 [info] <0.375.0> Management plugin: to stop collect_statistics.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:44:53.961516+00:00 [info] <0.222.0> Feature flags: list of feature flags found:\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:44:53.999872+00:00 [info] <0.222.0> Feature flags:   [x] implicit_default_bindings\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:44:53.999926+00:00 [info] <0.222.0> Feature flags:   [x] maintenance_mode_status\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:44:53.999963+00:00 [info] <0.222.0> Feature flags:   [x] quorum_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:44:53.999985+00:00 [info] <0.222.0> Feature flags:   [x] stream_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:44:54.000178+00:00 [info] <0.222.0> Feature flags:   [x] user_limits\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:44:54.000222+00:00 [info] <0.222.0> Feature flags:   [x] virtual_host_metadata\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:44:54.000263+00:00 [info] <0.222.0> Feature flags: feature flag states written to disk: yes\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:44:54.857642+00:00 [noti] <0.44.0> Application syslog exited with reason: stopped\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:44:54.857766+00:00 [noti] <0.222.0> Logging: switching to configured handler(s); following messages may not be visible in this log output\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:44:54.894752+00:00 [noti] <0.222.0> Logging: configured log handlers are now ACTIVE\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:01.974744+00:00 [info] <0.222.0> ra: starting system quorum_queues\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:01.974896+00:00 [info] <0.222.0> starting Ra system: quorum_queues in directory: /var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e/quorum/rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:01.980317+00:00 [info] <0.291.0> ra: meta data store initialised for system quorum_queues. 0 record(s) recovered\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:01.981005+00:00 [noti] <0.301.0> WAL: ra_log_wal init, open tbls: ra_log_open_mem_tables, closed tbls: ra_log_closed_mem_tables\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:02.021186+00:00 [info] <0.222.0> ra: starting system coordination\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:02.021284+00:00 [info] <0.222.0> starting Ra system: coordination in directory: /var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e/coordination/rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:02.026718+00:00 [info] <0.336.0> ra: meta data store initialised for system coordination. 0 record(s) recovered\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:02.027064+00:00 [noti] <0.341.0> WAL: ra_coordination_log_wal init, open tbls: ra_coordination_log_open_mem_tables, closed tbls: ra_coordination_log_closed_mem_tables\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:02.048925+00:00 [info] <0.222.0> \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:02.048925+00:00 [info] <0.222.0>  Starting RabbitMQ 3.9.11 on Erlang 24.2 [jit]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:02.048925+00:00 [info] <0.222.0>  Copyright (c) 2007-2021 VMware, Inc. or its affiliates.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:02.048925+00:00 [info] <0.222.0>  Licensed under the MPL 2.0. Website: https://rabbitmq.com\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  ##  ##      RabbitMQ 3.9.11\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  ##  ##\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  ##########  Copyright (c) 2007-2021 VMware, Inc. or its affiliates.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  ######  ##\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  ##########  Licensed under the MPL 2.0. Website: https://rabbitmq.com\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Erlang:      24.2 [jit]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  TLS Library: OpenSSL - OpenSSL 1.1.1m  14 Dec 2021\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Doc guides:  https://rabbitmq.com/documentation.html\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Support:     https://rabbitmq.com/contact.html\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Tutorials:   https://rabbitmq.com/getstarted.html\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Monitoring:  https://rabbitmq.com/monitoring.html\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Logs: /var/log/rabbitmq/rabbit@cc5c74ca7d4e_upgrade.log\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"        <stdout>\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Config file(s): /etc/rabbitmq/conf.d/10-default-guest-user.conf\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Starting broker...2022-03-16 01:45:02.051740+00:00 [info] <0.222.0> \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:02.051740+00:00 [info] <0.222.0>  node           : rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:02.051740+00:00 [info] <0.222.0>  home dir       : /var/lib/rabbitmq\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:02.051740+00:00 [info] <0.222.0>  config file(s) : /etc/rabbitmq/conf.d/10-default-guest-user.conf\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:02.051740+00:00 [info] <0.222.0>  cookie hash    : /c9IfjRdZQiq5EMuXaZaFQ==\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:02.051740+00:00 [info] <0.222.0>  log(s)         : /var/log/rabbitmq/rabbit@cc5c74ca7d4e_upgrade.log\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:02.051740+00:00 [info] <0.222.0>                 : <stdout>\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:02.051740+00:00 [info] <0.222.0>  database dir   : /var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:02.611938+00:00 [info] <0.222.0> Feature flags: list of feature flags found:\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:02.612011+00:00 [info] <0.222.0> Feature flags:   [x] drop_unroutable_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:02.612043+00:00 [info] <0.222.0> Feature flags:   [x] empty_basic_get_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:02.612067+00:00 [info] <0.222.0> Feature flags:   [x] implicit_default_bindings\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:02.612144+00:00 [info] <0.222.0> Feature flags:   [x] maintenance_mode_status\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:02.612170+00:00 [info] <0.222.0> Feature flags:   [x] quorum_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:02.612191+00:00 [info] <0.222.0> Feature flags:   [x] stream_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:02.612236+00:00 [info] <0.222.0> Feature flags:   [x] user_limits\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:02.612334+00:00 [info] <0.222.0> Feature flags:   [x] virtual_host_metadata\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:02.612358+00:00 [info] <0.222.0> Feature flags: feature flag states written to disk: yes\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.079568+00:00 [info] <0.222.0> Running boot step pre_boot defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.079643+00:00 [info] <0.222.0> Running boot step rabbit_global_counters defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.080037+00:00 [info] <0.222.0> Running boot step rabbit_osiris_metrics defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.080298+00:00 [info] <0.222.0> Running boot step rabbit_core_metrics defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.080999+00:00 [info] <0.222.0> Running boot step rabbit_alarm defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.087051+00:00 [info] <0.351.0> Memory high watermark set to 794 MiB (832879001 bytes) of 1985 MiB (2082197504 bytes) total\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.091977+00:00 [info] <0.353.0> Enabling free disk space monitoring\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.092026+00:00 [info] <0.353.0> Disk free limit set to 50MB\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.095539+00:00 [info] <0.222.0> Running boot step code_server_cache defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.095650+00:00 [info] <0.222.0> Running boot step file_handle_cache defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.096040+00:00 [info] <0.356.0> Limiting to approx 1048479 file handles (943629 sockets)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.096388+00:00 [info] <0.357.0> FHC read buffering: OFF\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.096432+00:00 [info] <0.357.0> FHC write buffering: ON\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.097855+00:00 [info] <0.222.0> Running boot step worker_pool defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.098009+00:00 [info] <0.343.0> Will use 4 processes for default worker pool\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.098043+00:00 [info] <0.343.0> Starting worker pool 'worker_pool' with 4 processes in it\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.098968+00:00 [info] <0.222.0> Running boot step database defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.101742+00:00 [info] <0.222.0> Waiting for Mnesia tables for 30000 ms, 9 retries left\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.102375+00:00 [info] <0.222.0> Successfully synced tables from a peer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.102440+00:00 [info] <0.222.0> Waiting for Mnesia tables for 30000 ms, 9 retries left\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.102604+00:00 [info] <0.222.0> Successfully synced tables from a peer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.114986+00:00 [info] <0.222.0> Waiting for Mnesia tables for 30000 ms, 9 retries left\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.115156+00:00 [info] <0.222.0> Successfully synced tables from a peer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.115194+00:00 [info] <0.222.0> Peer discovery backend rabbit_peer_discovery_classic_config does not support registration, skipping registration.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.115331+00:00 [info] <0.222.0> Running boot step database_sync defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.115428+00:00 [info] <0.222.0> Running boot step feature_flags defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.115715+00:00 [info] <0.222.0> Running boot step codec_correctness_check defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.115818+00:00 [info] <0.222.0> Running boot step external_infrastructure defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.115849+00:00 [info] <0.222.0> Running boot step rabbit_registry defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.116045+00:00 [info] <0.222.0> Running boot step rabbit_auth_mechanism_cr_demo defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.116167+00:00 [info] <0.222.0> Running boot step rabbit_queue_location_random defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.116278+00:00 [info] <0.222.0> Running boot step rabbit_event defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.116576+00:00 [info] <0.222.0> Running boot step rabbit_auth_mechanism_amqplain defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.116773+00:00 [info] <0.222.0> Running boot step rabbit_auth_mechanism_plain defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.116944+00:00 [info] <0.222.0> Running boot step rabbit_exchange_type_direct defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.117050+00:00 [info] <0.222.0> Running boot step rabbit_exchange_type_fanout defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.117147+00:00 [info] <0.222.0> Running boot step rabbit_exchange_type_headers defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.117242+00:00 [info] <0.222.0> Running boot step rabbit_exchange_type_topic defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.117317+00:00 [info] <0.222.0> Running boot step rabbit_mirror_queue_mode_all defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.117396+00:00 [info] <0.222.0> Running boot step rabbit_mirror_queue_mode_exactly defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.117510+00:00 [info] <0.222.0> Running boot step rabbit_mirror_queue_mode_nodes defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.117601+00:00 [info] <0.222.0> Running boot step rabbit_priority_queue defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.117690+00:00 [info] <0.222.0> Priority queues enabled, real BQ is rabbit_variable_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.117941+00:00 [info] <0.222.0> Running boot step rabbit_queue_location_client_local defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.118166+00:00 [info] <0.222.0> Running boot step rabbit_queue_location_min_masters defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.118373+00:00 [info] <0.222.0> Running boot step kernel_ready defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.118406+00:00 [info] <0.222.0> Running boot step rabbit_sysmon_minder defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.118633+00:00 [info] <0.222.0> Running boot step rabbit_epmd_monitor defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.119608+00:00 [info] <0.379.0> epmd monitor knows us, inter-node communication (distribution) port: 25672\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.119739+00:00 [info] <0.222.0> Running boot step guid_generator defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.122911+00:00 [info] <0.222.0> Running boot step rabbit_node_monitor defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.123117+00:00 [info] <0.383.0> Starting rabbit_node_monitor\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.123264+00:00 [info] <0.222.0> Running boot step delegate_sup defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.124165+00:00 [info] <0.222.0> Running boot step rabbit_memory_monitor defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.124463+00:00 [info] <0.222.0> Running boot step core_initialized defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.124542+00:00 [info] <0.222.0> Running boot step upgrade_queues defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.133492+00:00 [info] <0.222.0> Running boot step channel_tracking defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.134045+00:00 [info] <0.222.0> Setting up a table for channel tracking on this node: tracked_channel_on_node_rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.134508+00:00 [info] <0.222.0> Setting up a table for channel tracking on this node: tracked_channel_table_per_user_on_node_rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.134855+00:00 [info] <0.222.0> Running boot step rabbit_channel_tracking_handler defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.134916+00:00 [info] <0.222.0> Running boot step connection_tracking defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.135077+00:00 [info] <0.222.0> Setting up a table for connection tracking on this node: tracked_connection_on_node_rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.135365+00:00 [info] <0.222.0> Setting up a table for per-vhost connection counting on this node: tracked_connection_per_vhost_on_node_rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.135835+00:00 [info] <0.222.0> Setting up a table for per-user connection counting on this node: tracked_connection_table_per_user_on_node_rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.136440+00:00 [info] <0.222.0> Running boot step rabbit_connection_tracking_handler defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.136538+00:00 [info] <0.222.0> Running boot step rabbit_exchange_parameters defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.136617+00:00 [info] <0.222.0> Running boot step rabbit_mirror_queue_misc defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.136971+00:00 [info] <0.222.0> Running boot step rabbit_policies defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.137773+00:00 [info] <0.222.0> Running boot step rabbit_policy defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.137886+00:00 [info] <0.222.0> Running boot step rabbit_queue_location_validator defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.137942+00:00 [info] <0.222.0> Running boot step rabbit_quorum_memory_manager defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.138030+00:00 [info] <0.222.0> Running boot step rabbit_stream_coordinator defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.138292+00:00 [info] <0.222.0> Running boot step rabbit_vhost_limit defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.138533+00:00 [info] <0.222.0> Running boot step rabbit_mgmt_reset_handler defined by app rabbitmq_management\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.138760+00:00 [info] <0.222.0> Running boot step rabbit_mgmt_db_handler defined by app rabbitmq_management_agent\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.138803+00:00 [info] <0.222.0> Management plugin: using rates mode 'basic'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.139498+00:00 [info] <0.222.0> Running boot step recovery defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.140690+00:00 [info] <0.421.0> Making sure data directory '/var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e/msg_stores/vhosts/628WB79CIFDYO9LJI6DKMI09L' for vhost '/' exists\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.145473+00:00 [info] <0.421.0> Starting message stores for vhost '/'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.145679+00:00 [info] <0.425.0> Message store \"628WB79CIFDYO9LJI6DKMI09L/msg_store_transient\": using rabbit_msg_store_ets_index to provide index\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.150392+00:00 [info] <0.421.0> Started message store of type transient for vhost '/'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.150565+00:00 [info] <0.429.0> Message store \"628WB79CIFDYO9LJI6DKMI09L/msg_store_persistent\": using rabbit_msg_store_ets_index to provide index\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.156030+00:00 [info] <0.421.0> Started message store of type persistent for vhost '/'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.156263+00:00 [info] <0.421.0> Recovering 0 queues of type rabbit_classic_queue took 14ms\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.156307+00:00 [info] <0.421.0> Recovering 0 queues of type rabbit_quorum_queue took 0ms\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.156340+00:00 [info] <0.421.0> Recovering 0 queues of type rabbit_stream_queue took 0ms\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.159160+00:00 [info] <0.222.0> Running boot step empty_db_check defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.159217+00:00 [info] <0.222.0> Will not seed default virtual host and user: have definitions to load...\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.159259+00:00 [info] <0.222.0> Running boot step rabbit_looking_glass defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.159289+00:00 [info] <0.222.0> Running boot step rabbit_core_metrics_gc defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.159639+00:00 [info] <0.222.0> Running boot step background_gc defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.159854+00:00 [info] <0.222.0> Running boot step routing_ready defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.159908+00:00 [info] <0.222.0> Running boot step pre_flight defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.159938+00:00 [info] <0.222.0> Running boot step notify_cluster defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.159988+00:00 [info] <0.222.0> Running boot step networking defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.160176+00:00 [info] <0.222.0> Running boot step definition_import_worker_pool defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.160264+00:00 [info] <0.343.0> Starting worker pool 'definition_import_pool' with 4 processes in it\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.161247+00:00 [info] <0.222.0> Running boot step cluster_name defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.161296+00:00 [info] <0.222.0> Running boot step direct_client defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.161625+00:00 [info] <0.222.0> Running boot step rabbit_management_load_definitions defined by app rabbitmq_management\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.161940+00:00 [info] <0.457.0> Resetting node maintenance status\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.179918+00:00 [info] <0.516.0> Management plugin: HTTP (non-TLS) listener started on port 15672\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.180171+00:00 [info] <0.544.0> Statistics database started.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.180311+00:00 [info] <0.543.0> Starting worker pool 'management_worker_pool' with 3 processes in it\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.194191+00:00 [info] <0.558.0> Prometheus metrics: HTTP (non-TLS) listener started on port 15692\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.194412+00:00 [info] <0.457.0> Ready to start client connection listeners\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.196695+00:00 [info] <0.602.0> started TCP listener on [::]:5672\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":" completed with 4 plugins.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.359355+00:00 [info] <0.457.0> Server startup complete; 4 plugins started.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.359355+00:00 [info] <0.457.0>  * rabbitmq_prometheus\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.359355+00:00 [info] <0.457.0>  * rabbitmq_management\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.359355+00:00 [info] <0.457.0>  * rabbitmq_web_dispatch\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 01:45:03.359355+00:00 [info] <0.457.0>  * rabbitmq_management_agent\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 07:53:20.138520+00:00 [noti] <0.60.0> SIGTERM received - shutting down\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 07:53:20.138520+00:00 [noti] <0.60.0> \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 07:53:20.141917+00:00 [warn] <0.508.0> HTTP listener registry could not find context rabbitmq_prometheus_tls\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 07:53:20.149141+00:00 [warn] <0.508.0> HTTP listener registry could not find context rabbitmq_management_tls\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 07:53:20.164849+00:00 [info] <0.222.0> Peer discovery backend rabbit_peer_discovery_classic_config does not support registration, skipping unregistration.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 07:53:20.165144+00:00 [info] <0.602.0> stopped TCP listener on [::]:5672\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 07:53:20.170751+00:00 [info] <0.9533.0> Closing all connections in vhost '/' on node 'rabbit@cc5c74ca7d4e' because the vhost is stopping\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 07:53:20.171112+00:00 [info] <0.429.0> Stopping message store for directory '/var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e/msg_stores/vhosts/628WB79CIFDYO9LJI6DKMI09L/msg_store_persistent'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 07:53:20.177529+00:00 [info] <0.429.0> Message store for directory '/var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e/msg_stores/vhosts/628WB79CIFDYO9LJI6DKMI09L/msg_store_persistent' is stopped\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 07:53:20.177886+00:00 [info] <0.425.0> Stopping message store for directory '/var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e/msg_stores/vhosts/628WB79CIFDYO9LJI6DKMI09L/msg_store_transient'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 07:53:20.183303+00:00 [info] <0.425.0> Message store for directory '/var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e/msg_stores/vhosts/628WB79CIFDYO9LJI6DKMI09L/msg_store_transient' is stopped\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-16 07:53:20.185198+00:00 [info] <0.375.0> Management plugin: to stop collect_statistics.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:04.492093+00:00 [info] <0.222.0> Feature flags: list of feature flags found:\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:04.529778+00:00 [info] <0.222.0> Feature flags:   [x] implicit_default_bindings\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:04.529830+00:00 [info] <0.222.0> Feature flags:   [x] maintenance_mode_status\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:04.529865+00:00 [info] <0.222.0> Feature flags:   [x] quorum_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:04.529886+00:00 [info] <0.222.0> Feature flags:   [x] stream_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:04.530006+00:00 [info] <0.222.0> Feature flags:   [x] user_limits\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:04.530027+00:00 [info] <0.222.0> Feature flags:   [x] virtual_host_metadata\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:04.530059+00:00 [info] <0.222.0> Feature flags: feature flag states written to disk: yes\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:06.000351+00:00 [noti] <0.44.0> Application syslog exited with reason: stopped\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:06.000465+00:00 [noti] <0.222.0> Logging: switching to configured handler(s); following messages may not be visible in this log output\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:06.054949+00:00 [noti] <0.222.0> Logging: configured log handlers are now ACTIVE\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:18.083448+00:00 [info] <0.222.0> ra: starting system quorum_queues\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:18.083630+00:00 [info] <0.222.0> starting Ra system: quorum_queues in directory: /var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e/quorum/rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:18.091997+00:00 [info] <0.291.0> ra: meta data store initialised for system quorum_queues. 0 record(s) recovered\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:18.092533+00:00 [noti] <0.300.0> WAL: ra_log_wal init, open tbls: ra_log_open_mem_tables, closed tbls: ra_log_closed_mem_tables\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:18.148979+00:00 [info] <0.222.0> ra: starting system coordination\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:18.149070+00:00 [info] <0.222.0> starting Ra system: coordination in directory: /var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e/coordination/rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:18.167706+00:00 [info] <0.338.0> ra: meta data store initialised for system coordination. 0 record(s) recovered\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:18.168198+00:00 [noti] <0.343.0> WAL: ra_coordination_log_wal init, open tbls: ra_coordination_log_open_mem_tables, closed tbls: ra_coordination_log_closed_mem_tables\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:18.208949+00:00 [info] <0.222.0> \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:18.208949+00:00 [info] <0.222.0>  Starting RabbitMQ 3.9.11 on Erlang 24.2 [jit]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:18.208949+00:00 [info] <0.222.0>  Copyright (c) 2007-2021 VMware, Inc. or its affiliates.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:18.208949+00:00 [info] <0.222.0>  Licensed under the MPL 2.0. Website: https://rabbitmq.com\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  ##  ##      RabbitMQ 3.9.11\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  ##  ##\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  ##########  Copyright (c) 2007-2021 VMware, Inc. or its affiliates.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  ######  ##\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  ##########  Licensed under the MPL 2.0. Website: https://rabbitmq.com\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Erlang:      24.2 [jit]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  TLS Library: OpenSSL - OpenSSL 1.1.1m  14 Dec 2021\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Doc guides:  https://rabbitmq.com/documentation.html\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Support:     https://rabbitmq.com/contact.html\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Tutorials:   https://rabbitmq.com/getstarted.html\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Monitoring:  https://rabbitmq.com/monitoring.html\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Logs: /var/log/rabbitmq/rabbit@cc5c74ca7d4e_upgrade.log\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"        <stdout>\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Config file(s): /etc/rabbitmq/conf.d/10-default-guest-user.conf\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  Starting broker...2022-03-19 02:04:18.212882+00:00 [info] <0.222.0> \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:18.212882+00:00 [info] <0.222.0>  node           : rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:18.212882+00:00 [info] <0.222.0>  home dir       : /var/lib/rabbitmq\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:18.212882+00:00 [info] <0.222.0>  config file(s) : /etc/rabbitmq/conf.d/10-default-guest-user.conf\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:18.212882+00:00 [info] <0.222.0>  cookie hash    : /c9IfjRdZQiq5EMuXaZaFQ==\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:18.212882+00:00 [info] <0.222.0>  log(s)         : /var/log/rabbitmq/rabbit@cc5c74ca7d4e_upgrade.log\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:18.212882+00:00 [info] <0.222.0>                 : <stdout>\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:18.212882+00:00 [info] <0.222.0>  database dir   : /var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:19.557989+00:00 [info] <0.222.0> Feature flags: list of feature flags found:\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:19.558104+00:00 [info] <0.222.0> Feature flags:   [x] drop_unroutable_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:19.558176+00:00 [info] <0.222.0> Feature flags:   [x] empty_basic_get_metric\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:19.558235+00:00 [info] <0.222.0> Feature flags:   [x] implicit_default_bindings\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:19.558269+00:00 [info] <0.222.0> Feature flags:   [x] maintenance_mode_status\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:19.558306+00:00 [info] <0.222.0> Feature flags:   [x] quorum_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:19.558339+00:00 [info] <0.222.0> Feature flags:   [x] stream_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:19.558561+00:00 [info] <0.222.0> Feature flags:   [x] user_limits\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:19.558626+00:00 [info] <0.222.0> Feature flags:   [x] virtual_host_metadata\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:19.558875+00:00 [info] <0.222.0> Feature flags: feature flag states written to disk: yes\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.166857+00:00 [info] <0.222.0> Running boot step pre_boot defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.167039+00:00 [info] <0.222.0> Running boot step rabbit_global_counters defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.168533+00:00 [info] <0.222.0> Running boot step rabbit_osiris_metrics defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.168864+00:00 [info] <0.222.0> Running boot step rabbit_core_metrics defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.170137+00:00 [info] <0.222.0> Running boot step rabbit_alarm defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.176544+00:00 [info] <0.354.0> Memory high watermark set to 794 MiB (832879001 bytes) of 1985 MiB (2082197504 bytes) total\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.181425+00:00 [info] <0.356.0> Enabling free disk space monitoring\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.181530+00:00 [info] <0.356.0> Disk free limit set to 50MB\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.185997+00:00 [info] <0.222.0> Running boot step code_server_cache defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.186208+00:00 [info] <0.222.0> Running boot step file_handle_cache defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.186757+00:00 [info] <0.359.0> Limiting to approx 1048479 file handles (943629 sockets)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.187037+00:00 [info] <0.360.0> FHC read buffering: OFF\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.187226+00:00 [info] <0.360.0> FHC write buffering: ON\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.188667+00:00 [info] <0.222.0> Running boot step worker_pool defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.188811+00:00 [info] <0.345.0> Will use 4 processes for default worker pool\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.188849+00:00 [info] <0.345.0> Starting worker pool 'worker_pool' with 4 processes in it\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.189968+00:00 [info] <0.222.0> Running boot step database defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.195755+00:00 [info] <0.222.0> Waiting for Mnesia tables for 30000 ms, 9 retries left\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.196093+00:00 [info] <0.222.0> Successfully synced tables from a peer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.196230+00:00 [info] <0.222.0> Waiting for Mnesia tables for 30000 ms, 9 retries left\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.196552+00:00 [info] <0.222.0> Successfully synced tables from a peer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.211766+00:00 [info] <0.222.0> Waiting for Mnesia tables for 30000 ms, 9 retries left\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.211938+00:00 [info] <0.222.0> Successfully synced tables from a peer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.211978+00:00 [info] <0.222.0> Peer discovery backend rabbit_peer_discovery_classic_config does not support registration, skipping registration.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.212053+00:00 [info] <0.222.0> Running boot step database_sync defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.212439+00:00 [info] <0.222.0> Running boot step feature_flags defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.212907+00:00 [info] <0.222.0> Running boot step codec_correctness_check defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.213110+00:00 [info] <0.222.0> Running boot step external_infrastructure defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.213164+00:00 [info] <0.222.0> Running boot step rabbit_registry defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.213339+00:00 [info] <0.222.0> Running boot step rabbit_auth_mechanism_cr_demo defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.213817+00:00 [info] <0.222.0> Running boot step rabbit_queue_location_random defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.214173+00:00 [info] <0.222.0> Running boot step rabbit_event defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.214705+00:00 [info] <0.222.0> Running boot step rabbit_auth_mechanism_amqplain defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.214804+00:00 [info] <0.222.0> Running boot step rabbit_auth_mechanism_plain defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.215022+00:00 [info] <0.222.0> Running boot step rabbit_exchange_type_direct defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.215231+00:00 [info] <0.222.0> Running boot step rabbit_exchange_type_fanout defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.215314+00:00 [info] <0.222.0> Running boot step rabbit_exchange_type_headers defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.215564+00:00 [info] <0.222.0> Running boot step rabbit_exchange_type_topic defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.215655+00:00 [info] <0.222.0> Running boot step rabbit_mirror_queue_mode_all defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.215820+00:00 [info] <0.222.0> Running boot step rabbit_mirror_queue_mode_exactly defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.216048+00:00 [info] <0.222.0> Running boot step rabbit_mirror_queue_mode_nodes defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.216226+00:00 [info] <0.222.0> Running boot step rabbit_priority_queue defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.216358+00:00 [info] <0.222.0> Priority queues enabled, real BQ is rabbit_variable_queue\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.216567+00:00 [info] <0.222.0> Running boot step rabbit_queue_location_client_local defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.216810+00:00 [info] <0.222.0> Running boot step rabbit_queue_location_min_masters defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.216973+00:00 [info] <0.222.0> Running boot step kernel_ready defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.217104+00:00 [info] <0.222.0> Running boot step rabbit_sysmon_minder defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.217593+00:00 [info] <0.222.0> Running boot step rabbit_epmd_monitor defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.219079+00:00 [info] <0.382.0> epmd monitor knows us, inter-node communication (distribution) port: 25672\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.219263+00:00 [info] <0.222.0> Running boot step guid_generator defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.222263+00:00 [info] <0.222.0> Running boot step rabbit_node_monitor defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.222585+00:00 [info] <0.386.0> Starting rabbit_node_monitor\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.223177+00:00 [info] <0.222.0> Running boot step delegate_sup defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.224696+00:00 [info] <0.222.0> Running boot step rabbit_memory_monitor defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.225592+00:00 [info] <0.222.0> Running boot step core_initialized defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.225678+00:00 [info] <0.222.0> Running boot step upgrade_queues defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.239268+00:00 [info] <0.222.0> Running boot step channel_tracking defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.239648+00:00 [info] <0.222.0> Setting up a table for channel tracking on this node: tracked_channel_on_node_rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.240343+00:00 [info] <0.222.0> Setting up a table for channel tracking on this node: tracked_channel_table_per_user_on_node_rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.241111+00:00 [info] <0.222.0> Running boot step rabbit_channel_tracking_handler defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.241337+00:00 [info] <0.222.0> Running boot step connection_tracking defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.242265+00:00 [info] <0.222.0> Setting up a table for connection tracking on this node: tracked_connection_on_node_rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.242905+00:00 [info] <0.222.0> Setting up a table for per-vhost connection counting on this node: tracked_connection_per_vhost_on_node_rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.243345+00:00 [info] <0.222.0> Setting up a table for per-user connection counting on this node: tracked_connection_table_per_user_on_node_rabbit@cc5c74ca7d4e\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.244212+00:00 [info] <0.222.0> Running boot step rabbit_connection_tracking_handler defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.244301+00:00 [info] <0.222.0> Running boot step rabbit_exchange_parameters defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.244476+00:00 [info] <0.222.0> Running boot step rabbit_mirror_queue_misc defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.245114+00:00 [info] <0.222.0> Running boot step rabbit_policies defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.246669+00:00 [info] <0.222.0> Running boot step rabbit_policy defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.246810+00:00 [info] <0.222.0> Running boot step rabbit_queue_location_validator defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.246925+00:00 [info] <0.222.0> Running boot step rabbit_quorum_memory_manager defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.247193+00:00 [info] <0.222.0> Running boot step rabbit_stream_coordinator defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.247807+00:00 [info] <0.222.0> Running boot step rabbit_vhost_limit defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.248080+00:00 [info] <0.222.0> Running boot step rabbit_mgmt_reset_handler defined by app rabbitmq_management\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.248330+00:00 [info] <0.222.0> Running boot step rabbit_mgmt_db_handler defined by app rabbitmq_management_agent\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.248401+00:00 [info] <0.222.0> Management plugin: using rates mode 'basic'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.249724+00:00 [info] <0.222.0> Running boot step recovery defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.251798+00:00 [info] <0.424.0> Making sure data directory '/var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e/msg_stores/vhosts/628WB79CIFDYO9LJI6DKMI09L' for vhost '/' exists\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.258118+00:00 [info] <0.424.0> Starting message stores for vhost '/'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.258730+00:00 [info] <0.428.0> Message store \"628WB79CIFDYO9LJI6DKMI09L/msg_store_transient\": using rabbit_msg_store_ets_index to provide index\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.262545+00:00 [info] <0.424.0> Started message store of type transient for vhost '/'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.263046+00:00 [info] <0.432.0> Message store \"628WB79CIFDYO9LJI6DKMI09L/msg_store_persistent\": using rabbit_msg_store_ets_index to provide index\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.268983+00:00 [info] <0.424.0> Started message store of type persistent for vhost '/'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.269589+00:00 [info] <0.424.0> Recovering 0 queues of type rabbit_classic_queue took 15ms\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.269668+00:00 [info] <0.424.0> Recovering 0 queues of type rabbit_quorum_queue took 0ms\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.269725+00:00 [info] <0.424.0> Recovering 0 queues of type rabbit_stream_queue took 0ms\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.274910+00:00 [info] <0.222.0> Running boot step empty_db_check defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.274995+00:00 [info] <0.222.0> Will not seed default virtual host and user: have definitions to load...\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.275026+00:00 [info] <0.222.0> Running boot step rabbit_looking_glass defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.275067+00:00 [info] <0.222.0> Running boot step rabbit_core_metrics_gc defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.275312+00:00 [info] <0.222.0> Running boot step background_gc defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.275662+00:00 [info] <0.222.0> Running boot step routing_ready defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.275776+00:00 [info] <0.222.0> Running boot step pre_flight defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.275815+00:00 [info] <0.222.0> Running boot step notify_cluster defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.275860+00:00 [info] <0.222.0> Running boot step networking defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.275952+00:00 [info] <0.222.0> Running boot step definition_import_worker_pool defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.276185+00:00 [info] <0.345.0> Starting worker pool 'definition_import_pool' with 4 processes in it\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.277146+00:00 [info] <0.222.0> Running boot step cluster_name defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.277242+00:00 [info] <0.222.0> Running boot step direct_client defined by app rabbit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.277368+00:00 [info] <0.222.0> Running boot step rabbit_management_load_definitions defined by app rabbitmq_management\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.277669+00:00 [info] <0.460.0> Resetting node maintenance status\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.296842+00:00 [info] <0.519.0> Management plugin: HTTP (non-TLS) listener started on port 15672\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.297304+00:00 [info] <0.547.0> Statistics database started.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.297653+00:00 [info] <0.546.0> Starting worker pool 'management_worker_pool' with 3 processes in it\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.312273+00:00 [info] <0.561.0> Prometheus metrics: HTTP (non-TLS) listener started on port 15692\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.312811+00:00 [info] <0.460.0> Ready to start client connection listeners\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.317268+00:00 [info] <0.605.0> started TCP listener on [::]:5672\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":" completed with 4 plugins.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.489884+00:00 [info] <0.460.0> Server startup complete; 4 plugins started.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.489884+00:00 [info] <0.460.0>  * rabbitmq_prometheus\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.489884+00:00 [info] <0.460.0>  * rabbitmq_management\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.489884+00:00 [info] <0.460.0>  * rabbitmq_web_dispatch\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-19 02:04:20.489884+00:00 [info] <0.460.0>  * rabbitmq_management_agent\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:15:57.995275+00:00 [noti] <0.60.0> SIGTERM received - shutting down\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:15:57.995275+00:00 [noti] <0.60.0> \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:15:58.264259+00:00 [warn] <0.511.0> HTTP listener registry could not find context rabbitmq_prometheus_tls\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:15:58.353561+00:00 [warn] <0.511.0> HTTP listener registry could not find context rabbitmq_management_tls\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:15:58.472934+00:00 [info] <0.222.0> Peer discovery backend rabbit_peer_discovery_classic_config does not support registration, skipping unregistration.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:15:58.532671+00:00 [info] <0.605.0> stopped TCP listener on [::]:5672\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:15:58.570878+00:00 [info] <0.432.0> Stopping message store for directory '/var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e/msg_stores/vhosts/628WB79CIFDYO9LJI6DKMI09L/msg_store_persistent'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:15:58.571804+00:00 [info] <0.4386.4> Closing all connections in vhost '/' on node 'rabbit@cc5c74ca7d4e' because the vhost is stopping\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:15:58.666783+00:00 [info] <0.432.0> Message store for directory '/var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e/msg_stores/vhosts/628WB79CIFDYO9LJI6DKMI09L/msg_store_persistent' is stopped\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:15:58.668912+00:00 [info] <0.428.0> Stopping message store for directory '/var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e/msg_stores/vhosts/628WB79CIFDYO9LJI6DKMI09L/msg_store_transient'\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:15:58.692635+00:00 [info] <0.428.0> Message store for directory '/var/lib/rabbitmq/mnesia/rabbit@cc5c74ca7d4e/msg_stores/vhosts/628WB79CIFDYO9LJI6DKMI09L/msg_store_transient' is stopped\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:15:58.731029+00:00 [info] <0.378.0> Management plugin: to stop collect_statistics.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"SQL Server 2019 will run as non-root by default.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"This container is running as user mssql.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"To learn more visit https://go.microsoft.com/fwlink/?linkid=2099216.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-07 15:30:35.94 Server      Setup step is copying system data file 'C:\\templatedata\\master.mdf' to '/var/opt/mssql/data/master.mdf'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:36.10 Server      Did not find an existing master data file /var/opt/mssql/data/master.mdf, copying the missing default master and other system database files. If you have moved the database location, but not moved the database files, startup may fail. To repair: shutdown SQL Server, move the master database to configured location, and restart.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:36.11 Server      Setup step is copying system data file 'C:\\templatedata\\mastlog.ldf' to '/var/opt/mssql/data/mastlog.ldf'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:36.13 Server      Setup step is copying system data file 'C:\\templatedata\\model.mdf' to '/var/opt/mssql/data/model.mdf'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:36.15 Server      Setup step is copying system data file 'C:\\templatedata\\modellog.ldf' to '/var/opt/mssql/data/modellog.ldf'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:36.17 Server      Setup step is copying system data file 'C:\\templatedata\\msdbdata.mdf' to '/var/opt/mssql/data/msdbdata.mdf'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:36.20 Server      Setup step is copying system data file 'C:\\templatedata\\msdblog.ldf' to '/var/opt/mssql/data/msdblog.ldf'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:36.21 Server      Setup step is FORCE copying system data file 'C:\\templatedata\\model_replicatedmaster.mdf' to '/var/opt/mssql/data/model_replicatedmaster.mdf'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:36.22 Server      Setup step is FORCE copying system data file 'C:\\templatedata\\model_replicatedmaster.ldf' to '/var/opt/mssql/data/model_replicatedmaster.ldf'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:36.23 Server      Setup step is FORCE copying system data file 'C:\\templatedata\\model_msdbdata.mdf' to '/var/opt/mssql/data/model_msdbdata.mdf'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:36.26 Server      Setup step is FORCE copying system data file 'C:\\templatedata\\model_msdblog.ldf' to '/var/opt/mssql/data/model_msdblog.ldf'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:36.33 Server      Microsoft SQL Server 2019 (RTM-CU15) (KB5008996) - 15.0.4198.2 (X64) \r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r\tJan 12 2022 22:30:08 \r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r\tCopyright (C) 2019 Microsoft Corporation\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r\tDeveloper Edition (64-bit) on Linux (Ubuntu 20.04.3 LTS) <X64>\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:36.34 Server      UTC adjustment: 0:00\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:36.34 Server      (c) Microsoft Corporation.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:36.34 Server      All rights reserved.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:36.34 Server      Server process ID is 340.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:36.34 Server      Logging SQL Server messages in file '/var/opt/mssql/log/errorlog'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:36.35 Server      Registry startup parameters: \r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r\t -d /var/opt/mssql/data/master.mdf\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r\t -l /var/opt/mssql/data/mastlog.ldf\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r\t -e /var/opt/mssql/log/errorlog\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:36.35 Server      SQL Server detected 4 sockets with 1 cores per socket and 1 logical processors per socket, 4 total logical processors; using 4 logical processors based on SQL Server licensing. This is an informational message; no user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:36.36 Server      SQL Server is starting at normal priority base (=7). This is an informational message only. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:36.37 Server      Detected 1588 MB of RAM. This is an informational message; no user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:36.37 Server      Using conventional memory in the memory manager.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:36.38 Server      Page exclusion bitmap is enabled.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:36.40 Server      Buffer pool extension is not supported on Linux platform.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:36.41 Server      Buffer Pool: Allocating 262144 bytes for 170777 hashPages.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:36.57 Server      Buffer pool extension is already disabled. No action is necessary.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:36.93 Server      Successfully initialized the TLS configuration. Allowed TLS protocol versions are ['1.0 1.1 1.2']. Allowed TLS ciphers are ['ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:!DHE-RSA-AES256-GCM-SHA384:!DHE-RSA-AES128-GCM-SHA256:!DHE-RSA-AES256-SHA:!DHE-RSA-AES128-SHA'].\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:36.97 Server      Query Store settings initialized with enabled = 1, \r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:37.00 Server      The maximum number of dedicated administrator connections for this instance is '1'\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:37.00 Server      Node configuration: node 0: CPU mask: 0x000000000000000f:0 Active CPU mask: 0x000000000000000f:0. This message provides a description of the NUMA configuration for this computer. This is an informational message only. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:37.02 Server      Using dynamic lock allocation.  Initial allocation of 2500 Lock blocks and 5000 Lock Owner blocks per node.  This is an informational message only.  No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:37.04 Server      In-Memory OLTP initialized on lowend machine.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:37.07 Server      [INFO] Created Extended Events session 'hkenginexesession'\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:37.07 Server      Database Instant File Initialization: enabled. For security and performance considerations see the topic 'Database Instant File Initialization' in SQL Server Books Online. This is an informational message only. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\rForceFlush is enabled for this instance. \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:37.09 Server      Total Log Writer threads: 2. This is an informational message; no user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:37.12 Server      clflush is selected for pmem flush operation.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:37.13 Server      Software Usage Metrics is disabled.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:37.18 spid9s      [1]. Feature Status: PVS: 0. CTR: 0. ConcurrentPFSUpdate: 1.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:37.20 spid9s      Starting up database 'master'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\rForceFlush feature is enabled for log durability.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:37.26 Server      CLR version v4.0.30319 loaded.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:37.46 spid9s      Converting database 'master' from version 897 to the current version 904.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:37.47 spid9s      Database 'master' running the upgrade step from version 897 to version 898.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:37.51 spid9s      Database 'master' running the upgrade step from version 898 to version 899.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:37.56 spid9s      Database 'master' running the upgrade step from version 899 to version 900.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:37.62 spid9s      Database 'master' running the upgrade step from version 900 to version 901.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:37.68 spid9s      Database 'master' running the upgrade step from version 901 to version 902.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:37.70 spid9s      Database 'master' running the upgrade step from version 902 to version 903.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:37.72 spid9s      Database 'master' running the upgrade step from version 903 to version 904.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:37.85 Server      Common language runtime (CLR) functionality initialized.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.09 spid9s      Resource governor reconfiguration succeeded.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.09 spid9s      SQL Server Audit is starting the audits. This is an informational message. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.10 spid9s      SQL Server Audit has started the audits. This is an informational message. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.16 spid9s      SQL Trace ID 1 was started by login \"sa\".\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.19 spid9s      Server name is '517ef5cb97a0'. This is an informational message only. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.19 spid25s     Password policy update was successful.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.30 spid9s      [4]. Feature Status: PVS: 0. CTR: 0. ConcurrentPFSUpdate: 1.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.30 spid12s     [32767]. Feature Status: PVS: 0. CTR: 0. ConcurrentPFSUpdate: 1.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.32 spid28s     Always On: The availability replica manager is starting. This is an informational message only. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.32 spid28s     Always On: The availability replica manager is waiting for the instance of SQL Server to allow client connections. This is an informational message only. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.33 spid12s     Starting up database 'mssqlsystemresource'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.33 spid9s      Starting up database 'msdb'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.35 spid12s     The resource database build version is 15.00.4198. This is an informational message only. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.46 spid9s      The tail of the log for database msdb is being rewritten to match the new sector size of 4096 bytes.  3072 bytes at offset 50176 in file /var/opt/mssql/data/MSDBLog.ldf will be written.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.49 spid25s     A self-generated certificate was successfully loaded for encryption.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.52 spid25s     Server is listening on [ 'any' <ipv6> 1433].\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.53 spid25s     Server is listening on [ 'any' <ipv4> 1433].\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.54 Server      Server is listening on [ ::1 <ipv6> 1434].\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.54 Server      Server is listening on [ 127.0.0.1 <ipv4> 1434].\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.54 Server      Dedicated admin connection support was established for listening locally on port 1434.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.55 spid25s     Server is listening on [ ::1 <ipv6> 1431].\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.55 spid25s     Server is listening on [ 127.0.0.1 <ipv4> 1431].\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.56 spid25s     SQL Server is now ready for client connections. This is an informational message; no user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.67 spid12s     [3]. Feature Status: PVS: 0. CTR: 0. ConcurrentPFSUpdate: 1.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.68 spid12s     Starting up database 'model'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.70 spid9s      Converting database 'msdb' from version 897 to the current version 904.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.71 spid9s      Database 'msdb' running the upgrade step from version 897 to version 898.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.72 spid9s      Database 'msdb' running the upgrade step from version 898 to version 899.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.76 spid9s      Database 'msdb' running the upgrade step from version 899 to version 900.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.79 spid12s     The tail of the log for database model is being rewritten to match the new sector size of 4096 bytes.  512 bytes at offset 73216 in file /var/opt/mssql/data/modellog.ldf will be written.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.81 spid9s      Database 'msdb' running the upgrade step from version 900 to version 901.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.82 spid9s      Database 'msdb' running the upgrade step from version 901 to version 902.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.83 spid12s     Converting database 'model' from version 897 to the current version 904.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.85 spid12s     Database 'model' running the upgrade step from version 897 to version 898.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.87 spid12s     Database 'model' running the upgrade step from version 898 to version 899.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.89 spid12s     Database 'model' running the upgrade step from version 899 to version 900.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.90 spid12s     Database 'model' running the upgrade step from version 900 to version 901.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.92 spid12s     Database 'model' running the upgrade step from version 901 to version 902.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.93 spid12s     Database 'model' running the upgrade step from version 902 to version 903.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:38.94 spid12s     Database 'model' running the upgrade step from version 903 to version 904.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:39.04 spid12s     Clearing tempdb database.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:39.34 spid12s     [2]. Feature Status: PVS: 0. CTR: 0. ConcurrentPFSUpdate: 1.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:39.35 spid12s     Starting up database 'tempdb'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:39.49 spid12s     The tempdb database has 1 data file(s).\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:39.53 spid30s     The Service Broker endpoint is in disabled or stopped state.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:39.53 spid30s     The Database Mirroring endpoint is in disabled or stopped state.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:39.55 spid30s     Service Broker manager has started.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:39.56 spid9s      Database 'msdb' running the upgrade step from version 902 to version 903.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:39.58 spid9s      Database 'msdb' running the upgrade step from version 903 to version 904.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:39.74 spid9s      Recovery is complete. This is an informational message only. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:39.76 spid28s     The default language (LCID 0) has been set for engine and full-text services.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:40.02 spid28s     The tempdb database has 4 data file(s).\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:40.11 spid51      Attempting to load library 'xplog70.dll' into memory. This is an informational message only. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:40.16 spid51      Using 'xplog70.dll' version '2019.150.4198' to execute extended stored procedure 'xp_msver'. This is an informational message only; no user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:41.05 spid51      Attempting to load library 'xpstar.dll' into memory. This is an informational message only. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:30:41.13 spid51      Using 'xpstar.dll' version '2019.150.4198' to execute extended stored procedure 'xp_instance_regread'. This is an informational message only; no user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:32:40.23 spid9s      Always On: The availability replica manager is going offline because SQL Server is shutting down. This is an informational message only. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:32:40.24 spid9s      SQL Server is terminating in response to a 'stop' request from Service Control Manager. This is an informational message only. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:32:41.14 spid30s     Service Broker manager has shut down.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:32:41.14 spid9s      .NET Framework runtime has been stopped.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-07 15:32:41.24 spid9s      SQL Trace was stopped due to server shutdown. Trace ID = '1'. This is an informational message only; no user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"PostgreSQL Database directory appears to contain a database; Skipping initialization\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:22:40.055 UTC [1] LOG:  starting PostgreSQL 12.9 on x86_64-pc-linux-musl, compiled by gcc (Alpine 10.3.1_git20211027) 10.3.1 20211027, 64-bit\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:22:40.055 UTC [1] LOG:  listening on IPv4 address \"0.0.0.0\", port 5432\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:22:40.055 UTC [1] LOG:  listening on IPv6 address \"::\", port 5432\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:22:40.059 UTC [1] LOG:  listening on Unix socket \"/var/run/postgresql/.s.PGSQL.5432\"\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:22:40.074 UTC [23] LOG:  database system was shut down at 2022-03-27 14:22:22 UTC\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:22:40.079 UTC [1] LOG:  database system is ready to accept connections\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:23:56.178 UTC [30] ERROR:  relation \"interbank_transfers_pkey\" already exists\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:23:56.178 UTC [30] STATEMENT:  CREATE UNIQUE INDEX interbank_transfers_pkey ON interbank_transfers(id text_ops);\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:26:05.061 UTC [30] ERROR:  relation \"ecollection_debit_inquiries_pkey\" already exists\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:26:05.061 UTC [30] STATEMENT:  CREATE UNIQUE INDEX ecollection_debit_inquiries_pkey ON ecollection_debit_inquiries(id text_ops);\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:31:50.330 UTC [30] ERROR:  canceling statement due to user request\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:31:50.330 UTC [30] STATEMENT:  SELECT \"xmin\", \"id\", \"reference\", \"bank_reference\", \"investor_account_number\", \"destination_account_number\", \"description\", \"request_uuid\", \"amount\", \"status\", \"failure_code\", \"raw_bni_transfer_response\", \"created\", \"updated\", \"parent_company_id\", \"company_id\" FROM \"public\".\"inhouse_transfers\"  ORDER BY \"id\" ASC  LIMIT 1000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:35:25.101 UTC [30] ERROR:  column edi.bank_reference does not exist at character 165\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:35:25.101 UTC [30] HINT:  Perhaps you meant to reference the column \"it.bank_reference\".\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:35:25.101 UTC [30] STATEMENT:  select it.bank_reference, edi.journal_num, *\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tfrom inhouse_transfers as it\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tleft join ecollection_debit_inquiries as edi\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ton it.bank_reference = edi.journal_num\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\twhere edi.bank_reference is null;\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:40:28.625 UTC [30] ERROR:  relation \"cif_overrides_pkey\" already exists\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:40:28.625 UTC [30] STATEMENT:  CREATE UNIQUE INDEX cif_overrides_pkey ON cif_overrides(id text_ops);\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:40:39.964 UTC [30] ERROR:  relation \"circuit_breaker_settings_pkey\" already exists\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:40:39.964 UTC [30] STATEMENT:  CREATE UNIQUE INDEX circuit_breaker_settings_pkey ON circuit_breaker_settings(id text_ops);\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:40:48.292 UTC [30] ERROR:  relation \"clearing_transfers_pkey\" already exists\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:40:48.292 UTC [30] STATEMENT:  CREATE UNIQUE INDEX clearing_transfers_pkey ON clearing_transfers(id text_ops);\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:40:59.673 UTC [30] ERROR:  relation \"dumped_queue_messages_pkey\" already exists\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:40:59.673 UTC [30] STATEMENT:  CREATE UNIQUE INDEX dumped_queue_messages_pkey ON dumped_queue_messages(id text_ops);\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:41:11.774 UTC [30] ERROR:  relation \"investors_pkey\" already exists\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:41:11.774 UTC [30] STATEMENT:  CREATE UNIQUE INDEX investors_pkey ON investors(id text_ops);\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:41:21.136 UTC [30] ERROR:  relation \"name_validators_pkey\" already exists\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:41:21.136 UTC [30] STATEMENT:  CREATE UNIQUE INDEX name_validators_pkey ON name_validators(id text_ops);\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:41:23.810 UTC [30] ERROR:  relation \"name_validators_pkey\" already exists\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:41:23.810 UTC [30] STATEMENT:  CREATE UNIQUE INDEX name_validators_pkey ON name_validators(id text_ops);\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:41:31.920 UTC [30] ERROR:  relation \"payments_pkey\" already exists\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:41:31.920 UTC [30] STATEMENT:  CREATE UNIQUE INDEX payments_pkey ON payments(id text_ops);\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:41:40.683 UTC [30] ERROR:  relation \"rtgs_transfers_pkey\" already exists\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-27 14:41:40.683 UTC [30] STATEMENT:  CREATE UNIQUE INDEX rtgs_transfers_pkey ON rtgs_transfers(id text_ops);\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-28 04:18:40.958 UTC [28] LOG:  stats_timestamp 2022-03-28 04:18:40.982708+00 is later than collector's time 2022-03-28 04:18:40.957908+00 for database 0\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-28 13:10:31.614 UTC [28] LOG:  stats_timestamp 2022-03-28 13:10:31.640308+00 is later than collector's time 2022-03-28 13:10:31.614672+00 for database 0\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-28 15:05:00.563 UTC [1173] ERROR:  relation \"inhouse\" does not exist at character 15\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-28 15:05:00.563 UTC [1173] STATEMENT:  select * from inhouse limit 10;\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-28 15:05:02.424 UTC [1173] ERROR:  syntax error at or near \";\" at character 51\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-28 15:05:02.424 UTC [1173] STATEMENT:  with inhouse as (\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\tselect * from inhouse_transfers;\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tselect * from inhouse limit 10;\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-28 15:05:14.252 UTC [1173] ERROR:  syntax error at or near \";\" at character 53\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-28 15:05:14.252 UTC [1173] STATEMENT:  with inhouse as (\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\tselect * from inhouse_transfers\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t);\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-28 15:09:07.861 UTC [1173] ERROR:  syntax error at or near \"with\" at character 233\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-28 15:09:07.861 UTC [1173] STATEMENT:  with inhouse as (\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\tselect * from inhouse_transfers\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\twhere \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tinvestor_account_number='0907603238' and \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tamount=3000000 and \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tstatus!='FAILED' and\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tupdated >= '2022-03-15 06:23:50.225' and\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tupdated < '2022-03-17 06:23:50.225'\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\twith interbank as (\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\tselect * from inhouse_transfers\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\twhere \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tinvestor_account_number='0907603238' and \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tamount=3000000 and \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tstatus!='FAILED' and\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tupdated >= '2022-03-15 06:23:50.225' and\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tupdated < '2022-03-17 06:23:50.225'\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tselect * from interbank limit 10;\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-28 15:09:16.182 UTC [1173] ERROR:  syntax error at or near \"with\" at character 234\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-28 15:09:16.182 UTC [1173] STATEMENT:  with inhouse as (\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\tselect * from inhouse_transfers\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\twhere \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tinvestor_account_number='0907603238' and \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tamount=3000000 and \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tstatus!='FAILED' and\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tupdated >= '2022-03-15 06:23:50.225' and\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tupdated < '2022-03-17 06:23:50.225'\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t),\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\twith interbank as (\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\tselect * from inhouse_transfers\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\twhere \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tinvestor_account_number='0907603238' and \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tamount=3000000 and \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tstatus!='FAILED' and\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tupdated >= '2022-03-15 06:23:50.225' and\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tupdated < '2022-03-17 06:23:50.225'\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tselect * from interbank limit 10;\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-28 15:10:47.889 UTC [1173] ERROR:  syntax error at or near \"union\" at character 497\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-28 15:10:47.889 UTC [1173] STATEMENT:  with inhouse as (\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\tselect * from inhouse_transfers\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\twhere \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tinvestor_account_number='0907603238' and \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tamount=3000000 and \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tstatus!='FAILED' and\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tupdated >= '2022-03-15 06:23:50.225' and\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tupdated < '2022-03-17 06:23:50.225'\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t), interbank as (\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\tselect * from interbank_transfers\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\twhere \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tinvestor_account_number='0907603238' and \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tamount=3000000 and \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tstatus!='FAILED' and\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tupdated >= '2022-03-15 06:23:50.225' and\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tupdated < '2022-03-17 06:23:50.225'\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tselect * from interbank limit 10 union select * from interbank limit 10;\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-28 15:11:01.441 UTC [1173] ERROR:  each UNION query must have the same number of columns at character 499\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-28 15:11:01.441 UTC [1173] STATEMENT:  with inhouse as (\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\tselect * from inhouse_transfers\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\twhere \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tinvestor_account_number='0907603238' and \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tamount=3000000 and \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tstatus!='FAILED' and\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tupdated >= '2022-03-15 06:23:50.225' and\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tupdated < '2022-03-17 06:23:50.225'\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t), interbank as (\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\tselect * from interbank_transfers\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\twhere \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tinvestor_account_number='0907603238' and \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tamount=3000000 and \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tstatus!='FAILED' and\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tupdated >= '2022-03-15 06:23:50.225' and\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tupdated < '2022-03-17 06:23:50.225'\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tselect * from inhouse union select * from interbank limit 10;\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-28 15:26:01.886 UTC [1221] ERROR:  column InhouseTransfer.account_number does not exist at character 306\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-28 15:26:01.886 UTC [1221] STATEMENT:  SELECT \"id\", \"reference\", \"bank_reference\", \"investor_account_number\", \"destination_account_number\", \"description\", \"request_uuid\", \"amount\", \"status\", \"failure_code\", \"raw_bni_transfer_response\", \"created\", \"updated\", \"parent_company_id\", \"company_id\" FROM \"inhouse_transfers\" AS \"InhouseTransfer\" WHERE \"InhouseTransfer\".\"account_number\" = NULL AND \"InhouseTransfer\".\"amount\" = 3000000 AND \"InhouseTransfer\".\"status\" != 'FAILED' AND (\"InhouseTransfer\".\"updated\" >= '2022-03-15 17:00:00.000 +00:00' AND \"InhouseTransfer\".\"updated\" < '2022-03-16 17:00:00.000 +00:00') ORDER BY \"InhouseTransfer\".\"created\" ASC;\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-28 15:26:45.905 UTC [1224] ERROR:  column InhouseTransfer.account_number does not exist at character 306\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-28 15:26:45.905 UTC [1224] STATEMENT:  SELECT \"id\", \"reference\", \"bank_reference\", \"investor_account_number\", \"destination_account_number\", \"description\", \"request_uuid\", \"amount\", \"status\", \"failure_code\", \"raw_bni_transfer_response\", \"created\", \"updated\", \"parent_company_id\", \"company_id\" FROM \"inhouse_transfers\" AS \"InhouseTransfer\" WHERE \"InhouseTransfer\".\"account_number\" = '0907603238' AND \"InhouseTransfer\".\"amount\" = 3000000 AND \"InhouseTransfer\".\"status\" != 'FAILED' AND (\"InhouseTransfer\".\"updated\" >= '2022-03-15 17:00:00.000 +00:00' AND \"InhouseTransfer\".\"updated\" < '2022-03-16 17:00:00.000 +00:00') ORDER BY \"InhouseTransfer\".\"created\" ASC;\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-28 15:54:36.697 UTC [1250] ERROR:  syntax error at or near \"select\" at character 474\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-28 15:54:36.697 UTC [1250] STATEMENT:  with inhouse as (\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\tselect * from inhouse_transfers\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\twhere \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tinvestor_account_number='0907603238' and \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tamount=3000000 and \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tstatus!='FAILED' and\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tupdated >= '2022-03-15 17:00:00' and\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tupdated < '2022-03-16 17:00:00'\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t), interbank as (\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\tselect * from interbank_transfers\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\twhere \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tinvestor_account_number='0907603238' and \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tamount=3000000 and \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tstatus!='FAILED' and\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tupdated >= '2022-03-15 17:00:00' and\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tupdated < '2022-03-16 17:00:00'\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t), collector_transactions (\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\tselect 'INHOUSE' as type, id, reference, investor_account_number, amount, status, bank_reference, created, updated\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\tfrom inhouse\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\tunion\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\tselect 'INTERBANK' as type, id, reference, investor_account_number, amount, status, bank_reference, created, updated\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\tfrom interbank\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\torder by created; \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t), debit_inquiries as (\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\tselect * from ecollection_debit_inquiries\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\twhere \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\taccount_number='0907603238' and \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tamount=3000000 and \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\ttransaction_dt >= '2022-03-15 17:00:00' and\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\ttransaction_dt < '2022-03-16 17:00:00'\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tselect * from collector_transactions;\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-28 15:54:51.396 UTC [1250] ERROR:  syntax error at or near \";\" at character 764\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-28 15:54:51.396 UTC [1250] STATEMENT:  with inhouse as (\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\tselect * from inhouse_transfers\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\twhere \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tinvestor_account_number='0907603238' and \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tamount=3000000 and \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tstatus!='FAILED' and\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tupdated >= '2022-03-15 17:00:00' and\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tupdated < '2022-03-16 17:00:00'\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t), interbank as (\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\tselect * from interbank_transfers\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\twhere \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tinvestor_account_number='0907603238' and \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tamount=3000000 and \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tstatus!='FAILED' and\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tupdated >= '2022-03-15 17:00:00' and\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tupdated < '2022-03-16 17:00:00'\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t), collector_transactions as (\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\tselect 'INHOUSE' as type, id, reference, investor_account_number, amount, status, bank_reference, created, updated\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\tfrom inhouse\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\tunion\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\tselect 'INTERBANK' as type, id, reference, investor_account_number, amount, status, bank_reference, created, updated\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\tfrom interbank\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\torder by created; \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t), debit_inquiries as (\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\tselect * from ecollection_debit_inquiries\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\twhere \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\taccount_number='0907603238' and \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\tamount=3000000 and \n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\ttransaction_dt >= '2022-03-15 17:00:00' and\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\t\ttransaction_dt < '2022-03-16 17:00:00'\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tselect * from collector_transactions;\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-28 16:05:59.908 UTC [1314] ERROR:  column \"xmin\" of relation \"ecollection_debit_inquiries\" does not exist at character 52\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-28 16:05:59.908 UTC [1314] STATEMENT:  INSERT INTO \"public\".\"ecollection_debit_inquiries\"(\"xmin\",\"id\",\"ecollection_inquiry_request_id\",\"bank_row_id\",\"lender_id\",\"account_number\",\"account_type\",\"account_from_to\",\"journal_num\",\"accounting_flag\",\"currency\",\"amount\",\"tran_code\",\"sender_name\",\"branch_no\",\"term_merch_id\",\"callback_sent\",\"retry_count\",\"transaction_dt\",\"transaction_date\",\"created\",\"updated\")\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tVALUES\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t(E'501',E'7a3679e3-578d-43f4-a5b1-ba889a1d17c5',E'51e0a233-4437-4376-b260-c3508c852ac7',E'2548491',E'15164',E'0907603238',E'RDL',E'00000002019200303',E'673175',E'D',E'IDR',3000000,E'001055',E'REZEKI BERSAMA TEKNOLOGI',E'0986',E' ',1,1,E'2022-03-16 02:49:16',E'2022-03-16',E'2022-03-16 03:17:36.108779',E'2022-03-16 03:17:36.108781');\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-28 16:06:18.101 UTC [1314] ERROR:  duplicate key value violates unique constraint \"ecollection_debit_inquiries_pkey\"\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-28 16:06:18.101 UTC [1314] DETAIL:  Key (id)=(7a3679e3-578d-43f4-a5b1-ba889a1d17c5) already exists.\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-28 16:06:18.101 UTC [1314] STATEMENT:  INSERT INTO \"public\".\"ecollection_debit_inquiries\"(\"id\",\"ecollection_inquiry_request_id\",\"bank_row_id\",\"lender_id\",\"account_number\",\"account_type\",\"account_from_to\",\"journal_num\",\"accounting_flag\",\"currency\",\"amount\",\"tran_code\",\"sender_name\",\"branch_no\",\"term_merch_id\",\"callback_sent\",\"retry_count\",\"transaction_dt\",\"transaction_date\",\"created\",\"updated\")\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tVALUES\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\t(E'7a3679e3-578d-43f4-a5b1-ba889a1d17c5',E'51e0a233-4437-4376-b260-c3508c852ac7',E'2548491',E'15164',E'0907603238',E'RDL',E'00000002019200303',E'673175',E'D',E'IDR',3000000,E'001055',E'REZEKI BERSAMA TEKNOLOGI',E'0986',E' ',1,1,E'2022-03-16 02:49:16',E'2022-03-16',E'2022-03-16 03:17:36.108779',E'2022-03-16 03:17:36.108781');\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-29 05:37:45.454 UTC [1821] ERROR:  syntax error at or near \"on\" at character 84\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-29 05:37:45.454 UTC [1821] STATEMENT:  select *\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tfrom inhouse_transfers as it\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tjoin ecollection_debit_inquiries as edi\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tleft on it.bank_reference = edi.journal_num;\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-29 05:41:04.006 UTC [1821] ERROR:  syntax error at or near \"union\" at character 1\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-29 05:41:04.006 UTC [1821] STATEMENT:  union\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tselect *\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tfrom ecollection_debit_inquiries\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\twhere journal_num in ('673175', '798685');\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-29 05:42:03.397 UTC [1821] ERROR:  column \"journal_number\" does not exist at character 466\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-29 05:42:03.397 UTC [1821] HINT:  There is a column named \"journal_number\" in table \"*SELECT* 1\", but it cannot be referenced from this part of the query.\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-29 05:42:03.397 UTC [1821] STATEMENT:  select it.reference, it.bank_reference, it.investor_account_number, it.amount, null as journal_number\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tfrom inhouse_transfers as it\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tleft join ecollection_debit_inquiries as edi\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ton it.bank_reference = edi.journal_num\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\twhere it.reference in ('ab327c30-a4d3-11ec-8088-2d920450aced', '73aaf840-a51a-11ec-8ad9-6b477f301c99', '66ce5ee0-a520-11ec-8a28-9ba9630861b9')\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tunion\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tselect null as reference, null as bank_reference, account_number as investor_account_number, amount, journal_number\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tfrom ecollection_debit_inquiries\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\twhere journal_num in ('673175', '798685');\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-29 05:42:32.252 UTC [1821] ERROR:  column \"created\" does not exist at character 559\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-29 05:42:32.252 UTC [1821] STATEMENT:  select it.reference, it.bank_reference, it.investor_account_number, it.amount, null as journal_num\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tfrom inhouse_transfers as it\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tleft join ecollection_debit_inquiries as edi\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ton it.bank_reference = edi.journal_num\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\twhere it.reference in ('ab327c30-a4d3-11ec-8088-2d920450aced', '73aaf840-a51a-11ec-8ad9-6b477f301c99', '66ce5ee0-a520-11ec-8a28-9ba9630861b9')\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tunion\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tselect null as reference, null as bank_reference, account_number as investor_account_number, amount, journal_num\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tfrom ecollection_debit_inquiries\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\twhere journal_num in ('673175', '337746')\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\torder by created;\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-29 05:42:52.631 UTC [1821] ERROR:  syntax error at or near \"union\" at character 376\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-29 05:42:52.631 UTC [1821] STATEMENT:  select it.reference, it.bank_reference, it.investor_account_number, it.amount, null as journal_num\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tfrom inhouse_transfers as it\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tleft join ecollection_debit_inquiries as edi\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ton it.bank_reference = edi.journal_num\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\twhere it.reference in ('ab327c30-a4d3-11ec-8088-2d920450aced', '73aaf840-a51a-11ec-8ad9-6b477f301c99', '66ce5ee0-a520-11ec-8a28-9ba9630861b9')\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\torder by it.created\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tunion\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tselect null as reference, null as bank_reference, account_number as investor_account_number, amount, journal_num\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tfrom ecollection_debit_inquiries\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\twhere journal_num in ('673175', '337746');\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-29 06:29:10.115 UTC [28] LOG:  stats_timestamp 2022-03-29 06:29:10.144557+00 is later than collector's time 2022-03-29 06:29:10.114998+00 for database 0\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-29 09:50:58.036 UTC [28] LOG:  stats_timestamp 2022-03-29 09:50:58.061967+00 is later than collector's time 2022-03-29 09:50:58.036544+00 for database 0\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:25:40 - INFO - Pika version 1.2.0 connecting to ('172.27.0.3', 5672)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:25:40 - ERROR - Socket failed to connect: <socket.socket fd=6, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6, laddr=('172.27.0.4', 46734)>; error=111 (Connection refused)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:25:40 - ERROR - TCP Connection attempt failed: ConnectionRefusedError(111, 'Connection refused'); dest=(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('172.27.0.3', 5672))\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:25:40 - ERROR - AMQPConnector - reporting failure: AMQPConnectorSocketConnectError: ConnectionRefusedError(111, 'Connection refused')\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:25:40 - ERROR - AMQP connection workflow failed: AMQPConnectionWorkflowFailed: 1 exceptions in all; last exception - AMQPConnectorSocketConnectError: ConnectionRefusedError(111, 'Connection refused'); first exception - None.\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:25:40 - ERROR - AMQPConnectionWorkflow - reporting failure: AMQPConnectionWorkflowFailed: 1 exceptions in all; last exception - AMQPConnectorSocketConnectError: ConnectionRefusedError(111, 'Connection refused'); first exception - None\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:25:40 - ERROR - Connection workflow failed: AMQPConnectionWorkflowFailed: 1 exceptions in all; last exception - AMQPConnectorSocketConnectError: ConnectionRefusedError(111, 'Connection refused'); first exception - None\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:25:40 - ERROR - Error in _create_connection().\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Traceback (most recent call last):\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  File \"/usr/local/lib/python3.9/site-packages/pika/adapters/blocking_connection.py\", line 451, in _create_connection\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"    raise self._reap_last_connection_workflow_error(error)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"pika.exceptions.AMQPConnectionError\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Traceback (most recent call last):\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  File \"/app/./apps/scraper_runner/ecollection_inquiry_scraper_runner.py\", line 11, in <module>\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"    bniEcollectionScraper = BNIEcollectionScraper(\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  File \"/app/./apps/scraper_core/bni_ecollection.py\", line 25, in __init__\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"    self.ecollection_publisher = EcollectionPublisher(host=queue_host)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  File \"/app/./apps/scraper_core/publisher/ecollection_publisher.py\", line 8, in __init__\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"    self.connection = pika.BlockingConnection(pika.URLParameters(host))\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  File \"/usr/local/lib/python3.9/site-packages/pika/adapters/blocking_connection.py\", line 360, in __init__\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"    self._impl = self._create_connection(parameters, _impl_class)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  File \"/usr/local/lib/python3.9/site-packages/pika/adapters/blocking_connection.py\", line 451, in _create_connection\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"    raise self._reap_last_connection_workflow_error(error)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"pika.exceptions.AMQPConnectionError\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:25:52 - INFO - Pika version 1.2.0 connecting to ('172.27.0.3', 5672)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:25:52 - INFO - Socket connected: <socket.socket fd=6, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6, laddr=('172.27.0.5', 42322), raddr=('172.27.0.3', 5672)>\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:25:52 - INFO - Streaming transport linked up: (<pika.adapters.utils.io_services_utils._AsyncPlaintextTransport object at 0x7f8d0ee47940>, _StreamingProtocolShim: <SelectConnection PROTOCOL transport=<pika.adapters.utils.io_services_utils._AsyncPlaintextTransport object at 0x7f8d0ee47940> params=<URLParameters host=rabbitmq port=5672 virtual_host=/ ssl=False>>).\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:25:52 - INFO - AMQPConnector - reporting success: <SelectConnection OPEN transport=<pika.adapters.utils.io_services_utils._AsyncPlaintextTransport object at 0x7f8d0ee47940> params=<URLParameters host=rabbitmq port=5672 virtual_host=/ ssl=False>>\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:25:52 - INFO - AMQPConnectionWorkflow - reporting success: <SelectConnection OPEN transport=<pika.adapters.utils.io_services_utils._AsyncPlaintextTransport object at 0x7f8d0ee47940> params=<URLParameters host=rabbitmq port=5672 virtual_host=/ ssl=False>>\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:25:52 - INFO - Connection workflow succeeded: <SelectConnection OPEN transport=<pika.adapters.utils.io_services_utils._AsyncPlaintextTransport object at 0x7f8d0ee47940> params=<URLParameters host=rabbitmq port=5672 virtual_host=/ ssl=False>>\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:25:52 - INFO - Created channel=1\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:25:52 - INFO - Starting ecollection-inquiry-scraper runner...\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:25:52 - INFO - Pika version 1.2.0 connecting to ('172.27.0.3', 5672)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:25:52 - INFO - Socket connected: <socket.socket fd=10, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6, laddr=('172.27.0.5', 42326), raddr=('172.27.0.3', 5672)>\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:25:52 - INFO - Streaming transport linked up: (<pika.adapters.utils.io_services_utils._AsyncPlaintextTransport object at 0x7f8d0edf6f40>, _StreamingProtocolShim: <SelectConnection PROTOCOL transport=<pika.adapters.utils.io_services_utils._AsyncPlaintextTransport object at 0x7f8d0edf6f40> params=<URLParameters host=rabbitmq port=5672 virtual_host=/ ssl=False>>).\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:25:52 - INFO - AMQPConnector - reporting success: <SelectConnection OPEN transport=<pika.adapters.utils.io_services_utils._AsyncPlaintextTransport object at 0x7f8d0edf6f40> params=<URLParameters host=rabbitmq port=5672 virtual_host=/ ssl=False>>\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:25:52 - INFO - AMQPConnectionWorkflow - reporting success: <SelectConnection OPEN transport=<pika.adapters.utils.io_services_utils._AsyncPlaintextTransport object at 0x7f8d0edf6f40> params=<URLParameters host=rabbitmq port=5672 virtual_host=/ ssl=False>>\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:25:52 - INFO - Connection workflow succeeded: <SelectConnection OPEN transport=<pika.adapters.utils.io_services_utils._AsyncPlaintextTransport object at 0x7f8d0edf6f40> params=<URLParameters host=rabbitmq port=5672 virtual_host=/ ssl=False>>\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:25:52 - INFO - Created channel=1\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:25:54 - INFO - receive message: {'request_id': '91c1ef40-323d-48ae-a9ea-106eeb3dd15b'}\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:25:54 - INFO - Attempting to login to ecollection...\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:26:00 - INFO - Login to ecollection succeed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:26:00 - INFO - Downloading CSV inquiry...\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:26:19 - INFO - ascii passed initial chaos probing. Mean measured chaos is 0.000000 %\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:26:19 - INFO - ascii is most likely the one. Stopping the process.\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:26:19 - INFO - CSV inquiry downloaded successfully\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:26:19 - INFO - Recording inquiry to DB...\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:26:19 - INFO - Inquiries recorded to DB\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:26:35 - INFO - receive message: {'request_id': '8b232f6b-7559-487a-b8d6-fd768c8d2c83'}\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:26:35 - INFO - Attempting to login to ecollection...\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:26:35 - INFO - Previous session still persist. Skipping login\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:26:35 - INFO - Downloading CSV inquiry...\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:26:53 - INFO - ascii passed initial chaos probing. Mean measured chaos is 0.000000 %\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:26:53 - INFO - ascii is most likely the one. Stopping the process.\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:26:53 - INFO - CSV inquiry downloaded successfully\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:26:53 - INFO - Recording inquiry to DB...\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:26:53 - INFO - Inquiries recorded to DB\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Traceback (most recent call last):\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  File \"/app/./apps/scraper_core/db/init.py\", line 7, in <module>\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"    conn = psycopg2.connect(\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  File \"/usr/local/lib/python3.9/site-packages/psycopg2/__init__.py\", line 122, in connect\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"    conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"psycopg2.OperationalError: connection to server at \"db\" (172.27.0.2), port 5432 failed: Connection refused\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tIs the server running on that host and accepting TCP/IP connections?\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Database created successfully.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:25:52 - INFO - Pika version 1.2.0 connecting to ('172.27.0.3', 5672)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:25:52 - INFO - Socket connected: <socket.socket fd=6, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6, laddr=('172.27.0.4', 46756), raddr=('172.27.0.3', 5672)>\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:25:52 - INFO - Streaming transport linked up: (<pika.adapters.utils.io_services_utils._AsyncPlaintextTransport object at 0x7fd355cb35b0>, _StreamingProtocolShim: <SelectConnection PROTOCOL transport=<pika.adapters.utils.io_services_utils._AsyncPlaintextTransport object at 0x7fd355cb35b0> params=<URLParameters host=rabbitmq port=5672 virtual_host=/ ssl=False>>).\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:25:52 - INFO - AMQPConnector - reporting success: <SelectConnection OPEN transport=<pika.adapters.utils.io_services_utils._AsyncPlaintextTransport object at 0x7fd355cb35b0> params=<URLParameters host=rabbitmq port=5672 virtual_host=/ ssl=False>>\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:25:52 - INFO - AMQPConnectionWorkflow - reporting success: <SelectConnection OPEN transport=<pika.adapters.utils.io_services_utils._AsyncPlaintextTransport object at 0x7fd355cb35b0> params=<URLParameters host=rabbitmq port=5672 virtual_host=/ ssl=False>>\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:25:52 - INFO - Connection workflow succeeded: <SelectConnection OPEN transport=<pika.adapters.utils.io_services_utils._AsyncPlaintextTransport object at 0x7fd355cb35b0> params=<URLParameters host=rabbitmq port=5672 virtual_host=/ ssl=False>>\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:25:52 - INFO - Created channel=1\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"08-Feb-22 08:25:52 - INFO - Serving on http://0.0.0.0:5000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"===> User\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"uid=1000(appuser) gid=1000(appuser) groups=1000(appuser)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"===> Configuring ...\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"===> Running preflight checks ... \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"===> Check if /var/lib/kafka/data is writable ...\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"===> Check if Zookeeper is healthy ...\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"SLF4J: Class path contains multiple SLF4J bindings.\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"SLF4J: Found binding in [jar:file:/usr/share/java/cp-base-new/slf4j-simple-1.7.30.jar!/org/slf4j/impl/StaticLoggerBinder.class]\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"SLF4J: Found binding in [jar:file:/usr/share/java/cp-base-new/slf4j-log4j12-1.7.30.jar!/org/slf4j/impl/StaticLoggerBinder.class]\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"SLF4J: Actual binding is of type [org.slf4j.impl.SimpleLoggerFactory]\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:zookeeper.version=3.6.3--6401e4ad2087061bc6b9f80dec2d69f2e3c8660a, built on 04/08/2021 16:35 GMT\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:host.name=kafka2\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:java.version=11.0.13\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:java.vendor=Azul Systems, Inc.\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:java.home=/usr/lib/jvm/zulu11-ca\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:java.class.path=/usr/share/java/cp-base-new/kafka-server-common-7.0.1-ccs.jar:/usr/share/java/cp-base-new/jackson-databind-2.12.3.jar:/usr/share/java/cp-base-new/common-utils-7.0.1.jar:/usr/share/java/cp-base-new/slf4j-api-1.7.30.jar:/usr/share/java/cp-base-new/slf4j-simple-1.7.30.jar:/usr/share/java/cp-base-new/snappy-java-1.1.8.1.jar:/usr/share/java/cp-base-new/zookeeper-jute-3.6.3.jar:/usr/share/java/cp-base-new/slf4j-log4j12-1.7.30.jar:/usr/share/java/cp-base-new/gson-2.8.6.jar:/usr/share/java/cp-base-new/audience-annotations-0.5.0.jar:/usr/share/java/cp-base-new/kafka_2.13-7.0.1-ccs.jar:/usr/share/java/cp-base-new/kafka-storage-api-7.0.1-ccs.jar:/usr/share/java/cp-base-new/scala-logging_2.13-3.9.3.jar:/usr/share/java/cp-base-new/kafka-storage-7.0.1-ccs.jar:/usr/share/java/cp-base-new/paranamer-2.8.jar:/usr/share/java/cp-base-new/jackson-dataformat-yaml-2.12.3.jar:/usr/share/java/cp-base-new/snakeyaml-1.27.jar:/usr/share/java/cp-base-new/lz4-java-1.7.1.jar:/usr/share/java/cp-base-new/disk-usage-agent-7.0.1.jar:/usr/share/java/cp-base-new/confluent-log4j-1.2.17-cp2.jar:/usr/share/java/cp-base-new/jmx_prometheus_javaagent-0.14.0.jar:/usr/share/java/cp-base-new/jackson-module-scala_2.13-2.12.3.jar:/usr/share/java/cp-base-new/jackson-annotations-2.12.3.jar:/usr/share/java/cp-base-new/metrics-core-4.1.12.1.jar:/usr/share/java/cp-base-new/scala-java8-compat_2.13-1.0.0.jar:/usr/share/java/cp-base-new/jackson-datatype-jdk8-2.12.3.jar:/usr/share/java/cp-base-new/kafka-raft-7.0.1-ccs.jar:/usr/share/java/cp-base-new/jolokia-jvm-1.6.2-agent.jar:/usr/share/java/cp-base-new/jackson-dataformat-csv-2.12.3.jar:/usr/share/java/cp-base-new/jackson-core-2.12.3.jar:/usr/share/java/cp-base-new/argparse4j-0.7.0.jar:/usr/share/java/cp-base-new/jolokia-core-1.6.2.jar:/usr/share/java/cp-base-new/zookeeper-3.6.3.jar:/usr/share/java/cp-base-new/commons-cli-1.4.jar:/usr/share/java/cp-base-new/zstd-jni-1.5.0-2.jar:/usr/share/java/cp-base-new/utility-belt-7.0.1.jar:/usr/share/java/cp-base-new/scala-library-2.13.5.jar:/usr/share/java/cp-base-new/json-simple-1.1.1.jar:/usr/share/java/cp-base-new/kafka-clients-7.0.1-ccs.jar:/usr/share/java/cp-base-new/jopt-simple-5.0.4.jar:/usr/share/java/cp-base-new/kafka-metadata-7.0.1-ccs.jar:/usr/share/java/cp-base-new/scala-reflect-2.13.5.jar:/usr/share/java/cp-base-new/metrics-core-2.2.0.jar:/usr/share/java/cp-base-new/scala-collection-compat_2.13-2.4.4.jar\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:java.library.path=/usr/java/packages/lib:/usr/lib64:/lib64:/lib:/usr/lib\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:java.io.tmpdir=/tmp\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:java.compiler=<NA>\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:os.name=Linux\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:os.arch=amd64\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:os.version=5.10.76-linuxkit\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:user.name=appuser\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:user.home=/home/appuser\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:user.dir=/home/appuser\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:os.memory.free=26MB\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:os.memory.max=498MB\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Client environment:os.memory.total=32MB\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Initiating client connection, connectString=zoo1:2181 sessionTimeout=40000 watcher=io.confluent.admin.utils.ZookeeperConnectionWatcher@a7e666\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.common.X509Util - Setting -D jdk.tls.rejectClientInitiatedRenegotiation=true to disable client-initiated TLS renegotiation\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ClientCnxnSocket - jute.maxbuffer value is 1048575 Bytes\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ClientCnxn - zookeeper.request.timeout value is 0. feature enabled=false\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main-SendThread(zoo1:2181)] INFO org.apache.zookeeper.ClientCnxn - Opening socket connection to server zoo1/192.168.32.2:2181.\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main-SendThread(zoo1:2181)] INFO org.apache.zookeeper.ClientCnxn - SASL config status: Will not attempt to authenticate using SASL (unknown error)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main-SendThread(zoo1:2181)] WARN org.apache.zookeeper.ClientCnxn - Session 0x0 for sever zoo1/192.168.32.2:2181, Closing socket connection. Attempting reconnect except it is a SessionExpiredException.\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"java.net.ConnectException: Connection refused\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:777)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:344)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1290)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main-SendThread(zoo1:2181)] INFO org.apache.zookeeper.ClientCnxn - Opening socket connection to server zoo1/192.168.32.2:2181.\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main-SendThread(zoo1:2181)] INFO org.apache.zookeeper.ClientCnxn - SASL config status: Will not attempt to authenticate using SASL (unknown error)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main-SendThread(zoo1:2181)] WARN org.apache.zookeeper.ClientCnxn - Session 0x0 for sever zoo1/192.168.32.2:2181, Closing socket connection. Attempting reconnect except it is a SessionExpiredException.\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"java.net.ConnectException: Connection refused\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:777)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:344)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1290)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main-SendThread(zoo1:2181)] INFO org.apache.zookeeper.ClientCnxn - Opening socket connection to server zoo1/192.168.32.2:2181.\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main-SendThread(zoo1:2181)] INFO org.apache.zookeeper.ClientCnxn - SASL config status: Will not attempt to authenticate using SASL (unknown error)\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main-SendThread(zoo1:2181)] INFO org.apache.zookeeper.ClientCnxn - Socket connection established, initiating session, client: /192.168.32.3:39190, server: zoo1/192.168.32.2:2181\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main-SendThread(zoo1:2181)] INFO org.apache.zookeeper.ClientCnxn - Session establishment complete on server zoo1/192.168.32.2:2181, session id = 0x10006de0c190002, negotiated timeout = 40000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main] INFO org.apache.zookeeper.ZooKeeper - Session: 0x10006de0c190002 closed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[main-EventThread] INFO org.apache.zookeeper.ClientCnxn - EventThread shut down for session: 0x10006de0c190002\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"===> Launching ... \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"===> Launching kafka ... \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:05,863] INFO Registered kafka:type=kafka.Log4jController MBean (kafka.utils.Log4jControllerRegistration$)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:07,630] INFO Setting -D jdk.tls.rejectClientInitiatedRenegotiation=true to disable client-initiated TLS renegotiation (org.apache.zookeeper.common.X509Util)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:07,980] INFO Registered signal handlers for TERM, INT, HUP (org.apache.kafka.common.utils.LoggingSignalHandler)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:07,992] INFO starting (kafka.server.KafkaServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:07,993] INFO Connecting to zookeeper on zoo1:2181 (kafka.server.KafkaServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,042] INFO [ZooKeeperClient Kafka server] Initializing a new session to zoo1:2181. (kafka.zookeeper.ZooKeeperClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,061] INFO Client environment:zookeeper.version=3.6.3--6401e4ad2087061bc6b9f80dec2d69f2e3c8660a, built on 04/08/2021 16:35 GMT (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,061] INFO Client environment:host.name=kafka2 (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,061] INFO Client environment:java.version=11.0.13 (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,061] INFO Client environment:java.vendor=Azul Systems, Inc. (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,061] INFO Client environment:java.home=/usr/lib/jvm/zulu11-ca (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,062] INFO Client environment:java.class.path=/usr/bin/../share/java/kafka/jetty-server-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/rocksdbjni-6.19.3.jar:/usr/bin/../share/java/kafka/connect-mirror-client-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/kafka-server-common-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/jersey-server-2.34.jar:/usr/bin/../share/java/kafka/hk2-locator-2.6.1.jar:/usr/bin/../share/java/kafka/jackson-databind-2.12.3.jar:/usr/bin/../share/java/kafka/maven-artifact-3.8.1.jar:/usr/bin/../share/java/kafka/scala-reflect-2.13.6.jar:/usr/bin/../share/java/kafka/slf4j-api-1.7.30.jar:/usr/bin/../share/java/kafka/kafka-shell-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/jetty-continuation-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/connect-basic-auth-extension-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/connect-api-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/netty-transport-4.1.68.Final.jar:/usr/bin/../share/java/kafka/snappy-java-1.1.8.1.jar:/usr/bin/../share/java/kafka/jetty-http-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/zookeeper-jute-3.6.3.jar:/usr/bin/../share/java/kafka/netty-common-4.1.68.Final.jar:/usr/bin/../share/java/kafka/jakarta.activation-api-1.2.1.jar:/usr/bin/../share/java/kafka/slf4j-log4j12-1.7.30.jar:/usr/bin/../share/java/kafka/connect-mirror-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/netty-buffer-4.1.68.Final.jar:/usr/bin/../share/java/kafka/kafka-tools-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/osgi-resource-locator-1.0.3.jar:/usr/bin/../share/java/kafka/audience-annotations-0.5.0.jar:/usr/bin/../share/java/kafka/jersey-container-servlet-2.34.jar:/usr/bin/../share/java/kafka/jackson-jaxrs-json-provider-2.12.3.jar:/usr/bin/../share/java/kafka/jakarta.ws.rs-api-2.1.6.jar:/usr/bin/../share/java/kafka/kafka_2.13-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/javassist-3.27.0-GA.jar:/usr/bin/../share/java/kafka/kafka-storage-api-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/jetty-servlet-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/jersey-client-2.34.jar:/usr/bin/../share/java/kafka/hk2-utils-2.6.1.jar:/usr/bin/../share/java/kafka/jackson-jaxrs-base-2.12.3.jar:/usr/bin/../share/java/kafka/reflections-0.9.12.jar:/usr/bin/../share/java/kafka/kafka-streams-examples-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/jaxb-api-2.3.0.jar:/usr/bin/../share/java/kafka/jetty-util-ajax-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/netty-transport-native-epoll-4.1.68.Final.jar:/usr/bin/../share/java/kafka/scala-logging_2.13-3.9.3.jar:/usr/bin/../share/java/kafka/kafka-storage-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/javax.ws.rs-api-2.1.1.jar:/usr/bin/../share/java/kafka/paranamer-2.8.jar:/usr/bin/../share/java/kafka/jersey-container-servlet-core-2.34.jar:/usr/bin/../share/java/kafka/jetty-security-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/kafka-streams-scala_2.13-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/jetty-util-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/lz4-java-1.7.1.jar:/usr/bin/../share/java/kafka/confluent-log4j-1.2.17-cp2.jar:/usr/bin/../share/java/kafka/kafka.jar:/usr/bin/../share/java/kafka/jakarta.annotation-api-1.3.5.jar:/usr/bin/../share/java/kafka/jersey-common-2.34.jar:/usr/bin/../share/java/kafka/jakarta.inject-2.6.1.jar:/usr/bin/../share/java/kafka/jackson-module-scala_2.13-2.12.3.jar:/usr/bin/../share/java/kafka/connect-json-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/jackson-annotations-2.12.3.jar:/usr/bin/../share/java/kafka/metrics-core-4.1.12.1.jar:/usr/bin/../share/java/kafka/scala-java8-compat_2.13-1.0.0.jar:/usr/bin/../share/java/kafka/javax.servlet-api-3.1.0.jar:/usr/bin/../share/java/kafka/jackson-datatype-jdk8-2.12.3.jar:/usr/bin/../share/java/kafka/trogdor-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/connect-runtime-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/jakarta.xml.bind-api-2.3.2.jar:/usr/bin/../share/java/kafka/jakarta.validation-api-2.0.2.jar:/usr/bin/../share/java/kafka/netty-transport-native-unix-common-4.1.68.Final.jar:/usr/bin/../share/java/kafka/kafka-streams-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/kafka-raft-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/scala-library-2.13.6.jar:/usr/bin/../share/java/kafka/jetty-servlets-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/netty-handler-4.1.68.Final.jar:/usr/bin/../share/java/kafka/plexus-utils-3.2.1.jar:/usr/bin/../share/java/kafka/kafka-log4j-appender-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/jackson-dataformat-csv-2.12.3.jar:/usr/bin/../share/java/kafka/jackson-core-2.12.3.jar:/usr/bin/../share/java/kafka/hk2-api-2.6.1.jar:/usr/bin/../share/java/kafka/argparse4j-0.7.0.jar:/usr/bin/../share/java/kafka/zookeeper-3.6.3.jar:/usr/bin/../share/java/kafka/commons-cli-1.4.jar:/usr/bin/../share/java/kafka/netty-codec-4.1.68.Final.jar:/usr/bin/../share/java/kafka/jetty-client-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/jackson-module-jaxb-annotations-2.12.3.jar:/usr/bin/../share/java/kafka/zstd-jni-1.5.0-2.jar:/usr/bin/../share/java/kafka/jersey-hk2-2.34.jar:/usr/bin/../share/java/kafka/jline-3.12.1.jar:/usr/bin/../share/java/kafka/kafka-streams-test-utils-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/connect-transforms-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/kafka-clients-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/jopt-simple-5.0.4.jar:/usr/bin/../share/java/kafka/jetty-io-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/kafka-metadata-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/activation-1.1.1.jar:/usr/bin/../share/java/kafka/commons-lang3-3.8.1.jar:/usr/bin/../share/java/kafka/aopalliance-repackaged-2.6.1.jar:/usr/bin/../share/java/kafka/metrics-core-2.2.0.jar:/usr/bin/../share/java/kafka/scala-collection-compat_2.13-2.4.4.jar:/usr/bin/../share/java/kafka/netty-resolver-4.1.68.Final.jar:/usr/bin/../share/java/confluent-telemetry/* (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,063] INFO Client environment:java.library.path=/usr/java/packages/lib:/usr/lib64:/lib64:/lib:/usr/lib (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,063] INFO Client environment:java.io.tmpdir=/tmp (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,063] INFO Client environment:java.compiler=<NA> (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,063] INFO Client environment:os.name=Linux (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,063] INFO Client environment:os.arch=amd64 (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,063] INFO Client environment:os.version=5.10.76-linuxkit (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,064] INFO Client environment:user.name=appuser (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,064] INFO Client environment:user.home=/home/appuser (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,064] INFO Client environment:user.dir=/home/appuser (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,064] INFO Client environment:os.memory.free=1008MB (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,064] INFO Client environment:os.memory.max=1024MB (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,064] INFO Client environment:os.memory.total=1024MB (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,087] INFO Initiating client connection, connectString=zoo1:2181 sessionTimeout=18000 watcher=kafka.zookeeper.ZooKeeperClient$ZooKeeperClientWatcher$@626c44e7 (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,109] INFO jute.maxbuffer value is 4194304 Bytes (org.apache.zookeeper.ClientCnxnSocket)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,140] INFO zookeeper.request.timeout value is 0. feature enabled=false (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,155] INFO [ZooKeeperClient Kafka server] Waiting until connected. (kafka.zookeeper.ZooKeeperClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,191] INFO Opening socket connection to server zoo1/192.168.32.2:2181. (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,194] INFO SASL config status: Will not attempt to authenticate using SASL (unknown error) (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,217] INFO Socket connection established, initiating session, client: /192.168.32.3:39196, server: zoo1/192.168.32.2:2181 (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,246] INFO Session establishment complete on server zoo1/192.168.32.2:2181, session id = 0x10006de0c190003, negotiated timeout = 18000 (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,264] INFO [ZooKeeperClient Kafka server] Connected. (kafka.zookeeper.ZooKeeperClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,648] INFO [feature-zk-node-event-process-thread]: Starting (kafka.server.FinalizedFeatureChangeListener$ChangeNotificationProcessorThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,693] INFO Feature ZK node at path: /feature does not exist (kafka.server.FinalizedFeatureChangeListener)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:08,696] INFO Cleared cache (kafka.server.FinalizedFeatureCache)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:09,269] INFO Cluster ID = V5kB09chREKL6G31lo5VzA (kafka.server.KafkaServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:09,291] WARN No meta.properties file under dir /var/lib/kafka/data/meta.properties (kafka.server.BrokerMetadataCheckpoint)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:09,503] INFO KafkaConfig values: \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tadvertised.listeners = LISTENER_DOCKER_INTERNAL://kafka2:19093,LISTENER_DOCKER_EXTERNAL://127.0.0.1:9093\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\talter.config.policy.class.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\talter.log.dirs.replication.quota.window.num = 11\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\talter.log.dirs.replication.quota.window.size.seconds = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tauthorizer.class.name = kafka.security.authorizer.AclAuthorizer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tauto.create.topics.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tauto.leader.rebalance.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tbackground.threads = 10\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tbroker.heartbeat.interval.ms = 2000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tbroker.id = 2\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tbroker.id.generation.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tbroker.rack = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tbroker.session.timeout.ms = 9000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tclient.quota.callback.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcompression.type = producer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tconnection.failed.authentication.delay.ms = 100\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tconnections.max.idle.ms = 600000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tconnections.max.reauth.ms = 0\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontrol.plane.listener.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontrolled.shutdown.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontrolled.shutdown.max.retries = 3\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontrolled.shutdown.retry.backoff.ms = 5000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.listener.names = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.append.linger.ms = 25\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.election.backoff.max.ms = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.election.timeout.ms = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.fetch.timeout.ms = 2000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.request.timeout.ms = 2000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.retry.backoff.ms = 20\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.voters = []\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quota.window.num = 11\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quota.window.size.seconds = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.socket.timeout.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcreate.topic.policy.class.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdefault.replication.factor = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelegation.token.expiry.check.interval.ms = 3600000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelegation.token.expiry.time.ms = 86400000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelegation.token.master.key = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelegation.token.max.lifetime.ms = 604800000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelegation.token.secret.key = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelete.records.purgatory.purge.interval.requests = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelete.topic.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tfetch.max.bytes = 57671680\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tfetch.purgatory.purge.interval.requests = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tgroup.initial.rebalance.delay.ms = 3000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tgroup.max.session.timeout.ms = 1800000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tgroup.max.size = 2147483647\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tgroup.min.session.timeout.ms = 6000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tinitial.broker.registration.timeout.ms = 60000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tinter.broker.listener.name = LISTENER_DOCKER_INTERNAL\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tinter.broker.protocol.version = 3.0-IV1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tkafka.metrics.polling.interval.secs = 10\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tkafka.metrics.reporters = []\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tleader.imbalance.check.interval.seconds = 300\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tleader.imbalance.per.broker.percentage = 10\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlistener.security.protocol.map = LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlisteners = LISTENER_DOCKER_INTERNAL://0.0.0.0:19093,LISTENER_DOCKER_EXTERNAL://0.0.0.0:9093\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.backoff.ms = 15000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.dedupe.buffer.size = 134217728\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.delete.retention.ms = 86400000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.io.buffer.load.factor = 0.9\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.io.buffer.size = 524288\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.io.max.bytes.per.second = 1.7976931348623157E308\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.max.compaction.lag.ms = 9223372036854775807\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.min.cleanable.ratio = 0.5\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.min.compaction.lag.ms = 0\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.threads = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleanup.policy = [delete]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.dir = /tmp/kafka-logs\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.dirs = /var/lib/kafka/data\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.flush.interval.messages = 9223372036854775807\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.flush.interval.ms = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.flush.offset.checkpoint.interval.ms = 60000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.flush.scheduler.interval.ms = 9223372036854775807\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.flush.start.offset.checkpoint.interval.ms = 60000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.index.interval.bytes = 4096\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.index.size.max.bytes = 10485760\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.message.downconversion.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.message.format.version = 3.0-IV1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.message.timestamp.difference.max.ms = 9223372036854775807\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.message.timestamp.type = CreateTime\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.preallocate = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.retention.bytes = -1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.retention.check.interval.ms = 300000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.retention.hours = 168\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.retention.minutes = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.retention.ms = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.roll.hours = 168\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.roll.jitter.hours = 0\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.roll.jitter.ms = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.roll.ms = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.segment.bytes = 1073741824\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.segment.delete.delay.ms = 60000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmax.connection.creation.rate = 2147483647\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmax.connections = 2147483647\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmax.connections.per.ip = 2147483647\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmax.connections.per.ip.overrides = \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmax.incremental.fetch.session.cache.slots = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmessage.max.bytes = 1048588\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.log.dir = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.log.max.record.bytes.between.snapshots = 20971520\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.log.segment.bytes = 1073741824\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.log.segment.min.bytes = 8388608\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.log.segment.ms = 604800000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.max.retention.bytes = -1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.max.retention.ms = 604800000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetric.reporters = []\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetrics.num.samples = 2\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetrics.recording.level = INFO\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetrics.sample.window.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmin.insync.replicas = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnode.id = -1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnum.io.threads = 8\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnum.network.threads = 3\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnum.partitions = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnum.recovery.threads.per.data.dir = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnum.replica.alter.log.dirs.threads = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnum.replica.fetchers = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffset.metadata.max.bytes = 4096\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.commit.required.acks = -1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.commit.timeout.ms = 5000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.load.buffer.size = 5242880\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.retention.check.interval.ms = 600000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.retention.minutes = 10080\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.topic.compression.codec = 0\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.topic.num.partitions = 50\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.topic.replication.factor = 3\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.topic.segment.bytes = 104857600\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tpassword.encoder.cipher.algorithm = AES/CBC/PKCS5Padding\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tpassword.encoder.iterations = 4096\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tpassword.encoder.key.length = 128\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tpassword.encoder.keyfactory.algorithm = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tpassword.encoder.old.secret = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tpassword.encoder.secret = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tprincipal.builder.class = class org.apache.kafka.common.security.authenticator.DefaultKafkaPrincipalBuilder\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tprocess.roles = []\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tproducer.purgatory.purge.interval.requests = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tqueued.max.request.bytes = -1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tqueued.max.requests = 500\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tquota.window.num = 11\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tquota.window.size.seconds = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.index.file.cache.total.size.bytes = 1073741824\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.manager.task.interval.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.manager.task.retry.backoff.max.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.manager.task.retry.backoff.ms = 500\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.manager.task.retry.jitter = 0.2\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.manager.thread.pool.size = 10\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.metadata.manager.class.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.metadata.manager.class.path = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.metadata.manager.impl.prefix = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.metadata.manager.listener.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.reader.max.pending.tasks = 100\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.reader.threads = 10\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.storage.manager.class.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.storage.manager.class.path = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.storage.manager.impl.prefix = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.storage.system.enable = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.fetch.backoff.ms = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.fetch.max.bytes = 1048576\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.fetch.min.bytes = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.fetch.response.max.bytes = 10485760\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.fetch.wait.max.ms = 500\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.high.watermark.checkpoint.interval.ms = 5000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.lag.time.max.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.selector.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.socket.receive.buffer.bytes = 65536\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.socket.timeout.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplication.quota.window.num = 11\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplication.quota.window.size.seconds = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\trequest.timeout.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treserved.broker.max.id = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.client.callback.handler.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.enabled.mechanisms = [GSSAPI]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.jaas.config = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.kerberos.kinit.cmd = /usr/bin/kinit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.kerberos.min.time.before.relogin = 60000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.kerberos.principal.to.local.rules = [DEFAULT]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.kerberos.service.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.kerberos.ticket.renew.jitter = 0.05\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.kerberos.ticket.renew.window.factor = 0.8\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.login.callback.handler.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.login.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.login.refresh.buffer.seconds = 300\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.login.refresh.min.period.seconds = 60\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.login.refresh.window.factor = 0.8\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.login.refresh.window.jitter = 0.05\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.mechanism.controller.protocol = GSSAPI\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.mechanism.inter.broker.protocol = GSSAPI\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.server.callback.handler.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsecurity.inter.broker.protocol = PLAINTEXT\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsecurity.providers = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsocket.connection.setup.timeout.max.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsocket.connection.setup.timeout.ms = 10000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsocket.receive.buffer.bytes = 102400\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsocket.request.max.bytes = 104857600\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsocket.send.buffer.bytes = 102400\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.cipher.suites = []\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.client.auth = none\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.enabled.protocols = [TLSv1.2, TLSv1.3]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.endpoint.identification.algorithm = https\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.engine.factory.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.key.password = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.keymanager.algorithm = SunX509\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.keystore.certificate.chain = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.keystore.key = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.keystore.location = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.keystore.password = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.keystore.type = JKS\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.principal.mapping.rules = DEFAULT\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.protocol = TLSv1.3\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.provider = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.secure.random.implementation = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.trustmanager.algorithm = PKIX\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.truststore.certificates = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.truststore.location = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.truststore.password = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.truststore.type = JKS\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.abort.timed.out.transaction.cleanup.interval.ms = 10000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.max.timeout.ms = 900000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.remove.expired.transaction.cleanup.interval.ms = 3600000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.state.log.load.buffer.size = 5242880\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.state.log.min.isr = 2\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.state.log.num.partitions = 50\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.state.log.replication.factor = 3\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.state.log.segment.bytes = 104857600\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransactional.id.expiration.ms = 604800000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tunclean.leader.election.enable = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.clientCnxnSocket = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.connect = zoo1:2181\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.connection.timeout.ms = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.max.in.flight.requests = 10\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.session.timeout.ms = 18000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.set.acl = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.cipher.suites = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.client.enable = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.crl.enable = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.enabled.protocols = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.endpoint.identification.algorithm = HTTPS\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.keystore.location = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.keystore.password = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.keystore.type = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.ocsp.enable = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.protocol = TLSv1.2\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.truststore.location = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.truststore.password = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.truststore.type = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.sync.time.ms = 2000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":" (kafka.server.KafkaConfig)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:09,538] INFO KafkaConfig values: \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tadvertised.listeners = LISTENER_DOCKER_INTERNAL://kafka2:19093,LISTENER_DOCKER_EXTERNAL://127.0.0.1:9093\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\talter.config.policy.class.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\talter.log.dirs.replication.quota.window.num = 11\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\talter.log.dirs.replication.quota.window.size.seconds = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tauthorizer.class.name = kafka.security.authorizer.AclAuthorizer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tauto.create.topics.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tauto.leader.rebalance.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tbackground.threads = 10\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tbroker.heartbeat.interval.ms = 2000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tbroker.id = 2\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tbroker.id.generation.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tbroker.rack = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tbroker.session.timeout.ms = 9000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tclient.quota.callback.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcompression.type = producer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tconnection.failed.authentication.delay.ms = 100\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tconnections.max.idle.ms = 600000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tconnections.max.reauth.ms = 0\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontrol.plane.listener.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontrolled.shutdown.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontrolled.shutdown.max.retries = 3\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontrolled.shutdown.retry.backoff.ms = 5000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.listener.names = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.append.linger.ms = 25\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.election.backoff.max.ms = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.election.timeout.ms = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.fetch.timeout.ms = 2000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.request.timeout.ms = 2000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.retry.backoff.ms = 20\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quorum.voters = []\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quota.window.num = 11\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.quota.window.size.seconds = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcontroller.socket.timeout.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tcreate.topic.policy.class.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdefault.replication.factor = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelegation.token.expiry.check.interval.ms = 3600000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelegation.token.expiry.time.ms = 86400000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelegation.token.master.key = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelegation.token.max.lifetime.ms = 604800000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelegation.token.secret.key = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelete.records.purgatory.purge.interval.requests = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tdelete.topic.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tfetch.max.bytes = 57671680\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tfetch.purgatory.purge.interval.requests = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tgroup.initial.rebalance.delay.ms = 3000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tgroup.max.session.timeout.ms = 1800000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tgroup.max.size = 2147483647\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tgroup.min.session.timeout.ms = 6000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tinitial.broker.registration.timeout.ms = 60000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tinter.broker.listener.name = LISTENER_DOCKER_INTERNAL\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tinter.broker.protocol.version = 3.0-IV1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tkafka.metrics.polling.interval.secs = 10\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tkafka.metrics.reporters = []\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tleader.imbalance.check.interval.seconds = 300\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tleader.imbalance.per.broker.percentage = 10\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlistener.security.protocol.map = LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlisteners = LISTENER_DOCKER_INTERNAL://0.0.0.0:19093,LISTENER_DOCKER_EXTERNAL://0.0.0.0:9093\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.backoff.ms = 15000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.dedupe.buffer.size = 134217728\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.delete.retention.ms = 86400000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.io.buffer.load.factor = 0.9\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.io.buffer.size = 524288\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.io.max.bytes.per.second = 1.7976931348623157E308\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.max.compaction.lag.ms = 9223372036854775807\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.min.cleanable.ratio = 0.5\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.min.compaction.lag.ms = 0\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleaner.threads = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.cleanup.policy = [delete]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.dir = /tmp/kafka-logs\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.dirs = /var/lib/kafka/data\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.flush.interval.messages = 9223372036854775807\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.flush.interval.ms = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.flush.offset.checkpoint.interval.ms = 60000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.flush.scheduler.interval.ms = 9223372036854775807\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.flush.start.offset.checkpoint.interval.ms = 60000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.index.interval.bytes = 4096\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.index.size.max.bytes = 10485760\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.message.downconversion.enable = true\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.message.format.version = 3.0-IV1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.message.timestamp.difference.max.ms = 9223372036854775807\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.message.timestamp.type = CreateTime\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.preallocate = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.retention.bytes = -1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.retention.check.interval.ms = 300000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.retention.hours = 168\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.retention.minutes = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.retention.ms = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.roll.hours = 168\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.roll.jitter.hours = 0\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.roll.jitter.ms = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.roll.ms = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.segment.bytes = 1073741824\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tlog.segment.delete.delay.ms = 60000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmax.connection.creation.rate = 2147483647\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmax.connections = 2147483647\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmax.connections.per.ip = 2147483647\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmax.connections.per.ip.overrides = \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmax.incremental.fetch.session.cache.slots = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmessage.max.bytes = 1048588\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.log.dir = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.log.max.record.bytes.between.snapshots = 20971520\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.log.segment.bytes = 1073741824\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.log.segment.min.bytes = 8388608\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.log.segment.ms = 604800000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.max.retention.bytes = -1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetadata.max.retention.ms = 604800000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetric.reporters = []\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetrics.num.samples = 2\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetrics.recording.level = INFO\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmetrics.sample.window.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tmin.insync.replicas = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnode.id = -1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnum.io.threads = 8\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnum.network.threads = 3\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnum.partitions = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnum.recovery.threads.per.data.dir = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnum.replica.alter.log.dirs.threads = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tnum.replica.fetchers = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffset.metadata.max.bytes = 4096\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.commit.required.acks = -1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.commit.timeout.ms = 5000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.load.buffer.size = 5242880\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.retention.check.interval.ms = 600000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.retention.minutes = 10080\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.topic.compression.codec = 0\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.topic.num.partitions = 50\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.topic.replication.factor = 3\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\toffsets.topic.segment.bytes = 104857600\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tpassword.encoder.cipher.algorithm = AES/CBC/PKCS5Padding\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tpassword.encoder.iterations = 4096\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tpassword.encoder.key.length = 128\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tpassword.encoder.keyfactory.algorithm = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tpassword.encoder.old.secret = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tpassword.encoder.secret = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tprincipal.builder.class = class org.apache.kafka.common.security.authenticator.DefaultKafkaPrincipalBuilder\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tprocess.roles = []\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tproducer.purgatory.purge.interval.requests = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tqueued.max.request.bytes = -1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tqueued.max.requests = 500\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tquota.window.num = 11\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tquota.window.size.seconds = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.index.file.cache.total.size.bytes = 1073741824\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.manager.task.interval.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.manager.task.retry.backoff.max.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.manager.task.retry.backoff.ms = 500\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.manager.task.retry.jitter = 0.2\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.manager.thread.pool.size = 10\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.metadata.manager.class.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.metadata.manager.class.path = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.metadata.manager.impl.prefix = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.metadata.manager.listener.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.reader.max.pending.tasks = 100\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.reader.threads = 10\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.storage.manager.class.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.storage.manager.class.path = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.storage.manager.impl.prefix = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tremote.log.storage.system.enable = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.fetch.backoff.ms = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.fetch.max.bytes = 1048576\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.fetch.min.bytes = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.fetch.response.max.bytes = 10485760\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.fetch.wait.max.ms = 500\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.high.watermark.checkpoint.interval.ms = 5000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.lag.time.max.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.selector.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.socket.receive.buffer.bytes = 65536\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplica.socket.timeout.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplication.quota.window.num = 11\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treplication.quota.window.size.seconds = 1\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\trequest.timeout.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\treserved.broker.max.id = 1000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.client.callback.handler.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.enabled.mechanisms = [GSSAPI]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.jaas.config = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.kerberos.kinit.cmd = /usr/bin/kinit\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.kerberos.min.time.before.relogin = 60000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.kerberos.principal.to.local.rules = [DEFAULT]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.kerberos.service.name = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.kerberos.ticket.renew.jitter = 0.05\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.kerberos.ticket.renew.window.factor = 0.8\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.login.callback.handler.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.login.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.login.refresh.buffer.seconds = 300\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.login.refresh.min.period.seconds = 60\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.login.refresh.window.factor = 0.8\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.login.refresh.window.jitter = 0.05\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.mechanism.controller.protocol = GSSAPI\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.mechanism.inter.broker.protocol = GSSAPI\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsasl.server.callback.handler.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsecurity.inter.broker.protocol = PLAINTEXT\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsecurity.providers = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsocket.connection.setup.timeout.max.ms = 30000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsocket.connection.setup.timeout.ms = 10000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsocket.receive.buffer.bytes = 102400\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsocket.request.max.bytes = 104857600\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tsocket.send.buffer.bytes = 102400\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.cipher.suites = []\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.client.auth = none\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.enabled.protocols = [TLSv1.2, TLSv1.3]\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.endpoint.identification.algorithm = https\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.engine.factory.class = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.key.password = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.keymanager.algorithm = SunX509\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.keystore.certificate.chain = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.keystore.key = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.keystore.location = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.keystore.password = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.keystore.type = JKS\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.principal.mapping.rules = DEFAULT\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.protocol = TLSv1.3\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.provider = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.secure.random.implementation = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.trustmanager.algorithm = PKIX\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.truststore.certificates = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.truststore.location = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.truststore.password = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tssl.truststore.type = JKS\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.abort.timed.out.transaction.cleanup.interval.ms = 10000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.max.timeout.ms = 900000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.remove.expired.transaction.cleanup.interval.ms = 3600000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.state.log.load.buffer.size = 5242880\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.state.log.min.isr = 2\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.state.log.num.partitions = 50\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.state.log.replication.factor = 3\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransaction.state.log.segment.bytes = 104857600\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\ttransactional.id.expiration.ms = 604800000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tunclean.leader.election.enable = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.clientCnxnSocket = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.connect = zoo1:2181\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.connection.timeout.ms = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.max.in.flight.requests = 10\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.session.timeout.ms = 18000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.set.acl = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.cipher.suites = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.client.enable = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.crl.enable = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.enabled.protocols = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.endpoint.identification.algorithm = HTTPS\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.keystore.location = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.keystore.password = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.keystore.type = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.ocsp.enable = false\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.protocol = TLSv1.2\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.truststore.location = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.truststore.password = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.ssl.truststore.type = null\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tzookeeper.sync.time.ms = 2000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":" (kafka.server.KafkaConfig)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:09,808] INFO [ThrottledChannelReaper-Fetch]: Starting (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:09,813] INFO [ThrottledChannelReaper-Produce]: Starting (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:09,820] INFO [ThrottledChannelReaper-Request]: Starting (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:09,844] INFO [ThrottledChannelReaper-ControllerMutation]: Starting (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:09,995] INFO Loading logs from log dirs ArraySeq(/var/lib/kafka/data) (kafka.log.LogManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:10,007] INFO Attempting recovery for all logs in /var/lib/kafka/data since no clean shutdown file was found (kafka.log.LogManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:10,025] INFO Loaded 0 logs in 30ms. (kafka.log.LogManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:10,027] INFO Starting log cleanup with a period of 300000 ms. (kafka.log.LogManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:10,035] INFO Starting log flusher with a default period of 9223372036854775807 ms. (kafka.log.LogManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:10,086] INFO Starting the log cleaner (kafka.log.LogCleaner)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:10,515] INFO [kafka-log-cleaner-thread-0]: Starting (kafka.log.LogCleaner)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:12,184] INFO [BrokerToControllerChannelManager broker=2 name=forwarding]: Starting (kafka.server.BrokerToControllerRequestThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:13,624] INFO Updated connection-accept-rate max connection creation rate to 2147483647 (kafka.network.ConnectionQuotas)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:13,638] INFO Awaiting socket connections on 0.0.0.0:19093. (kafka.network.Acceptor)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:13,747] INFO [SocketServer listenerType=ZK_BROKER, nodeId=2] Created data-plane acceptor and processors for endpoint : ListenerName(LISTENER_DOCKER_INTERNAL) (kafka.network.SocketServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:13,749] INFO Updated connection-accept-rate max connection creation rate to 2147483647 (kafka.network.ConnectionQuotas)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:13,749] INFO Awaiting socket connections on 0.0.0.0:9093. (kafka.network.Acceptor)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:13,789] INFO [SocketServer listenerType=ZK_BROKER, nodeId=2] Created data-plane acceptor and processors for endpoint : ListenerName(LISTENER_DOCKER_EXTERNAL) (kafka.network.SocketServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:13,872] INFO [BrokerToControllerChannelManager broker=2 name=alterIsr]: Starting (kafka.server.BrokerToControllerRequestThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:13,975] INFO [ExpirationReaper-2-Produce]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:13,992] INFO [ExpirationReaper-2-Fetch]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,010] INFO [ExpirationReaper-2-DeleteRecords]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,011] INFO [ExpirationReaper-2-ElectLeader]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,068] INFO [LogDirFailureHandler]: Starting (kafka.server.ReplicaManager$LogDirFailureHandler)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,192] INFO Creating /brokers/ids/2 (is it secure? false) (kafka.zk.KafkaZkClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,265] INFO Stat of the created znode at /brokers/ids/2 is: 74,74,1647594914233,1647594914233,1,0,0,72065144793399299,311,0,74\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":" (kafka.zk.KafkaZkClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,268] INFO Registered broker 2 at path /brokers/ids/2 with addresses: LISTENER_DOCKER_INTERNAL://kafka2:19093,LISTENER_DOCKER_EXTERNAL://127.0.0.1:9093, czxid (broker epoch): 74 (kafka.zk.KafkaZkClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,467] INFO [ControllerEventThread controllerId=2] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,475] INFO [ExpirationReaper-2-topic]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,522] INFO [ExpirationReaper-2-Heartbeat]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,536] INFO [ExpirationReaper-2-Rebalance]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,610] INFO [GroupCoordinator 2]: Starting up. (kafka.coordinator.group.GroupCoordinator)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,666] INFO [GroupCoordinator 2]: Startup complete. (kafka.coordinator.group.GroupCoordinator)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,719] INFO Feature ZK node created at path: /feature (kafka.server.FinalizedFeatureChangeListener)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,845] INFO [TransactionCoordinator id=2] Starting up. (kafka.coordinator.transaction.TransactionCoordinator)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,869] INFO [TransactionCoordinator id=2] Startup complete. (kafka.coordinator.transaction.TransactionCoordinator)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,910] INFO [Transaction Marker Channel Manager 2]: Starting (kafka.coordinator.transaction.TransactionMarkerChannelManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,956] INFO Updated cache from existing <empty> to latest FinalizedFeaturesAndEpoch(features=Features{}, epoch=0). (kafka.server.FinalizedFeatureCache)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,980] INFO [ZooKeeperClient ACL authorizer] Initializing a new session to zoo1:2181. (kafka.zookeeper.ZooKeeperClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,983] INFO Initiating client connection, connectString=zoo1:2181 sessionTimeout=18000 watcher=kafka.zookeeper.ZooKeeperClient$ZooKeeperClientWatcher$@3dd818e8 (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,984] INFO jute.maxbuffer value is 4194304 Bytes (org.apache.zookeeper.ClientCnxnSocket)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:14,995] INFO zookeeper.request.timeout value is 0. feature enabled=false (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,013] INFO [ZooKeeperClient ACL authorizer] Waiting until connected. (kafka.zookeeper.ZooKeeperClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,015] INFO Opening socket connection to server zoo1/192.168.32.2:2181. (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,016] INFO SASL config status: Will not attempt to authenticate using SASL (unknown error) (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,024] INFO Socket connection established, initiating session, client: /192.168.32.3:39204, server: zoo1/192.168.32.2:2181 (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,030] INFO Session establishment complete on server zoo1/192.168.32.2:2181, session id = 0x10006de0c190007, negotiated timeout = 18000 (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,030] INFO [ZooKeeperClient ACL authorizer] Connected. (kafka.zookeeper.ZooKeeperClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,290] INFO [/kafka-acl-changes-event-process-thread]: Starting (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,298] INFO [/kafka-acl-extended-changes-event-process-thread]: Starting (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,527] INFO [ExpirationReaper-2-AlterAcls]: Starting (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,587] INFO [/config/changes-event-process-thread]: Starting (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,640] INFO [SocketServer listenerType=ZK_BROKER, nodeId=2] Starting socket server acceptors and processors (kafka.network.SocketServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,679] INFO [SocketServer listenerType=ZK_BROKER, nodeId=2] Started data-plane acceptor and processor(s) for endpoint : ListenerName(LISTENER_DOCKER_INTERNAL) (kafka.network.SocketServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,695] INFO [SocketServer listenerType=ZK_BROKER, nodeId=2] Started data-plane acceptor and processor(s) for endpoint : ListenerName(LISTENER_DOCKER_EXTERNAL) (kafka.network.SocketServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,697] INFO [SocketServer listenerType=ZK_BROKER, nodeId=2] Started socket server acceptors and processors (kafka.network.SocketServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,777] INFO Kafka version: 7.0.1-ccs (org.apache.kafka.common.utils.AppInfoParser)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,777] INFO Kafka commitId: b7e52413e7cb3e8b (org.apache.kafka.common.utils.AppInfoParser)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,778] INFO Kafka startTimeMs: 1647594915697 (org.apache.kafka.common.utils.AppInfoParser)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:15,787] INFO [KafkaServer id=2] started (kafka.server.KafkaServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:16,218] INFO [BrokerToControllerChannelManager broker=2 name=alterIsr]: Recorded new controller, from now on will use broker kafka3:19094 (id: 3 rack: null) (kafka.server.BrokerToControllerRequestThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:16,243] INFO [BrokerToControllerChannelManager broker=2 name=forwarding]: Recorded new controller, from now on will use broker kafka3:19094 (id: 3 rack: null) (kafka.server.BrokerToControllerRequestThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:08,815] INFO Terminating process due to signal SIGTERM (org.apache.kafka.common.utils.LoggingSignalHandler)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:08,897] INFO [KafkaServer id=2] shutting down (kafka.server.KafkaServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:08,924] INFO [KafkaServer id=2] Starting controlled shutdown (kafka.server.KafkaServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,054] INFO [KafkaServer id=2] Controlled shutdown succeeded (kafka.server.KafkaServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,111] INFO [/config/changes-event-process-thread]: Shutting down (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,114] INFO [/config/changes-event-process-thread]: Stopped (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,115] INFO [/config/changes-event-process-thread]: Shutdown completed (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,118] INFO [SocketServer listenerType=ZK_BROKER, nodeId=2] Stopping socket server request processors (kafka.network.SocketServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,223] INFO [SocketServer listenerType=ZK_BROKER, nodeId=2] Stopped socket server request processors (kafka.network.SocketServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,234] INFO [data-plane Kafka Request Handler on Broker 2], shutting down (kafka.server.KafkaRequestHandlerPool)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,248] INFO [data-plane Kafka Request Handler on Broker 2], shut down completely (kafka.server.KafkaRequestHandlerPool)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,261] INFO [ExpirationReaper-2-AlterAcls]: Shutting down (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,269] INFO [ExpirationReaper-2-AlterAcls]: Shutdown completed (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,270] INFO [ExpirationReaper-2-AlterAcls]: Stopped (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,276] INFO [KafkaApi-2] Shutdown complete. (kafka.server.KafkaApis)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,292] WARN Session 0x10006de0c190007 for sever zoo1/192.168.32.2:2181, Closing socket connection. Attempting reconnect except it is a SessionExpiredException. (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"java.io.IOException: Connection reset by peer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/sun.nio.ch.FileDispatcherImpl.read0(Native Method)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/sun.nio.ch.SocketDispatcher.read(SocketDispatcher.java:39)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/sun.nio.ch.IOUtil.readIntoNativeBuffer(IOUtil.java:276)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/sun.nio.ch.IOUtil.read(IOUtil.java:233)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/sun.nio.ch.IOUtil.read(IOUtil.java:223)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:356)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxnSocketNIO.doIO(ClientCnxnSocketNIO.java:74)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:350)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1290)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,297] INFO [/kafka-acl-changes-event-process-thread]: Shutting down (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,292] WARN Session 0x10006de0c190003 for sever zoo1/192.168.32.2:2181, Closing socket connection. Attempting reconnect except it is a SessionExpiredException. (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"java.io.IOException: Connection reset by peer\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/sun.nio.ch.FileDispatcherImpl.read0(Native Method)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/sun.nio.ch.SocketDispatcher.read(SocketDispatcher.java:39)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/sun.nio.ch.IOUtil.readIntoNativeBuffer(IOUtil.java:276)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/sun.nio.ch.IOUtil.read(IOUtil.java:233)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/sun.nio.ch.IOUtil.read(IOUtil.java:223)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:356)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxnSocketNIO.doIO(ClientCnxnSocketNIO.java:74)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:350)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1290)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,359] INFO [/kafka-acl-changes-event-process-thread]: Stopped (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,359] INFO [/kafka-acl-changes-event-process-thread]: Shutdown completed (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,360] INFO [/kafka-acl-extended-changes-event-process-thread]: Shutting down (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,361] INFO [/kafka-acl-extended-changes-event-process-thread]: Stopped (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,361] INFO [/kafka-acl-extended-changes-event-process-thread]: Shutdown completed (kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,366] INFO [ZooKeeperClient ACL authorizer] Closing. (kafka.zookeeper.ZooKeeperClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,562] INFO Session: 0x10006de0c190007 closed (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,562] INFO EventThread shut down for session: 0x10006de0c190007 (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,566] INFO [ZooKeeperClient ACL authorizer] Closed. (kafka.zookeeper.ZooKeeperClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,568] INFO [ExpirationReaper-2-topic]: Shutting down (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,671] INFO [ExpirationReaper-2-topic]: Shutdown completed (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,671] INFO [ExpirationReaper-2-topic]: Stopped (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,681] INFO [TransactionCoordinator id=2] Shutting down. (kafka.coordinator.transaction.TransactionCoordinator)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,686] INFO [Transaction State Manager 2]: Shutdown complete (kafka.coordinator.transaction.TransactionStateManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,686] INFO [Transaction Marker Channel Manager 2]: Shutting down (kafka.coordinator.transaction.TransactionMarkerChannelManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,690] INFO [Transaction Marker Channel Manager 2]: Stopped (kafka.coordinator.transaction.TransactionMarkerChannelManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,690] INFO [Transaction Marker Channel Manager 2]: Shutdown completed (kafka.coordinator.transaction.TransactionMarkerChannelManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,696] INFO [TransactionCoordinator id=2] Shutdown complete. (kafka.coordinator.transaction.TransactionCoordinator)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,699] INFO [GroupCoordinator 2]: Shutting down. (kafka.coordinator.group.GroupCoordinator)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,700] INFO [ExpirationReaper-2-Heartbeat]: Shutting down (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,870] INFO [ExpirationReaper-2-Heartbeat]: Stopped (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,870] INFO [ExpirationReaper-2-Heartbeat]: Shutdown completed (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:09,872] INFO [ExpirationReaper-2-Rebalance]: Shutting down (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,070] INFO [ExpirationReaper-2-Rebalance]: Stopped (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,071] INFO [ExpirationReaper-2-Rebalance]: Shutdown completed (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,075] INFO [GroupCoordinator 2]: Shutdown complete. (kafka.coordinator.group.GroupCoordinator)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,081] INFO [ReplicaManager broker=2] Shutting down (kafka.server.ReplicaManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,083] INFO [LogDirFailureHandler]: Shutting down (kafka.server.ReplicaManager$LogDirFailureHandler)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,088] INFO [LogDirFailureHandler]: Stopped (kafka.server.ReplicaManager$LogDirFailureHandler)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,088] INFO [LogDirFailureHandler]: Shutdown completed (kafka.server.ReplicaManager$LogDirFailureHandler)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,102] INFO [ReplicaFetcherManager on broker 2] shutting down (kafka.server.ReplicaFetcherManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,116] INFO [ReplicaFetcherManager on broker 2] shutdown completed (kafka.server.ReplicaFetcherManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,117] INFO [ReplicaAlterLogDirsManager on broker 2] shutting down (kafka.server.ReplicaAlterLogDirsManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,118] INFO [ReplicaAlterLogDirsManager on broker 2] shutdown completed (kafka.server.ReplicaAlterLogDirsManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,118] INFO [ExpirationReaper-2-Fetch]: Shutting down (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,272] INFO [ExpirationReaper-2-Fetch]: Stopped (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,272] INFO [ExpirationReaper-2-Fetch]: Shutdown completed (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,274] INFO [ExpirationReaper-2-Produce]: Shutting down (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,471] INFO [ExpirationReaper-2-Produce]: Stopped (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,472] INFO [ExpirationReaper-2-Produce]: Shutdown completed (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,473] INFO [ExpirationReaper-2-DeleteRecords]: Shutting down (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,671] INFO [ExpirationReaper-2-DeleteRecords]: Stopped (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,672] INFO [ExpirationReaper-2-DeleteRecords]: Shutdown completed (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,672] INFO [ExpirationReaper-2-ElectLeader]: Shutting down (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,683] ERROR Unable to resolve address: zoo1:2181 (org.apache.zookeeper.client.StaticHostProvider)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"java.net.UnknownHostException: zoo1: Name or service not known\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/java.net.Inet4AddressImpl.lookupAllHostAddr(Native Method)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/java.net.InetAddress$PlatformNameService.lookupAllHostAddr(InetAddress.java:929)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/java.net.InetAddress.getAddressesFromNameService(InetAddress.java:1519)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/java.net.InetAddress$NameServiceAddresses.get(InetAddress.java:848)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/java.net.InetAddress.getAllByName0(InetAddress.java:1509)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/java.net.InetAddress.getAllByName(InetAddress.java:1368)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat java.base/java.net.InetAddress.getAllByName(InetAddress.java:1302)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.client.StaticHostProvider$1.getAllByName(StaticHostProvider.java:88)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.client.StaticHostProvider.resolve(StaticHostProvider.java:141)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.client.StaticHostProvider.next(StaticHostProvider.java:368)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1207)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,872] INFO [ExpirationReaper-2-ElectLeader]: Stopped (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,873] INFO [ExpirationReaper-2-ElectLeader]: Shutdown completed (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,890] INFO [ReplicaManager broker=2] Shut down completely (kafka.server.ReplicaManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,891] INFO [BrokerToControllerChannelManager broker=2 name=alterIsr]: Shutting down (kafka.server.BrokerToControllerRequestThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,892] INFO [BrokerToControllerChannelManager broker=2 name=alterIsr]: Stopped (kafka.server.BrokerToControllerRequestThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,892] INFO [BrokerToControllerChannelManager broker=2 name=alterIsr]: Shutdown completed (kafka.server.BrokerToControllerRequestThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,898] INFO Broker to controller channel manager for alterIsr shutdown (kafka.server.BrokerToControllerChannelManagerImpl)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,899] INFO [BrokerToControllerChannelManager broker=2 name=forwarding]: Shutting down (kafka.server.BrokerToControllerRequestThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,900] INFO [BrokerToControllerChannelManager broker=2 name=forwarding]: Stopped (kafka.server.BrokerToControllerRequestThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,900] INFO [BrokerToControllerChannelManager broker=2 name=forwarding]: Shutdown completed (kafka.server.BrokerToControllerRequestThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,902] INFO Broker to controller channel manager for forwarding shutdown (kafka.server.BrokerToControllerChannelManagerImpl)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,903] INFO Shutting down. (kafka.log.LogManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,907] INFO Shutting down the log cleaner. (kafka.log.LogCleaner)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,908] INFO [kafka-log-cleaner-thread-0]: Shutting down (kafka.log.LogCleaner)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,909] INFO [kafka-log-cleaner-thread-0]: Stopped (kafka.log.LogCleaner)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,910] INFO [kafka-log-cleaner-thread-0]: Shutdown completed (kafka.log.LogCleaner)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,930] INFO Shutdown complete. (kafka.log.LogManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,931] INFO [ControllerEventThread controllerId=2] Shutting down (kafka.controller.ControllerEventManager$ControllerEventThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,932] INFO [ControllerEventThread controllerId=2] Stopped (kafka.controller.ControllerEventManager$ControllerEventThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,933] INFO [ControllerEventThread controllerId=2] Shutdown completed (kafka.controller.ControllerEventManager$ControllerEventThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,936] INFO [PartitionStateMachine controllerId=2] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,937] INFO [ReplicaStateMachine controllerId=2] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,940] INFO [Controller id=2] Resigned (kafka.controller.KafkaController)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,941] INFO [feature-zk-node-event-process-thread]: Shutting down (kafka.server.FinalizedFeatureChangeListener$ChangeNotificationProcessorThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,944] INFO [feature-zk-node-event-process-thread]: Shutdown completed (kafka.server.FinalizedFeatureChangeListener$ChangeNotificationProcessorThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,944] INFO [feature-zk-node-event-process-thread]: Stopped (kafka.server.FinalizedFeatureChangeListener$ChangeNotificationProcessorThread)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:10,946] INFO [ZooKeeperClient Kafka server] Closing. (kafka.zookeeper.ZooKeeperClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:11,253] WARN An exception was thrown while closing send thread for session 0x10006de0c190003. (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"java.lang.IllegalArgumentException: Unable to canonicalize address zoo1:2181 because it's not resolvable\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.SaslServerPrincipal.getServerPrincipal(SaslServerPrincipal.java:78)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.SaslServerPrincipal.getServerPrincipal(SaslServerPrincipal.java:41)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxn$SendThread.startConnect(ClientCnxn.java:1161)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\tat org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1210)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:11,355] INFO EventThread shut down for session: 0x10006de0c190003 (org.apache.zookeeper.ClientCnxn)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:11,355] INFO Session: 0x10006de0c190003 closed (org.apache.zookeeper.ZooKeeper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:11,356] INFO [ZooKeeperClient Kafka server] Closed. (kafka.zookeeper.ZooKeeperClient)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:11,358] INFO [ThrottledChannelReaper-Fetch]: Shutting down (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:11,397] INFO [ThrottledChannelReaper-Fetch]: Stopped (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:11,397] INFO [ThrottledChannelReaper-Fetch]: Shutdown completed (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:11,397] INFO [ThrottledChannelReaper-Produce]: Shutting down (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:12,389] INFO [ThrottledChannelReaper-Produce]: Stopped (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:12,389] INFO [ThrottledChannelReaper-Produce]: Shutdown completed (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:12,389] INFO [ThrottledChannelReaper-Request]: Shutting down (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:13,390] INFO [ThrottledChannelReaper-Request]: Stopped (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:13,390] INFO [ThrottledChannelReaper-Request]: Shutdown completed (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:13,391] INFO [ThrottledChannelReaper-ControllerMutation]: Shutting down (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:14,390] INFO [ThrottledChannelReaper-ControllerMutation]: Stopped (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:14,390] INFO [ThrottledChannelReaper-ControllerMutation]: Shutdown completed (kafka.server.ClientQuotaManager$ThrottledChannelReaper)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:14,393] INFO [SocketServer listenerType=ZK_BROKER, nodeId=2] Shutting down socket server (kafka.network.SocketServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:14,463] INFO [SocketServer listenerType=ZK_BROKER, nodeId=2] Shutdown completed (kafka.network.SocketServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:14,465] INFO Metrics scheduler closed (org.apache.kafka.common.metrics.Metrics)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:14,465] INFO Closing reporter org.apache.kafka.common.metrics.JmxReporter (org.apache.kafka.common.metrics.Metrics)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:14,465] INFO Metrics reporters closed (org.apache.kafka.common.metrics.Metrics)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:14,471] INFO Broker and topic stats closed (kafka.server.BrokerTopicStats)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:14,474] INFO App info kafka.server for 2 unregistered (org.apache.kafka.common.utils.AppInfoParser)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 12:21:14,475] INFO [KafkaServer id=2] shut down completed (kafka.server.KafkaServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"fetch https://dl-cdn.alpinelinux.org/alpine/v3.15/main/x86_64/APKINDEX.tar.gz\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"fetch https://dl-cdn.alpinelinux.org/alpine/v3.15/community/x86_64/APKINDEX.tar.gz\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"(1/5) Installing ca-certificates (20211220-r0)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"(2/5) Installing brotli-libs (1.0.9-r5)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"(3/5) Installing nghttp2-libs (1.46.0-r0)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"(4/5) Installing libcurl (7.80.0-r0)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"(5/5) Installing curl (7.80.0-r0)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Executing busybox-1.34.1-r4.trigger\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Executing ca-certificates-20211220-r0.trigger\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"OK: 8 MiB in 19 packages\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"curl: (7) Failed to connect to fluentd port 9880 after 2 ms: Connection refused\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"curl: (7) Failed to connect to fluentd port 9880 after 1 ms: Connection refused\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   1225 --:--:-- --:--:-- --:--:--  1285\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   3239 --:--:-- --:--:-- --:--:--  3600\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   3333 --:--:-- --:--:-- --:--:--  3600\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   2643 --:--:-- --:--:-- --:--:--  3000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   3214 --:--:-- --:--:-- --:--:--  3600\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   2996 --:--:-- --:--:-- --:--:--  3600\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   3184 --:--:-- --:--:-- --:--:--  3600\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   3343 --:--:-- --:--:-- --:--:--  3600\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   3337 --:--:-- --:--:-- --:--:--  4500\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   4123 --:--:-- --:--:-- --:--:--  4500\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   2347 --:--:-- --:--:-- --:--:--  2571\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   3239 --:--:-- --:--:-- --:--:--  3600\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   3700 --:--:-- --:--:-- --:--:--  4500\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   3730 --:--:-- --:--:-- --:--:--  4500\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   4868 --:--:-- --:--:-- --:--:--  6000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   5176 --:--:-- --:--:-- --:--:--  6000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   5870 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   4609 --:--:-- --:--:-- --:--:--  6000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   7266 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   6206 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   7311 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   3554 --:--:-- --:--:-- --:--:--  4500\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   4808 --:--:-- --:--:-- --:--:--  6000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   6160 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   7269 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   5924 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   6076 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   5633 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   7260 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   6562 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   7957 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   5895 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   7006 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   6756 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   4317 --:--:-- --:--:-- --:--:--  6000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   2926 --:--:-- --:--:-- --:--:--  3600\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   4299 --:--:-- --:--:-- --:--:--  6000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   5798 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   6571 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   5129 --:--:-- --:--:-- --:--:--  6000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   5647 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   6333 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   7128 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   6367 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   7761 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   4969 --:--:-- --:--:-- --:--:--  4500\r100    18    0     0  100    18      0   4770 --:--:-- --:--:-- --:--:--  4500\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   6564 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   6412 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   4231 --:--:-- --:--:-- --:--:--  6000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   6627 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   6202 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   6846 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   6187 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   6458 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   5870 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   7860 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   5763 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   7331 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   5552 --:--:-- --:--:-- --:--:--  6000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   5891 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   2262 --:--:-- --:--:-- --:--:--  2571\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   7185 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   7346 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   3793 --:--:-- --:--:-- --:--:--  4500\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   5484 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   2742 --:--:-- --:--:-- --:--:--  4500\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   7450 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    18    0     0  100    18      0   6405 --:--:-- --:--:-- --:--:--  9000\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"curl: (7) Failed to connect to fluentd port 9880 after 1 ms: Connection refused\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"SQL Server 2019 will run as non-root by default.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"This container is running as user mssql.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"To learn more visit https://go.microsoft.com/fwlink/?linkid=2099216.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"2022-03-14 21:37:57.28 Server      Setup step is copying system data file 'C:\\templatedata\\master.mdf' to '/var/opt/mssql/data/master.mdf'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:57.36 Server      Did not find an existing master data file /var/opt/mssql/data/master.mdf, copying the missing default master and other system database files. If you have moved the database location, but not moved the database files, startup may fail. To repair: shutdown SQL Server, move the master database to configured location, and restart.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:57.37 Server      Setup step is copying system data file 'C:\\templatedata\\mastlog.ldf' to '/var/opt/mssql/data/mastlog.ldf'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:57.38 Server      Setup step is copying system data file 'C:\\templatedata\\model.mdf' to '/var/opt/mssql/data/model.mdf'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:57.39 Server      Setup step is copying system data file 'C:\\templatedata\\modellog.ldf' to '/var/opt/mssql/data/modellog.ldf'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:57.41 Server      Setup step is copying system data file 'C:\\templatedata\\msdbdata.mdf' to '/var/opt/mssql/data/msdbdata.mdf'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:57.43 Server      Setup step is copying system data file 'C:\\templatedata\\msdblog.ldf' to '/var/opt/mssql/data/msdblog.ldf'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:57.44 Server      Setup step is FORCE copying system data file 'C:\\templatedata\\model_replicatedmaster.mdf' to '/var/opt/mssql/data/model_replicatedmaster.mdf'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:57.45 Server      Setup step is FORCE copying system data file 'C:\\templatedata\\model_replicatedmaster.ldf' to '/var/opt/mssql/data/model_replicatedmaster.ldf'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:57.47 Server      Setup step is FORCE copying system data file 'C:\\templatedata\\model_msdbdata.mdf' to '/var/opt/mssql/data/model_msdbdata.mdf'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:57.49 Server      Setup step is FORCE copying system data file 'C:\\templatedata\\model_msdblog.ldf' to '/var/opt/mssql/data/model_msdblog.ldf'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:57.55 Server      Microsoft SQL Server 2019 (RTM-CU15) (KB5008996) - 15.0.4198.2 (X64) \r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r\tJan 12 2022 22:30:08 \r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r\tCopyright (C) 2019 Microsoft Corporation\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r\tDeveloper Edition (64-bit) on Linux (Ubuntu 20.04.3 LTS) <X64>\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:57.57 Server      UTC adjustment: 0:00\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:57.57 Server      (c) Microsoft Corporation.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:57.57 Server      All rights reserved.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:57.58 Server      Server process ID is 340.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:57.58 Server      Logging SQL Server messages in file '/var/opt/mssql/log/errorlog'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:57.59 Server      Registry startup parameters: \r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r\t -d /var/opt/mssql/data/master.mdf\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r\t -l /var/opt/mssql/data/mastlog.ldf\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r\t -e /var/opt/mssql/log/errorlog\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:57.59 Server      SQL Server detected 4 sockets with 1 cores per socket and 1 logical processors per socket, 4 total logical processors; using 4 logical processors based on SQL Server licensing. This is an informational message; no user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:57.61 Server      SQL Server is starting at normal priority base (=7). This is an informational message only. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:57.61 Server      Detected 1588 MB of RAM. This is an informational message; no user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:57.62 Server      Using conventional memory in the memory manager.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:57.62 Server      Page exclusion bitmap is enabled.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:57.65 Server      Buffer pool extension is not supported on Linux platform.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:57.65 Server      Buffer Pool: Allocating 262144 bytes for 167553 hashPages.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:57.80 Server      Buffer pool extension is already disabled. No action is necessary.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:58.14 Server      Successfully initialized the TLS configuration. Allowed TLS protocol versions are ['1.0 1.1 1.2']. Allowed TLS ciphers are ['ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:!DHE-RSA-AES256-GCM-SHA384:!DHE-RSA-AES128-GCM-SHA256:!DHE-RSA-AES256-SHA:!DHE-RSA-AES128-SHA'].\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:58.18 Server      Query Store settings initialized with enabled = 1, \r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:58.20 Server      The maximum number of dedicated administrator connections for this instance is '1'\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:58.20 Server      Node configuration: node 0: CPU mask: 0x000000000000000f:0 Active CPU mask: 0x000000000000000f:0. This message provides a description of the NUMA configuration for this computer. This is an informational message only. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:58.23 Server      Using dynamic lock allocation.  Initial allocation of 2500 Lock blocks and 5000 Lock Owner blocks per node.  This is an informational message only.  No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:58.26 Server      In-Memory OLTP initialized on lowend machine.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:58.29 Server      [INFO] Created Extended Events session 'hkenginexesession'\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:58.29 Server      Database Instant File Initialization: enabled. For security and performance considerations see the topic 'Database Instant File Initialization' in SQL Server Books Online. This is an informational message only. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\rForceFlush is enabled for this instance. \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:58.31 Server      Total Log Writer threads: 2. This is an informational message; no user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:58.36 Server      clflush is selected for pmem flush operation.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:58.38 Server      Software Usage Metrics is disabled.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:58.42 spid10s     [1]. Feature Status: PVS: 0. CTR: 0. ConcurrentPFSUpdate: 1.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:58.43 spid10s     Starting up database 'master'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:58.45 Server      CLR version v4.0.30319 loaded.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\rForceFlush feature is enabled for log durability.\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:58.78 spid10s     Converting database 'master' from version 897 to the current version 904.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:58.78 spid10s     Database 'master' running the upgrade step from version 897 to version 898.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:58.82 spid10s     Database 'master' running the upgrade step from version 898 to version 899.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:58.85 spid10s     Database 'master' running the upgrade step from version 899 to version 900.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:58.89 spid10s     Database 'master' running the upgrade step from version 900 to version 901.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:58.90 spid10s     Database 'master' running the upgrade step from version 901 to version 902.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:58.91 spid10s     Database 'master' running the upgrade step from version 902 to version 903.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:58.92 spid10s     Database 'master' running the upgrade step from version 903 to version 904.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:59.07 Server      Common language runtime (CLR) functionality initialized.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:59.29 spid10s     Resource governor reconfiguration succeeded.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:59.29 spid10s     SQL Server Audit is starting the audits. This is an informational message. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:59.29 spid10s     SQL Server Audit has started the audits. This is an informational message. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:59.35 spid10s     SQL Trace ID 1 was started by login \"sa\".\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:59.37 spid10s     Server name is '32bfdba81a2b'. This is an informational message only. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:59.39 spid25s     Password policy update was successful.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:59.50 spid12s     [32767]. Feature Status: PVS: 0. CTR: 0. ConcurrentPFSUpdate: 1.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:59.52 spid12s     Starting up database 'mssqlsystemresource'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:59.52 spid10s     [4]. Feature Status: PVS: 0. CTR: 0. ConcurrentPFSUpdate: 1.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:59.54 spid28s     Always On: The availability replica manager is starting. This is an informational message only. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:59.56 spid10s     Starting up database 'msdb'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:59.57 spid28s     Always On: The availability replica manager is waiting for the instance of SQL Server to allow client connections. This is an informational message only. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:59.57 spid12s     The resource database build version is 15.00.4198. This is an informational message only. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:59.85 spid12s     [3]. Feature Status: PVS: 0. CTR: 0. ConcurrentPFSUpdate: 1.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:59.86 spid25s     A self-generated certificate was successfully loaded for encryption.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:59.86 spid12s     Starting up database 'model'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:59.89 spid10s     The tail of the log for database msdb is being rewritten to match the new sector size of 4096 bytes.  3072 bytes at offset 50176 in file /var/opt/mssql/data/MSDBLog.ldf will be written.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:59.89 spid25s     Server is listening on [ 'any' <ipv6> 1433].\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:59.91 spid25s     Server is listening on [ 'any' <ipv4> 1433].\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:59.92 Server      Server is listening on [ ::1 <ipv6> 1434].\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:59.93 Server      Server is listening on [ 127.0.0.1 <ipv4> 1434].\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:59.93 Server      Dedicated admin connection support was established for listening locally on port 1434.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:59.94 spid25s     Server is listening on [ ::1 <ipv6> 1431].\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:59.95 spid25s     Server is listening on [ 127.0.0.1 <ipv4> 1431].\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:59.95 spid10s     Converting database 'msdb' from version 897 to the current version 904.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:59.98 spid10s     Database 'msdb' running the upgrade step from version 897 to version 898.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:59.98 spid25s     SQL Server is now ready for client connections. This is an informational message; no user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:37:59.98 spid12s     The tail of the log for database model is being rewritten to match the new sector size of 4096 bytes.  512 bytes at offset 73216 in file /var/opt/mssql/data/modellog.ldf will be written.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:38:00.07 spid10s     Database 'msdb' running the upgrade step from version 898 to version 899.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:38:00.09 spid12s     Converting database 'model' from version 897 to the current version 904.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:38:00.10 spid12s     Database 'model' running the upgrade step from version 897 to version 898.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:38:00.13 spid12s     Database 'model' running the upgrade step from version 898 to version 899.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:38:00.13 spid10s     Database 'msdb' running the upgrade step from version 899 to version 900.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:38:00.16 spid12s     Database 'model' running the upgrade step from version 899 to version 900.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:38:00.18 spid10s     Database 'msdb' running the upgrade step from version 900 to version 901.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:38:00.19 spid12s     Database 'model' running the upgrade step from version 900 to version 901.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:38:00.20 spid10s     Database 'msdb' running the upgrade step from version 901 to version 902.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:38:00.21 spid12s     Database 'model' running the upgrade step from version 901 to version 902.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:38:00.23 spid12s     Database 'model' running the upgrade step from version 902 to version 903.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:38:00.24 spid12s     Database 'model' running the upgrade step from version 903 to version 904.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:38:00.36 spid12s     Clearing tempdb database.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:38:00.58 spid12s     [2]. Feature Status: PVS: 0. CTR: 0. ConcurrentPFSUpdate: 1.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:38:00.59 spid12s     Starting up database 'tempdb'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:38:00.70 spid12s     The tempdb database has 1 data file(s).\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:38:00.74 spid30s     The Service Broker endpoint is in disabled or stopped state.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:38:00.75 spid30s     The Database Mirroring endpoint is in disabled or stopped state.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:38:00.76 spid30s     Service Broker manager has started.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:38:00.77 spid10s     Database 'msdb' running the upgrade step from version 902 to version 903.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:38:00.78 spid10s     Database 'msdb' running the upgrade step from version 903 to version 904.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:38:01.02 spid10s     Recovery is complete. This is an informational message only. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:38:01.06 spid28s     The default language (LCID 0) has been set for engine and full-text services.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:38:01.24 spid28s     The tempdb database has 4 data file(s).\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:43:24.14 Logon       Error: 18456, Severity: 14, State: 38.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:43:24.14 Logon       Login failed for user 'sa'. Reason: Failed to open the explicitly specified database 'TodoApp'. [CLIENT: 192.168.16.1]\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:43:24.51 spid61      [5]. Feature Status: PVS: 0. CTR: 0. ConcurrentPFSUpdate: 1.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:43:24.51 spid61      Starting up database 'TodoApp'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:43:24.56 spid61      Parallel redo is started for database 'TodoApp' with worker pool size [2].\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:43:24.59 spid61      Parallel redo is shutdown for database 'TodoApp' with worker pool size [2].\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:43:24.66 spid61      Setting database option READ_COMMITTED_SNAPSHOT to ON for database 'TodoApp'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:43:24.71 spid61      [5]. Feature Status: PVS: 0. CTR: 0. ConcurrentPFSUpdate: 1.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:43:24.71 spid61      Starting up database 'TodoApp'.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:43:24.77 spid61      Parallel redo is started for database 'TodoApp' with worker pool size [2].\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:43:24.81 spid35s     Parallel redo is shutdown for database 'TodoApp' with worker pool size [2].\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:44:50.37 spid60      Attempting to load library 'xplog70.dll' into memory. This is an informational message only. No user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r2022-03-14 21:44:50.42 spid60      Using 'xplog70.dll' version '2019.150.4198' to execute extended stored procedure 'xp_msver'. This is an informational message only; no user action is required.\r\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Server is up on port 3000\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Hello world\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"===> User\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"uid=1000(appuser) gid=1000(appuser) groups=1000(appuser)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"===> Configuring ...\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"===> Running preflight checks ... \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"===> Check if /var/lib/zookeeper/data is writable ...\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"===> Check if /var/lib/zookeeper/log is writable ...\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"===> Launching ... \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"===> Printing /var/lib/zookeeper/data/myid \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"1===> Launching zookeeper ... \n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:01,830] INFO Reading configuration from: /etc/kafka/zookeeper.properties (org.apache.zookeeper.server.quorum.QuorumPeerConfig)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:01,859] INFO clientPortAddress is 0.0.0.0:2181 (org.apache.zookeeper.server.quorum.QuorumPeerConfig)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:01,859] INFO secureClientPort is not set (org.apache.zookeeper.server.quorum.QuorumPeerConfig)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:01,859] INFO observerMasterPort is not set (org.apache.zookeeper.server.quorum.QuorumPeerConfig)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:01,860] INFO metricsProvider.className is org.apache.zookeeper.metrics.impl.DefaultMetricsProvider (org.apache.zookeeper.server.quorum.QuorumPeerConfig)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:01,875] ERROR Invalid configuration, only one server specified (ignoring) (org.apache.zookeeper.server.quorum.QuorumPeerConfig)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:01,890] INFO autopurge.snapRetainCount set to 3 (org.apache.zookeeper.server.DatadirCleanupManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:01,890] INFO autopurge.purgeInterval set to 0 (org.apache.zookeeper.server.DatadirCleanupManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:01,890] INFO Purge task is not scheduled. (org.apache.zookeeper.server.DatadirCleanupManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:01,891] WARN Either no config or no quorum defined in config, running in standalone mode (org.apache.zookeeper.server.quorum.QuorumPeerMain)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:01,902] INFO Log4j 1.2 jmx support found and enabled. (org.apache.zookeeper.jmx.ManagedUtil)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:01,931] INFO Reading configuration from: /etc/kafka/zookeeper.properties (org.apache.zookeeper.server.quorum.QuorumPeerConfig)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:01,932] INFO clientPortAddress is 0.0.0.0:2181 (org.apache.zookeeper.server.quorum.QuorumPeerConfig)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:01,932] INFO secureClientPort is not set (org.apache.zookeeper.server.quorum.QuorumPeerConfig)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:01,932] INFO observerMasterPort is not set (org.apache.zookeeper.server.quorum.QuorumPeerConfig)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:01,933] INFO metricsProvider.className is org.apache.zookeeper.metrics.impl.DefaultMetricsProvider (org.apache.zookeeper.server.quorum.QuorumPeerConfig)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:01,933] ERROR Invalid configuration, only one server specified (ignoring) (org.apache.zookeeper.server.quorum.QuorumPeerConfig)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:01,933] INFO Starting server (org.apache.zookeeper.server.ZooKeeperServerMain)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:01,990] INFO ServerMetrics initialized with provider org.apache.zookeeper.metrics.impl.DefaultMetricsProvider@68c72235 (org.apache.zookeeper.server.ServerMetrics)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,003] INFO zookeeper.snapshot.trust.empty : false (org.apache.zookeeper.server.persistence.FileTxnSnapLog)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,039] INFO  (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,039] INFO   ______                  _                                           (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,039] INFO  |___  /                 | |                                          (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,039] INFO     / /    ___     ___   | | __   ___    ___   _ __     ___   _ __    (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,040] INFO    / /    / _ \\   / _ \\  | |/ /  / _ \\  / _ \\ | '_ \\   / _ \\ | '__| (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,040] INFO   / /__  | (_) | | (_) | |   <  |  __/ |  __/ | |_) | |  __/ | |     (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,040] INFO  /_____|  \\___/   \\___/  |_|\\_\\  \\___|  \\___| | .__/   \\___| |_| (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,040] INFO                                               | |                      (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,040] INFO                                               |_|                      (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,040] INFO  (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,045] INFO Server environment:zookeeper.version=3.6.3--6401e4ad2087061bc6b9f80dec2d69f2e3c8660a, built on 04/08/2021 16:35 GMT (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,045] INFO Server environment:host.name=zoo1 (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,045] INFO Server environment:java.version=11.0.13 (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,045] INFO Server environment:java.vendor=Azul Systems, Inc. (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,046] INFO Server environment:java.home=/usr/lib/jvm/zulu11-ca (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,046] INFO Server environment:java.class.path=/usr/bin/../share/java/kafka/jetty-server-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/rocksdbjni-6.19.3.jar:/usr/bin/../share/java/kafka/connect-mirror-client-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/kafka-server-common-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/jersey-server-2.34.jar:/usr/bin/../share/java/kafka/hk2-locator-2.6.1.jar:/usr/bin/../share/java/kafka/jackson-databind-2.12.3.jar:/usr/bin/../share/java/kafka/maven-artifact-3.8.1.jar:/usr/bin/../share/java/kafka/scala-reflect-2.13.6.jar:/usr/bin/../share/java/kafka/slf4j-api-1.7.30.jar:/usr/bin/../share/java/kafka/kafka-shell-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/jetty-continuation-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/connect-basic-auth-extension-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/connect-api-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/netty-transport-4.1.68.Final.jar:/usr/bin/../share/java/kafka/snappy-java-1.1.8.1.jar:/usr/bin/../share/java/kafka/jetty-http-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/zookeeper-jute-3.6.3.jar:/usr/bin/../share/java/kafka/netty-common-4.1.68.Final.jar:/usr/bin/../share/java/kafka/jakarta.activation-api-1.2.1.jar:/usr/bin/../share/java/kafka/slf4j-log4j12-1.7.30.jar:/usr/bin/../share/java/kafka/connect-mirror-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/netty-buffer-4.1.68.Final.jar:/usr/bin/../share/java/kafka/kafka-tools-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/osgi-resource-locator-1.0.3.jar:/usr/bin/../share/java/kafka/audience-annotations-0.5.0.jar:/usr/bin/../share/java/kafka/jersey-container-servlet-2.34.jar:/usr/bin/../share/java/kafka/jackson-jaxrs-json-provider-2.12.3.jar:/usr/bin/../share/java/kafka/jakarta.ws.rs-api-2.1.6.jar:/usr/bin/../share/java/kafka/kafka_2.13-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/javassist-3.27.0-GA.jar:/usr/bin/../share/java/kafka/kafka-storage-api-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/jetty-servlet-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/jersey-client-2.34.jar:/usr/bin/../share/java/kafka/hk2-utils-2.6.1.jar:/usr/bin/../share/java/kafka/jackson-jaxrs-base-2.12.3.jar:/usr/bin/../share/java/kafka/reflections-0.9.12.jar:/usr/bin/../share/java/kafka/kafka-streams-examples-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/jaxb-api-2.3.0.jar:/usr/bin/../share/java/kafka/jetty-util-ajax-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/netty-transport-native-epoll-4.1.68.Final.jar:/usr/bin/../share/java/kafka/scala-logging_2.13-3.9.3.jar:/usr/bin/../share/java/kafka/kafka-storage-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/javax.ws.rs-api-2.1.1.jar:/usr/bin/../share/java/kafka/paranamer-2.8.jar:/usr/bin/../share/java/kafka/jersey-container-servlet-core-2.34.jar:/usr/bin/../share/java/kafka/jetty-security-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/kafka-streams-scala_2.13-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/jetty-util-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/lz4-java-1.7.1.jar:/usr/bin/../share/java/kafka/confluent-log4j-1.2.17-cp2.jar:/usr/bin/../share/java/kafka/kafka.jar:/usr/bin/../share/java/kafka/jakarta.annotation-api-1.3.5.jar:/usr/bin/../share/java/kafka/jersey-common-2.34.jar:/usr/bin/../share/java/kafka/jakarta.inject-2.6.1.jar:/usr/bin/../share/java/kafka/jackson-module-scala_2.13-2.12.3.jar:/usr/bin/../share/java/kafka/connect-json-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/jackson-annotations-2.12.3.jar:/usr/bin/../share/java/kafka/metrics-core-4.1.12.1.jar:/usr/bin/../share/java/kafka/scala-java8-compat_2.13-1.0.0.jar:/usr/bin/../share/java/kafka/javax.servlet-api-3.1.0.jar:/usr/bin/../share/java/kafka/jackson-datatype-jdk8-2.12.3.jar:/usr/bin/../share/java/kafka/trogdor-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/connect-runtime-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/jakarta.xml.bind-api-2.3.2.jar:/usr/bin/../share/java/kafka/jakarta.validation-api-2.0.2.jar:/usr/bin/../share/java/kafka/netty-transport-native-unix-common-4.1.68.Final.jar:/usr/bin/../share/java/kafka/kafka-streams-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/kafka-raft-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/scala-library-2.13.6.jar:/usr/bin/../share/java/kafka/jetty-servlets-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/netty-handler-4.1.68.Final.jar:/usr/bin/../share/java/kafka/plexus-utils-3.2.1.jar:/usr/bin/../share/java/kafka/kafka-log4j-appender-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/jackson-dataformat-csv-2.12.3.jar:/usr/bin/../share/java/kafka/jackson-core-2.12.3.jar:/usr/bin/../share/java/kafka/hk2-api-2.6.1.jar:/usr/bin/../share/java/kafka/argparse4j-0.7.0.jar:/usr/bin/../share/java/kafka/zookeeper-3.6.3.jar:/usr/bin/../share/java/kafka/commons-cli-1.4.jar:/usr/bin/../share/java/kafka/netty-codec-4.1.68.Final.jar:/usr/bin/../share/java/kafka/jetty-client-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/jackson-module-jaxb-annotations-2.12.3.jar:/usr/bin/../share/java/kafka/zstd-jni-1.5.0-2.jar:/usr/bin/../share/java/kafka/jersey-hk2-2.34.jar:/usr/bin/../share/java/kafka/jline-3.12.1.jar:/usr/bin/../share/java/kafka/kafka-streams-test-utils-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/connect-transforms-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/kafka-clients-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/jopt-simple-5.0.4.jar:/usr/bin/../share/java/kafka/jetty-io-9.4.43.v20210629.jar:/usr/bin/../share/java/kafka/kafka-metadata-7.0.1-ccs.jar:/usr/bin/../share/java/kafka/activation-1.1.1.jar:/usr/bin/../share/java/kafka/commons-lang3-3.8.1.jar:/usr/bin/../share/java/kafka/aopalliance-repackaged-2.6.1.jar:/usr/bin/../share/java/kafka/metrics-core-2.2.0.jar:/usr/bin/../share/java/kafka/scala-collection-compat_2.13-2.4.4.jar:/usr/bin/../share/java/kafka/netty-resolver-4.1.68.Final.jar:/usr/bin/../share/java/confluent-telemetry/* (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,046] INFO Server environment:java.library.path=/usr/java/packages/lib:/usr/lib64:/lib64:/lib:/usr/lib (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,046] INFO Server environment:java.io.tmpdir=/tmp (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,046] INFO Server environment:java.compiler=<NA> (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,047] INFO Server environment:os.name=Linux (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,047] INFO Server environment:os.arch=amd64 (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,047] INFO Server environment:os.version=5.10.76-linuxkit (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,047] INFO Server environment:user.name=appuser (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,048] INFO Server environment:user.home=/home/appuser (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,048] INFO Server environment:user.dir=/home/appuser (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,048] INFO Server environment:os.memory.free=492MB (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,049] INFO Server environment:os.memory.max=512MB (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,049] INFO Server environment:os.memory.total=512MB (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,050] INFO zookeeper.enableEagerACLCheck = false (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,050] INFO zookeeper.digest.enabled = true (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,050] INFO zookeeper.closeSessionTxn.enabled = true (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,051] INFO zookeeper.flushDelay=0 (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,051] INFO zookeeper.maxWriteQueuePollTime=0 (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,052] INFO zookeeper.maxBatchSize=1000 (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,052] INFO zookeeper.intBufferStartingSizeBytes = 1024 (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,056] INFO Weighed connection throttling is disabled (org.apache.zookeeper.server.BlueThrottle)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,062] INFO minSessionTimeout set to 6000 (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,062] INFO maxSessionTimeout set to 60000 (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,068] INFO Response cache size is initialized with value 400. (org.apache.zookeeper.server.ResponseCache)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,068] INFO Response cache size is initialized with value 400. (org.apache.zookeeper.server.ResponseCache)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,071] INFO zookeeper.pathStats.slotCapacity = 60 (org.apache.zookeeper.server.util.RequestPathMetricsCollector)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,071] INFO zookeeper.pathStats.slotDuration = 15 (org.apache.zookeeper.server.util.RequestPathMetricsCollector)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,072] INFO zookeeper.pathStats.maxDepth = 6 (org.apache.zookeeper.server.util.RequestPathMetricsCollector)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,072] INFO zookeeper.pathStats.initialDelay = 5 (org.apache.zookeeper.server.util.RequestPathMetricsCollector)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,073] INFO zookeeper.pathStats.delay = 5 (org.apache.zookeeper.server.util.RequestPathMetricsCollector)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,073] INFO zookeeper.pathStats.enabled = false (org.apache.zookeeper.server.util.RequestPathMetricsCollector)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,082] INFO The max bytes for all large requests are set to 104857600 (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,082] INFO The large request threshold is set to -1 (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,083] INFO Created server with tickTime 3000 minSessionTimeout 6000 maxSessionTimeout 60000 clientPortListenBacklog -1 datadir /var/lib/zookeeper/log/version-2 snapdir /var/lib/zookeeper/data/version-2 (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,156] INFO Logging initialized @2564ms to org.eclipse.jetty.util.log.Slf4jLog (org.eclipse.jetty.util.log)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,451] WARN o.e.j.s.ServletContextHandler@23941fb4{/,null,STOPPED} contextPath ends with /* (org.eclipse.jetty.server.handler.ContextHandler)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,451] WARN Empty contextPath (org.eclipse.jetty.server.handler.ContextHandler)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,509] INFO jetty-9.4.43.v20210629; built: 2021-06-30T11:07:22.254Z; git: 526006ecfa3af7f1a27ef3a288e2bef7ea9dd7e8; jvm 11.0.13+8-LTS (org.eclipse.jetty.server.Server)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,604] INFO DefaultSessionIdManager workerName=node0 (org.eclipse.jetty.server.session)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,604] INFO No SessionScavenger set, using defaults (org.eclipse.jetty.server.session)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,608] INFO node0 Scavenging every 660000ms (org.eclipse.jetty.server.session)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,621] WARN ServletContext@o.e.j.s.ServletContextHandler@23941fb4{/,null,STARTING} has uncovered http methods for path: /* (org.eclipse.jetty.security.SecurityHandler)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,651] INFO Started o.e.j.s.ServletContextHandler@23941fb4{/,null,AVAILABLE} (org.eclipse.jetty.server.handler.ContextHandler)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,695] INFO Started ServerConnector@52f27fbd{HTTP/1.1, (http/1.1)}{0.0.0.0:8080} (org.eclipse.jetty.server.AbstractConnector)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,695] INFO Started @3104ms (org.eclipse.jetty.server.Server)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,695] INFO Started AdminServer on address 0.0.0.0, port 8080 and command URL /commands (org.apache.zookeeper.server.admin.JettyAdminServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,709] INFO Using org.apache.zookeeper.server.NIOServerCnxnFactory as server connection factory (org.apache.zookeeper.server.ServerCnxnFactory)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,712] WARN maxCnxns is not configured, using default value 0. (org.apache.zookeeper.server.ServerCnxnFactory)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,718] INFO Configuring NIO connection handler with 10s sessionless connection timeout, 1 selector thread(s), 8 worker threads, and 64 kB direct buffers. (org.apache.zookeeper.server.NIOServerCnxnFactory)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,723] INFO binding to port 0.0.0.0/0.0.0.0:2181 (org.apache.zookeeper.server.NIOServerCnxnFactory)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,767] INFO Using org.apache.zookeeper.server.watch.WatchManager as watch manager (org.apache.zookeeper.server.watch.WatchManagerFactory)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,768] INFO Using org.apache.zookeeper.server.watch.WatchManager as watch manager (org.apache.zookeeper.server.watch.WatchManagerFactory)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,772] INFO zookeeper.snapshotSizeFactor = 0.33 (org.apache.zookeeper.server.ZKDatabase)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,772] INFO zookeeper.commitLogCount=500 (org.apache.zookeeper.server.ZKDatabase)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,788] INFO zookeeper.snapshot.compression.method = CHECKED (org.apache.zookeeper.server.persistence.SnapStream)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,788] INFO Snapshotting: 0x0 to /var/lib/zookeeper/data/version-2/snapshot.0 (org.apache.zookeeper.server.persistence.FileTxnSnapLog)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,799] INFO Snapshot loaded in 26 ms, highest zxid is 0x0, digest is 1371985504 (org.apache.zookeeper.server.ZKDatabase)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,799] INFO Snapshotting: 0x0 to /var/lib/zookeeper/data/version-2/snapshot.0 (org.apache.zookeeper.server.persistence.FileTxnSnapLog)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,800] INFO Snapshot taken in 1 ms (org.apache.zookeeper.server.ZooKeeperServer)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,824] INFO PrepRequestProcessor (sid:0) started, reconfigEnabled=false (org.apache.zookeeper.server.PrepRequestProcessor)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,827] INFO zookeeper.request_throttler.shutdownTimeout = 10000 (org.apache.zookeeper.server.RequestThrottler)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,868] INFO Using checkIntervalMs=60000 maxPerMinute=10000 maxNeverUsedIntervalMs=0 (org.apache.zookeeper.server.ContainerManager)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:02,870] INFO ZooKeeper audit is disabled. (org.apache.zookeeper.audit.ZKAuditProvider)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"[2022-03-18 09:15:03,094] INFO Creating new log file: log.1 (org.apache.zookeeper.server.persistence.FileTxnLog)\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"curl: (7) Failed to connect to fluentd port 9880 after 1 ms: Connection refused\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"curl: (7) Failed to connect to fluentd port 9880 after 1 ms: Connection refused\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"curl: (7) Failed to connect to fluentd port 9880 after 2 ms: Connection refused\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"curl: (7) Failed to connect to fluentd port 9880 after 1 ms: Connection refused\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"curl: (7) Failed to connect to fluentd port 9880 after 2 ms: Connection refused\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"curl: (7) Failed to connect to fluentd port 9880 after 2 ms: Connection refused\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"curl: (7) Failed to connect to fluentd port 9880 after 1 ms: Connection refused\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"curl: (7) Failed to connect to fluentd port 9880 after 1 ms: Connection refused\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"curl: (7) Failed to connect to fluentd port 9880 after 2 ms: Connection refused\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"curl: (7) Failed to connect to fluentd port 9880 after 1 ms: Connection refused\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Writing log to a file\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"Sending logs to FluentD\n","stream":"stdout"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"                                 Dload  Upload   Total   Spent    Left  Speed\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n","stream":"stderr"}
1970-01-01T00:33:42+00:00	docker.log	{"log":"curl: (7) Failed to connect to fluentd port 9880 after 1 ms: Connection refused\n","stream":"stderr"}
